https://github.com/gras1/BlazorCommercePart1
Build simple e-commerce website using Blazor

1. This project will be called Blazor Commerce

2. Created a website logo using https://www.freelogodesign.org and save it to your computer, be sure to name it logo.png

3. Open Visual Studio Code

4. Open a Terminal Window

5. type cd\ to go back to root and then cd in to the projects folder

6. type "md BlazorCommerce" and hit return to create the project folder, then cd in to this folder

7. type "dotnet new blazorwasm -f net5.0 -o BlazorCommerce"

8. We will explore the contents of this by opening the folder in VSCode, say 'yes' if you get a prompt to add missing required assets to build
 and debug in VSCode which will create a .vscode folder

9. We can see what this Blazor template looks like by typing dotnet run in the Terminal Window
[when finished press Ctrl+C to stop the website running]
 , we will be using an e-commerce website template

10. The final version will be based on an e-commerce template which I purchased from wpthemesgrid.com
https://wpthemesgrid.com/downloads/eshop-ecommerce-html5-template/
[demonstrate home, Shop Grid, Shop Single, update shopping cart]

11. Create an images folder under wwwroot and move the Blazor Commerce logo in to it

12. Now we start butchering the website in favour of the template. Start by removing the contents of the wwwroot/css folder and put the
 contents from the template css folder in it

13. Delete the sample-data folder

14. Add a js folder to wwwroot and copy all the template javascript files in to it
[mention that ultimately we will reference CDN versions of the JavaScript files]

15. Replace the <head> section in wwwroot/index.html - with the <head> section from the template/index.html leaving the <div id="app"> ,
 <div id="blazor-error-ui"> and <script src="_framework/blazor.webassembly.js"></script>
[from the DOCTYPE declaration down to and including the <link rel="stylesheet" href="css/responsive.css">]

16. Add a class of "js" to the body tag

17. Be sure to add <base href="/" /> in the <head> section in wwwroot/index.html otherwise site navigation doesn't work
[replace the duplicated meta http-equiv tag]

18. under the <script src="_framework/blazor.webassembly.js"></script> add the javascript references from the template/index.html

19. Replace the Loading... in wwwroot/index.html with the preloader div and its contents from template/index.html

20. Remove the contents of Shared/MainLayout.razor leaving the @inherits and @Body

21. Copy the rest of the content out of template/index.html in to Shared/MainLayout.razor, delete the free-version-banner section
[from <!-- Header --> to <!-- /End Footer Area -->]

22. In the shared folder delete MainLayout.razor.css, NavMenu.razor, NavMenu.razor.css and SurveyPrompt.razor

23. Delete the content of pages/index.razor except for the @page directive

24. In Shared/MainLayout.razor "cut" the content of Slider Area to End Shop Blog and "paste" it into pages/index.razor below the @page directive

25. Move the @body directive in Shared/MainLayout.razor to between the <!--/ End Header --> and <!-- Start Shop Services Area --> html comments

26. In the pages folder delete Counter.razor and FetchData.razor

27. Copy style.css from the root of the template folder to wwwroot/css

28. Update wwwroot/index.html of the line that reads:
<link rel="stylesheet" href="style.css">
to: <link rel="stylesheet" href="css/style.css">

29. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
Structurally the website is coming along and requires a few tweaks to the styling. Namely replacing the orange colour with the purple colour of the logo.

30. We need to replace the dominant orange colour with the purple colour of the logo, in wwwroot/style.css replace all instances of the color: #f7941d and #f6931d with #5C2D91

31. Create a fonts folder in wwwroot and then copy the contents of the template/fonts folder in to it

32. In the Pages folder create a new file called Category.razor

33. At the top of Pages/Category.razor put the code from "1. Category.razor snippet.txt"
[The friendlyCategoryUrl passed in on the url is stored in the parameter. Note that values passed in this way must be set as public Parameters]

34. From the shop-grid.html page in the template copy the content between the lines that read:
<!-- Breadcrumbs -->
and:
<!--/ End Product Style 1  -->
then paste it after the @page directive and before the @code section

35. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
Flick between the index page and the /category/test, the Category drop down menu is obscuring the breadcrumb and the categories menu

36. To manage the different header navigation layouts, after extensive research and lots of trial and error we need to use state by means
 of NotifyStateChanged. In the BlazorCommerce root folder, create a new file called AppState.cs with the contents from the file "2. AppState snippet.txt"

37. This will need to be injected in to the application in Program.cs add:
builder.Services.AddScoped<AppState>();
above the line that reads:
await builder.Build().RunAsync();

38. In Shared/MainLayout.razor add the following immediately below @inherits LayoutComponentBase
@inject AppState AppState
@implements IDisposable

39. In Shared/MainLayout.razor change the code that reads:
<div class="cat-nav-head">
	<div class="row">
		<div class="col-lg-3">
			<div class="all-category">
to:
<div class="cat-nav-head">
	<div class="row">
		@if (AppState.DisplayCategoryMenuInHeaderNav)
		{
		<div class="col-lg-3">
			<div class="all-category">

40. In Shared/MainLayout.razor change the code that reads:
                    </div>
                </div>
                <div class="col-lg-9 col-12">
                    <div class="menu-area">
to:
                    </div>
                </div>
		}
                <div class="col-lg-9 col-12">
                    <div class="menu-area">

41. At the bottom of Shared/MainLayout.razor add the code from "3. MainLayout.razor StateHasChanged snippet.txt"

42. In Shared/MainLayout.razor change the code that reads:
                    </div>
                </div>
		}
                <div class="col-lg-9 col-12">
                    <div class="menu-area">
to: 
                    </div>
                </div>
                }
                <div class='@GetMenuAreaContainerClass() col-12'>
                    <div class="menu-area">

43. At the top of Pages/Category.razor just under the line that reads: @inherits LayoutComponentBase
add:
@inject AppState AppState

44. At the bottom of Pages/Category.razor in the @code section add the code from "4. Category.razor SetParametersAsync snippet.txt"

45. In all razor files, replace <a href="index1.html"> and <a href="index.html"> with <a href="/">

46. In Shared/MainLayout.razor change the line of code that reads:
<li class="active"><a href="#">Home<i class="ti-angle-down"></i></a>
with:
<li class="active"><a href="/">Home<i class="ti-angle-down"></i></a>

47. Delete from wwwroot/index.html the line that reads:
<script src="js/jquery-migrate-3.0.0.js"></script>
and delete jquery-migrate-3.0.0.js from the wwwroot/js folder

48. In wwwroot/index.html replace all the JavaScript "js" folder references just above the closing body tag with CDN references,
 copy and paste from "5. JavaScript CDN References snippet.txt"

49. Delete the following files from the wwwroot/js folder leaving only active.js:
jquery.min.js
jquery-ui.min.js
popper.min.js
bootstrap.min.js
flex-slider.js
nicesellect.js
waypoints.min.js
slicknav.min.js
easing.js
finalcountdown.js
scrollup.js
owl-carousel.js
magnific-popup.js
onepage-nav.min.js
facnybox.min.js
gmap.min.js
map-script.js
ytplayer.min.js
colors.js

50. At the top of Pages/Index.razor just under the line that reads: @page "/"
add:
@inject AppState AppState

51. At the bottom of Pages/Index.razor add the code from "6. Index.razor SetParametersAsync snippet.txt"

52. In wwwroot/index.html replace all the Stylesheet "css" folder references within the head tag with CDN references,
 copy and paste from "7. StyleSheet CDN References snippet.txt"

53. Delete the following files from the wwwroot/css folder:
color folder
bootstrap.css
magnific-popup.css
magnific-popup.min.css
jquery.ui.css
jquery.fancybox.min.css
nice-select.css
niceselect.css
font-awesome.css
animate.css
flex-slider.min.css
owl-carousel.css
slicknav.min.css

54. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
If you go to the home page the category menu is visible but isn't if you go to /category/test. Notice as you scroll down the page the header
 is no longer fixed at the web page - don't worry this will be fixed later.

55. Create a new file in the Pages folder called Product.razor

56. The category menu shouldn't be displayed on this page, go ahead and copy the code from "8. Initial code for Product.razor snippet.txt"

57. From the shop-single.html page in the template, copy the content between the lines that read:
<!-- Breadcrumbs -->
and:
<!-- End Most Popular Area -->
then paste it after @inject AppState AppState and before the @code section in Pages/Product.razor

58. In Pages/Product.razor replace the lines that read:
<li><a href="index1.html">Home<i class="ti-arrow-right"></i></a></li>
with:
<li><a href="/">Home<i class="ti-arrow-right"></i></a></li>

59. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000/product/test or https://localhost:5001/product/test
to see what this page looks like, you will notice that the image slider isn't working correctly, we'll fix this later

60. Now we will populate these pages dynamically, in the Terminal window go up one level to the BlazorCommerce root folder, then type:
dotnet new classlib -f net5.0 -n BlazorCommerce.Data

61. Now we will populate these pages dynamically, in the Terminal window go up one level to the BlazorCommerce root folder, then type:
dotnet new classlib -f net5.0 -n BlazorCommerce.Shared

62. For now, we will use a SQLite database for rapid prototyping, cd in to the BlazorCommerce.Data folder, then type:
dotnet add package Microsoft.Data.Sqlite
dotnet add package Microsoft.Extensions.Options

63. in the Terminal window go up one level to the Blazor Commerce root folder, then type:
dotnet new console -f net5.0 -n BlazorCommerce.DbSetup

64. in the Terminal window cd in to the BlazorCommerce.DbSetup folder, then type:
dotnet add package Microsoft.Data.Sqlite

65. in the Terminal window go up one level to the Blazor Commerce root folder, then type:
dotnet new webapi -f net5.0 -n BlazorCommerce.Api

66. now we are going to create a solution file, in the Terminal window type:
dotnet new sln --name BlazorCommerce.sln

67. using "9. Solution File Project References snippet.txt" we are going to add project references to the solution file,
 in the Terminal window type:
dotnet sln add ./BlazorCommerce/BlazorCommerce.csproj
dotnet sln add ./BlazorCommerce.Api/BlazorCommerce.Api.csproj
dotnet sln add ./BlazorCommerce.Data/BlazorCommerce.Data.csproj
dotnet sln add ./BlazorCommerce.DbSetup/BlazorCommerce.DbSetup.csproj
dotnet sln add ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj

68. using "10. Inter Project References snippet.txt" we are going to add the inter project references, in the Terminal window type:
dotnet add ./BlazorCommerce/BlazorCommerce.csproj reference ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj
dotnet add ./BlazorCommerce.Data/BlazorCommerce.Data.csproj reference ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj
dotnet add ./BlazorCommerce.Api/BlazorCommerce.Api.csproj reference ./BlazorCommerce.Data/BlazorCommerce.Data.csproj ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj

69. Open the file Program.cs in BlazorCommerce.DbSetup project folder and overwrite the contents with the code from "11. Program.cs snippet.txt"
 This code generates the final version of the database, I did debate whether to build the database up bit-by-bit. It can be run and re-run at any time

70. To create the database, in the Terminal window in to the BlazorCommerce.DbSetup folder, then type:
dotnet run
This will create/overwrite the database in the BlazorCommerce.Data folder
[Take people through how the database is constructed and how it is populated]

71. I decided that the data layer implement the Repository pattern, but in the end it wasn't the right decision mainly because 
 the resulting code ended up failing the "I" of SOLID principals (interface segregation), but time was against me and I didn't want to
 re-write the implementation steps at this stage - for Part 2. Also whilst I was rehearsing it became apparent that I wouldn't have the time
 to go through every step of getting the database and API and SQLite setup whilst the focus should be on Blazor. So for now delete the
 class1.cs files in BlazorCommerce.Shared and BlazorCommerce.Data, delete the WeatherForecast.cs file in BlazorCommerce.Api and
 delete the WeatherForecastController.cs file in BlazorCommerce.Api/Controllers folder

72. From the Code Snippets folder copy the BlazorCommerce.Shared folder and overwrite the BlazorCommerce.Shared folder and its contents

73. From the Code Snippets folder copy the BlazorCommerce.Data folder and overwrite the BlazorCommerce.Data folder and its contents

74. From the Code Snippets folder copy the BlazorCommerce.Api folder and overwrite the BlazorCommerce.Api folder and its contents
[Take folks through the code, point out the CORs settings in Startup.cs]

75. We need to check that the Api runs correctly, can connect to the database and returns results. In the Terminal window go to
 the BlazorCommerce.Api folder and type:
dotnet run
Open a browser and go to https://localhost:5005/category/featuredcategories

75. We are going to make the Hero category on the Home page of the website dynamic. In BlazorCommerce/Program.cs the HttpClient
 registration needs to be altered so that it reads:
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri("https://localhost:5005/")});

76. In BlazorCommerce/Pages/Index.razor, just below the line that reads @inject AppState AppState
add:
@using System.Net.Http
@inject HttpClient Http

77. In the @code section of BlazorCommerce/Pages/Index.razor add a new private member, this will be used to populate the "hero" category:
private BlazorCommerce.Shared.CategoryDto _heroCategory;

78. In the @code section of BlazorCommerce/Pages/Index.razor add a call to the BlazorCommerce API in the OnInitializedAsync method
 to retrieve the categories and then filter to the hero category from "12. Index.razor OnInitializedAsync snippet.txt"

79. Now we will populate the hero category section in the html. In BlazorCommerce/Pages/Index.razor above the line that reads
 <!-- Slider Area --> add:
@if (_heroCategory != null)
{
and after the line that reads <!--/ End Slider Area --> add:
}

80. Add a new method in the @code section of BlazorCommerce/Pages/Index.razor to conduct the string replacements
 __ to <br> _- to <span> and -_ to </span> "13. Index.razor DoPlaceholderReplacements snippet.txt"

81. In BlazorCommerce/Pages/Index.razor change the lines that read:
<h1><span>UP TO 50% OFF </span>Shirts For Men</h1>
<p>Maboriosam in a nesciung eget magnae <br> dapibus disting tloctio in the find it pereri <br> odiy maboriosm.</p>
<div class="button">
	<a href="/category/mens-shirts" class="btn">Shop Now!</a>
</div>
to what is in "14. Index.razor Hero Category snippet.txt"

82. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear and the Hero category should be dynamic and when you click
 it should go to the category page - although that isn't dynamic yet.

83. Now we will populate the small banner category section in the html. In the @code section of BlazorCommerce/Pages/Index.razor add
 a new private member, this will be used to populate the small banner categories:
private IEnumerable<BlazorCommerce.Shared.CategoryDto> _smallBannerCategories;

84. In BlazorCommerce/Pages/Index.razor under the line of code that populates _heroCategory add:
_smallBannerCategories = categories.Where(cat => cat.CategoryTypeId == 2);

85. In BlazorCommerce/Pages/Index.razor under the <!-- Start Small Banner --> replace the first instance of the lines that read:
<div class="row">
	<!-- Single Banner  -->
	<div class="col-lg-4 col-md-6 col-12">
change this with "15. Index.razor Single Banner Category snippet.txt"

86. In BlazorCommerce/Pages/Index.razor replace the first instance of the lines that read:
	</div>
	<!-- /End Single Banner  -->
</div>
change this to read:
			</div>
			<!-- /End Single Banner  -->
		}
	}
</div>

87. Delete the repeated small banner <!-- Single Banner  --> sections in BlazorCommerce/Pages/Index.razor

88. In BlazorCommerce/Pages/Index.razor replace the lines that read:
<img src="https://via.placeholder.com/600x370" alt="#">
<div class="content">
	<p>Men's Collectons</p>
	<h3>Summer travel <br> collection</h3>
	<a href="#">Discover Now</a>
</div>
with "16. Index.razor Single Banner Categories snippet.txt"

89. Now we will populate the midium banner category section in the html. In the @code section of BlazorCommerce/Pages/Index.razor add
 a new private member, this will be used to populate the small banner categories:
private IEnumerable<BlazorCommerce.Shared.CategoryDto> _midiumBannerCategories;

90. In BlazorCommerce/Pages/Index.razor under the line of code that populates _smallBannerCategories add:
_midiumBannerCategories = categories.Where(cat => cat.CategoryType == 3);

91. In BlazorCommerce/Pages/Index.razor under the <!-- Start Midium Banner --> replace the first instance of the lines that read:
<div class="row">
	<!-- Single Banner  -->
	<div class="col-lg-6 col-md-6 col-12">
change this to "17. Index.razor Midium Banner Category snippet.txt"

92. In BlazorCommerce/Pages/Index.razor replace the first instance of the lines that read:
	</div>
	<!-- /End Single Banner  -->
</div>
change this to read:
			</div>
			<!-- /End Single Banner  -->
		}
	}
</div>

93. Delete the repeated midium banner <!-- Single Banner  --> sections in BlazorCommerce/Pages/Index.razor

94. In BlazorCommerce/Pages/Index.razor replace the lines that read:
<img src="https://via.placeholder.com/600x370" alt="#">
<div class="content">
	<p>Men's Watches</p>
	<h3>Watches <br>Up to<span> 50%</span> off</h3>
	<a href="#">Shop Now</a>
</div>
with "18. Index.razor Midium Banner Categories snippet.txt"

95. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear and the various sections that have been made dynamic should
 all appear fine.

96. Now to return specific category information on the category page. In BlazorCommerce/Pages/Category.razor, just below the line that
 reads @inject AppState AppState
add:
@using System.Net.Http
@inject HttpClient Http

97. In the @code section of BlazorCommerce/Pages/Category.razor add a new private member, this will be used to populate the category
 details on the page:
private BlazorCommerce.Shared.CategoryDto _category;

98. In the @code section of BlazorCommerce/Pages/Category.razor add a call to the BlazorCommerce API in the OnParametersSetAsync method
 to retrieve the category "19. Category.razor OnParametersSetAsync snippet.txt"

99. Now that the category information has been retrieved, update the breadcrumb in BlazorCommerce/Pages/Category.razor by replacing
 the following code:
<ul class="bread-list">
	<li><a href="index1.html">Home<i class="ti-arrow-right"></i></a></li>
	<li class="active"><a href="blog-single.html">Shop List</a></li>
</ul>
with "20. Category.razor Breadcrumb snippet.txt"

100. Next to retrieve the sibling categories list with cut down details to populate the categories menu. In the @code section of
 BlazorCommerce/Pages/Category.razor add a new private member, this will be used to populate the category menu:
private IEnumerable<BlazorCommerce.Shared.CategoryMinDto> _minCategories;

101. In the @code section of BlazorCommerce/Pages/Category.razor add a call to the BlazorCommerce API in the OnInitializedAsync method
 to retrieve the _minCategories sibling list "21. Category.razor OnInitializedAsync snippet.txt"

102. Next we will use a new feature introduced in .NET 5 called CSS Isolation, first in BlazorCommerce/Pages/Category.razor replace
 the categories list with built-in Blazor NavLink components:
<!-- Single Widget -->
<div class="single-widget category">
	<h3 class="title">Categories</h3>
	<ul class="categor-list">
		<li><a href="#">T-shirts</a></li>
		<li><a href="#">jacket</a></li>
		<li><a href="#">jeans</a></li>
		<li><a href="#">sweatshirts</a></li>
		<li><a href="#">trousers</a></li>
		<li><a href="#">kitwears</a></li>
		<li><a href="#">accessories</a></li>
	</ul>
</div>
<!--/ End Single Widget -->
with "22. Category.razor Sibling minCategories snippet.txt"

103. Create a css file in the /Pages folder called Category.razor.css The content of this file will be
 "23. Category.razor Category.razor.css snippet.txt"

104. In the /wwwroot/index.html file, just above the closing <head> tag add the following:
<link href="BlazorCommerce.styles.css" rel="stylesheet">

105. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate around the various categories and the mini category
 list on the left hand-side will be highlighted. Inspect the html of the left hand-side category menu, notice the additional seemingly
 random html attributes added to the various html elements - this is for css isolation, inspect the html and you will see the
 currentcategory class being set. Navigate around the various categories and the mini category list on the left hand-side will be highlighted,
 inspect the html and you will see the currentcategory class still being set. The value of "NavLinkMatch.All" on the Match property
 essentially sets the class of the anchor tag to be "active" if the url in the browser matches the value in the href attribute. The "active"
 class name can be overridden by setting the value of the ActiveClass attribute

106. Next to implement the Best Selling section in the Categories menu on the home page, let's start by extracting the template html and
 creating a new razor component. In VSCode add a new file called MainCategoriesMenu.razor to the /Shared folder of the BlazorCommerce project.

107. from Shared/MainLayout.razor cut and paste the html immediately below @if (AppState.DisplayCategoryMenuInHeaderNav) { and above the
 closing curly brace in to Shared/MainCategoriesMenu.razor

108. In MainLayout.razor in place of the html add the following code:
<MainCategoriesMenu />



https://www.freelogodesign.org
https://webassembly.org/
https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-5.0
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly
https://blazor-university.com/components/render-trees/
https://stackoverflow.com/questions/62954461/the-assembly-does-not-contain-a-public-invokable-method-with-jsinvokableattribu
https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-5.0
https://www.syncfusion.com/faq/how-do-you-create-a-cookie-in-the-client-side-of-blazor
https://auth0.com/blog/securing-blazor-webassembly-apps/
https://lisuto.com/4-tips-for-the-winning-ecommerce-site-category-structure/
https://www.c-sharpcorner.com/article/repository-pattern-with-ado-net-in-mvc/
https://zetcode.com/csharp/sqlite/
https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-sln
https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new
https://docs.microsoft.com/en-us/dotnet/standard/data/sqlite/?tabs=netcore-cli
https://stackoverflow.com/questions/15292880/create-sqlite-database-and-table
https://www.c-sharpcorner.com/UploadFile/ranjancse/net-co-introduction-to-microsoft-data-sqlite/
https://www.developersoapbox.com/connecting-to-a-sqlite-database-using-net-core/
https://code-maze.com/blazor-webassembly-httpclient/
