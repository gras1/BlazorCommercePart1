https://github.com/gras1/BlazorCommercePart1
Build simple e-commerce website using Blazor

1. This project will be called Blazor Commerce

2. Created a website logo using https://www.freelogodesign.org and save it to your computer, be sure to name it logo.png

3. Open Visual Studio Code

4. Open a Terminal Window

5. type cd\ to go back to root and then cd in to the projects folder

6. type "md BlazorCommerce" and hit return to create the project folder, then cd in to this folder

7. type "dotnet new blazorwasm -f net5.0 -o BlazorCommerce"

8. We will explore the contents of this by opening the folder in VSCode, say 'yes' if you get a prompt to add missing required assets to build
 and debug in VSCode which will create a .vscode folder

9. We can see what this Blazor template looks like by typing dotnet run in the Terminal Window
[when finished press Ctrl+C to stop the website running]
 , we will be using an e-commerce website template

10. The final version will be based on an e-commerce template which I purchased from wpthemesgrid.com
https://wpthemesgrid.com/downloads/eshop-ecommerce-html5-template/
[demonstrate home, Shop Grid, Shop Single, update shopping cart]

11. Create an images folder under wwwroot and move the Blazor Commerce logo in to it

12. Now we start butchering the website in favour of the template. Start by removing the contents of the wwwroot/css folder and put the
 contents from the template css folder in it

13. Delete the sample-data folder

14. Add a js folder to wwwroot and copy all the template javascript files in to it
[mention that ultimately we will reference CDN versions of the JavaScript files]

15. Replace the <head> section in wwwroot/index.html - with the <head> section from the template/index.html leaving the <div id="app"> ,
 <div id="blazor-error-ui"> and <script src="_framework/blazor.webassembly.js"></script>
[from the DOCTYPE declaration down to and including the <link rel="stylesheet" href="css/responsive.css">]

16. Add a class of "js" to the body tag

17. Be sure to add <base href="/" /> in the <head> section in wwwroot/index.html otherwise site navigation doesn't work
[replace the duplicated meta http-equiv tag]

18. under the <script src="_framework/blazor.webassembly.js"></script> add the javascript references from the template/index.html

19. Replace the Loading... in wwwroot/index.html with the preloader div and its contents from template/index.html

20. Remove the contents of Shared/MainLayout.razor leaving the @inherits and @Body

21. Copy the rest of the content out of template/index.html in to Shared/MainLayout.razor, delete the free-version-banner section
[from <!-- Header --> to <!-- /End Footer Area -->]

22. In the shared folder delete MainLayout.razor.css, NavMenu.razor, NavMenu.razor.css and SurveyPrompt.razor

23. Delete the content of pages/index.razor except for the @page directive

24. In Shared/MainLayout.razor "cut" the content of Slider Area to End Shop Blog and "paste" it into pages/index.razor below the @page directive

25. Move the @body directive in Shared/MainLayout.razor to between the <!--/ End Header --> and <!-- Start Shop Services Area --> html comments

26. In the pages folder delete Counter.razor and FetchData.razor

27. Copy style.css from the root of the template folder to wwwroot/css

28. Update wwwroot/index.html of the line that reads:
<link rel="stylesheet" href="style.css">
to: <link rel="stylesheet" href="css/style.css">

29. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
Structurally the website is coming along and requires a few tweaks to the styling. Namely replacing the orange colour with the purple colour of the logo.

30. We need to replace the dominant orange colour with the purple colour of the logo, in wwwroot/style.css replace all instances of the color: #f7941d and #f6931d with #5C2D91

31. Create a fonts folder in wwwroot and then copy the contents of the template/fonts folder in to it

32. In the Pages folder create a new file called Category.razor

33. At the top of Pages/Category.razor put the code from "1. Category.razor snippet.txt"
[The friendlyCategoryUrl passed in on the url is stored in the parameter. Note that values passed in this way must be set as public Parameters]

34. From the shop-grid.html page in the template copy the content between the lines that read:
<!-- Breadcrumbs -->
and:
<!--/ End Product Style 1  -->
then paste it after the @page directive and before the @code section

35. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
Flick between the index page and the /category/test, the Category drop down menu is obscuring the breadcrumb and the categories menu

36. To manage the different header navigation layouts, after extensive research and lots of trial and error we need to use state by means
 of NotifyStateChanged. In the BlazorCommerce root folder, create a new file called AppState.cs with the contents from the file "2. AppState snippet.txt"

37. This will need to be injected in to the application in Program.cs add:
builder.Services.AddScoped<AppState>();
above the line that reads:
await builder.Build().RunAsync();

38. In Shared/MainLayout.razor add the following immediately below @inherits LayoutComponentBase
@inject AppState AppState
@implements IDisposable

39. In Shared/MainLayout.razor change the code that reads:
<div class="cat-nav-head">
	<div class="row">
		<div class="col-lg-3">
			<div class="all-category">
to:
<div class="cat-nav-head">
	<div class="row">
		@if (AppState.DisplayCategoryMenuInHeaderNav)
		{
		<div class="col-lg-3">
			<div class="all-category">

40. In Shared/MainLayout.razor change the code that reads:
                    </div>
                </div>
                <div class="col-lg-9 col-12">
                    <div class="menu-area">
to:
                    </div>
                </div>
		}
                <div class="col-lg-9 col-12">
                    <div class="menu-area">

41. At the bottom of Shared/MainLayout.razor add the code from "3. MainLayout.razor StateHasChanged snippet.txt"

42. In Shared/MainLayout.razor change the code that reads:
                    </div>
                </div>
		}
                <div class="col-lg-9 col-12">
                    <div class="menu-area">
to: 
                    </div>
                </div>
                }
                <div class='@GetMenuAreaContainerClass() col-12'>
                    <div class="menu-area">

43. At the top of Pages/Category.razor just under the line that reads: @inherits LayoutComponentBase
add:
@inject AppState AppState

44. At the bottom of Pages/Category.razor in the @code section add the code from "4. Category.razor SetParametersAsync snippet.txt"

45. In all razor files, replace <a href="index1.html"> and <a href="index.html"> with <a href="/">

46. In Shared/MainLayout.razor change the line of code that reads:
<li class="active"><a href="#">Home<i class="ti-angle-down"></i></a>
with:
<li class="active"><a href="/">Home<i class="ti-angle-down"></i></a>

47. Delete from wwwroot/index.html the line that reads:
<script src="js/jquery-migrate-3.0.0.js"></script>
and delete jquery-migrate-3.0.0.js from the wwwroot/js folder

48. In wwwroot/index.html replace all the JavaScript "js" folder references just above the closing body tag with CDN references,
 copy and paste from "5. JavaScript CDN References snippet.txt"

49. Delete the following files from the wwwroot/js folder leaving only active.js:
jquery.min.js
jquery-ui.min.js
popper.min.js
bootstrap.min.js
flex-slider.js
nicesellect.js
waypoints.min.js
slicknav.min.js
easing.js
finalcountdown.js
scrollup.js
owl-carousel.js
magnific-popup.js
onepage-nav.min.js
facnybox.min.js
gmap.min.js
map-script.js
ytplayer.min.js
colors.js

50. At the top of Pages/Index.razor just under the line that reads: @page "/"
add:
@inject AppState AppState

51. At the bottom of Pages/Index.razor add the code from "6. Index.razor SetParametersAsync snippet.txt"

52. In wwwroot/index.html replace all the Stylesheet "css" folder references within the head tag with CDN references,
 copy and paste from "7. StyleSheet CDN References snippet.txt"

53. Delete the following files from the wwwroot/css folder:
color folder
bootstrap.css
magnific-popup.css
magnific-popup.min.css
jquery.ui.css
jquery.fancybox.min.css
nice-select.css
niceselect.css
font-awesome.css
animate.css
flex-slider.min.css
owl-carousel.css
slicknav.min.css

54. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
If you go to the home page the category menu is visible but isn't if you go to /category/test. Notice as you scroll down the page the header
 is no longer fixed at the web page - don't worry this will be fixed later.

55. Create a new file in the Pages folder called Product.razor

56. The category menu shouldn't be displayed on this page, go ahead and copy the code from "8. Initial code for Product.razor snippet.txt"

57. From the shop-single.html page in the template, copy the content between the lines that read:
<!-- Breadcrumbs -->
and:
<!-- End Most Popular Area -->
then paste it after @inject AppState AppState and before the @code section in Pages/Product.razor

58. In Pages/Product.razor replace the lines that read:
<li><a href="index1.html">Home<i class="ti-arrow-right"></i></a></li>
with:
<li><a href="/">Home<i class="ti-arrow-right"></i></a></li>

59. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000/product/test or https://localhost:5001/product/test
to see what this page looks like, you will notice that the image slider isn't working correctly, we'll fix this later

60. Now we will populate these pages dynamically, in the Terminal window go up one level to the BlazorCommerce root folder, then type:
dotnet new classlib -f net5.0 -n BlazorCommerce.Data

61. Now we will populate these pages dynamically, in the Terminal window go up one level to the BlazorCommerce root folder, then type:
dotnet new classlib -f net5.0 -n BlazorCommerce.Shared

62. For now, we will use a SQLite database for rapid prototyping, cd in to the BlazorCommerce.Data folder, then type:
dotnet add package Microsoft.Data.Sqlite
dotnet add package Microsoft.Extensions.Options

63. in the Terminal window go up one level to the Blazor Commerce root folder, then type:
dotnet new console -f net5.0 -n BlazorCommerce.DbSetup

64. in the Terminal window cd in to the BlazorCommerce.DbSetup folder, then type:
dotnet add package Microsoft.Data.Sqlite

65. in the Terminal window go up one level to the Blazor Commerce root folder, then type:
dotnet new webapi -f net5.0 -n BlazorCommerce.Api

66. now we are going to create a solution file, in the Terminal window type:
dotnet new sln --name BlazorCommerce.sln

67. using "9. Solution File Project References snippet.txt" we are going to add project references to the solution file,
 in the Terminal window type:
dotnet sln add ./BlazorCommerce/BlazorCommerce.csproj
dotnet sln add ./BlazorCommerce.Api/BlazorCommerce.Api.csproj
dotnet sln add ./BlazorCommerce.Data/BlazorCommerce.Data.csproj
dotnet sln add ./BlazorCommerce.DbSetup/BlazorCommerce.DbSetup.csproj
dotnet sln add ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj

68. using "10. Inter Project References snippet.txt" we are going to add the inter project references, in the Terminal window type:
dotnet add ./BlazorCommerce/BlazorCommerce.csproj reference ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj
dotnet add ./BlazorCommerce.Data/BlazorCommerce.Data.csproj reference ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj
dotnet add ./BlazorCommerce.Api/BlazorCommerce.Api.csproj reference ./BlazorCommerce.Data/BlazorCommerce.Data.csproj ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj

69. Open the file Program.cs in BlazorCommerce.DbSetup project folder and overwrite the contents with the code from "11. Program.cs snippet.txt"
 This code generates the final version of the database, I did debate whether to build the database up bit-by-bit. It can be run and re-run at any time

70. To create the database, in the Terminal window in to the BlazorCommerce.DbSetup folder, then type:
dotnet run
This will create/overwrite the database in the BlazorCommerce.Data folder
[Take people through how the database is constructed and how it is populated]

71. I decided that the data layer implement the Repository pattern, but in the end it wasn't the right decision mainly because 
 the resulting code ended up failing the "I" of SOLID principals (interface segregation), but time was against me and I didn't want to
 re-write the implementation steps at this stage - for Part 2. Also whilst I was rehearsing it became apparent that I wouldn't have the time
 to go through every step of getting the database and API and SQLite setup whilst the focus should be on Blazor. So for now delete the
 class1.cs files in BlazorCommerce.Shared and BlazorCommerce.Data, delete the WeatherForecast.cs file in BlazorCommerce.Api and
 delete the WeatherForecastController.cs file in BlazorCommerce.Api/Controllers folder

72. From the Code Snippets folder copy the BlazorCommerce.Shared folder and overwrite the BlazorCommerce.Shared folder and its contents

73. From the Code Snippets folder copy the BlazorCommerce.Data folder and overwrite the BlazorCommerce.Data folder and its contents

74. From the Code Snippets folder copy the BlazorCommerce.Api folder and overwrite the BlazorCommerce.Api folder and its contents
[Take folks through the code, point out the CORs settings in Startup.cs]

75. We need to check that the Api runs correctly, can connect to the database and returns results. In the Terminal window go to
 the BlazorCommerce.Api folder and type:
dotnet run
Open a browser and go to https://localhost:5005/category/featuredcategories

75. We are going to make the Hero category on the Home page of the website dynamic. In BlazorCommerce/Program.cs the HttpClient
 registration needs to be altered so that it reads:
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri("https://localhost:5005/")});

76. In BlazorCommerce/Pages/Index.razor, just below the line that reads @inject AppState AppState
add:
@using System.Net.Http
@inject HttpClient Http

77. In the @code section of BlazorCommerce/Pages/Index.razor add a new private member, this will be used to populate the "hero" category:
private BlazorCommerce.Shared.CategoryDto _heroCategory;

78. In the @code section of BlazorCommerce/Pages/Index.razor add a call to the BlazorCommerce API in the OnInitializedAsync method
 to retrieve the categories and then filter to the hero category from "12. Index.razor OnInitializedAsync snippet.txt"

79. Now we will populate the hero category section in the html. In BlazorCommerce/Pages/Index.razor above the line that reads
 <!-- Slider Area --> add:
@if (_heroCategory != null)
{
and after the line that reads <!--/ End Slider Area --> add:
}

80. Add a new method in the @code section of BlazorCommerce/Pages/Index.razor to conduct the string replacements
 __ to <br> _- to <span> and -_ to </span> "13. Index.razor DoPlaceholderReplacements snippet.txt"

81. In BlazorCommerce/Pages/Index.razor change the lines that read:
<h1><span>UP TO 50% OFF </span>Shirts For Men</h1>
<p>Maboriosam in a nesciung eget magnae <br> dapibus disting tloctio in the find it pereri <br> odiy maboriosm.</p>
<div class="button">
	<a href="/category/mens-shirts" class="btn">Shop Now!</a>
</div>
to what is in "14. Index.razor Hero Category snippet.txt"

82. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear and the Hero category should be dynamic and when you click
 it should go to the category page - although that isn't dynamic yet.

83. Now we will populate the small banner category section in the html. In the @code section of BlazorCommerce/Pages/Index.razor add
 a new private member, this will be used to populate the small banner categories:
private IEnumerable<BlazorCommerce.Shared.CategoryDto> _smallBannerCategories;

84. In BlazorCommerce/Pages/Index.razor under the line of code that populates _heroCategory add:
_smallBannerCategories = categories.Where(cat => cat.CategoryTypeId == 2);

85. In BlazorCommerce/Pages/Index.razor under the <!-- Start Small Banner --> replace the first instance of the lines that read:
<div class="row">
	<!-- Single Banner  -->
	<div class="col-lg-4 col-md-6 col-12">
change this with "15. Index.razor Single Banner Category snippet.txt"

86. In BlazorCommerce/Pages/Index.razor replace the first instance of the lines that read:
	</div>
	<!-- /End Single Banner  -->
</div>
change this to read:
			</div>
			<!-- /End Single Banner  -->
		}
	}
</div>

87. Delete the repeated small banner <!-- Single Banner  --> sections in BlazorCommerce/Pages/Index.razor

88. In BlazorCommerce/Pages/Index.razor replace the lines that read:
<img src="https://via.placeholder.com/600x370" alt="#">
<div class="content">
	<p>Men's Collectons</p>
	<h3>Summer travel <br> collection</h3>
	<a href="#">Discover Now</a>
</div>
with "16. Index.razor Single Banner Categories snippet.txt"

89. Now we will populate the midium banner category section in the html. In the @code section of BlazorCommerce/Pages/Index.razor add
 a new private member, this will be used to populate the small banner categories:
private IEnumerable<BlazorCommerce.Shared.CategoryDto> _midiumBannerCategories;

90. In BlazorCommerce/Pages/Index.razor under the line of code that populates _smallBannerCategories add:
_midiumBannerCategories = categories.Where(cat => cat.CategoryType == 3);

91. In BlazorCommerce/Pages/Index.razor under the <!-- Start Midium Banner --> replace the first instance of the lines that read:
<div class="row">
	<!-- Single Banner  -->
	<div class="col-lg-6 col-md-6 col-12">
change this to "17. Index.razor Midium Banner Category snippet.txt"

92. In BlazorCommerce/Pages/Index.razor replace the first instance of the lines that read:
	</div>
	<!-- /End Single Banner  -->
</div>
change this to read:
			</div>
			<!-- /End Single Banner  -->
		}
	}
</div>

93. Delete the repeated midium banner <!-- Single Banner  --> sections in BlazorCommerce/Pages/Index.razor

94. In BlazorCommerce/Pages/Index.razor replace the lines that read:
<img src="https://via.placeholder.com/600x370" alt="#">
<div class="content">
	<p>Men's Watches</p>
	<h3>Watches <br>Up to<span> 50%</span> off</h3>
	<a href="#">Shop Now</a>
</div>
with "18. Index.razor Midium Banner Categories snippet.txt"

95. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear and the various sections that have been made dynamic should
 all appear fine.

96. Now to return specific category information on the category page. In BlazorCommerce/Pages/Category.razor, just below the line that
 reads @inject AppState AppState
add:
@using System.Net.Http
@inject HttpClient Http

97. In the @code section of BlazorCommerce/Pages/Category.razor add a new private member, this will be used to populate the category
 details on the page:
private BlazorCommerce.Shared.CategoryDto _category;

98. In the @code section of BlazorCommerce/Pages/Category.razor add a call to the BlazorCommerce API in the OnParametersSetAsync method
 to retrieve the category "19. Category.razor OnParametersSetAsync snippet.txt"

99. Now that the category information has been retrieved, update the breadcrumb in BlazorCommerce/Pages/Category.razor by replacing
 the following code:
<ul class="bread-list">
	<li><a href="index1.html">Home<i class="ti-arrow-right"></i></a></li>
	<li class="active"><a href="blog-single.html">Shop List</a></li>
</ul>
with "20. Category.razor Breadcrumb snippet.txt"

100. Next to retrieve the sibling categories list with cut down details to populate the categories menu. In the @code section of
 BlazorCommerce/Pages/Category.razor add a new private member, this will be used to populate the category menu:
private IEnumerable<BlazorCommerce.Shared.CategoryMinDto> _minCategories;

101. In the @code section of BlazorCommerce/Pages/Category.razor add a call to the BlazorCommerce API in the OnInitializedAsync method
 to retrieve the _minCategories sibling list "21. Category.razor OnInitializedAsync snippet.txt"

102. In BlazorCommerce/Pages/Category.razor replace the categories list:
<!-- Single Widget -->
<div class="single-widget category">
	<h3 class="title">Categories</h3>
	<ul class="categor-list">
		<li><a href="#">T-shirts</a></li>
		<li><a href="#">jacket</a></li>
		<li><a href="#">jeans</a></li>
		<li><a href="#">sweatshirts</a></li>
		<li><a href="#">trousers</a></li>
		<li><a href="#">kitwears</a></li>
		<li><a href="#">accessories</a></li>
	</ul>
</div>
<!--/ End Single Widget -->
with "22. Category.razor Sibling minCategories snippet.txt"




165. Next the current category needs to be highlighted in the categories filter on the left side of the page, change the line of code that has just been added from:
<li><a href="category/@minCategory.FriendlyUrl">@minCategory.Name</a></li>
to:
if (_category.Name == minCategory.Name)
{
    <li><a class="currentcategory" href="category/@minCategory.FriendlyUrl">@minCategory.Name</a></li>
}
else
{
    <li><a href="category/@minCategory.FriendlyUrl">@minCategory.Name</a></li>
}
166. Next we are going to use a new feature of Blazor in .NET 5 - CSS isolation. Create a css file in the /Pages folder called Category.razor.css The content of this file will be:
::deep .shop-sidebar .single-widget.category .categor-list a.currentcategory::before {
    content: "\e661";
    font-family: 'themify';
    color: #5C2D91;
    font-weight: bold;
    float: left;
    margin-left: -17px;
}

::deep .shop-sidebar .single-widget.category .categor-list a.currentcategory {
    color: #5C2D91;
}
167. In the /wwwroot/index.html file, just above the closing <head> tag add the following:
<link href="BlazorCommerce.styles.css" rel="stylesheet">

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate around the various categories and the mini category list on the left hand-side will be highlighted
Inspect the html of the left hand-side category menu, notice the additional seemingly random html attributes added to the various html elements - this is for css isolation, inspect the html and you will see the currentcategory class being set

168. The catetgory anchor tags in the product-area section shop-sidebar div can be converted to NavLink ASP.NET routing components and make use of the ActiveClass and Match properties. Change the code that reads:
if (_category.Name == minCategory.Name)
{
    <li><a class="currentcategory" href="category/@minCategory.FriendlyUrl">@minCategory.Name</a></li>
}
else
{
    <li><a href="category/@minCategory.FriendlyUrl">@minCategory.Name</a></li>
}
to:
<li><NavLink href=@("category/" + minCategory.FriendlyUrl + "") Match="NavLinkMatch.All" ActiveClass="currentcategory">@minCategory.Name</NavLink></li>

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate around the various categories and the mini category list on the left hand-side will be highlighted, inspect the html and you will see the currentcategory class still being set. The value of "NavLinkMatch.All" on the Match property essentially sets the class of the anchor tag to be "active" if the url in the browser matches the value in the href attribute. The "active" class name can be overridden by setting the value of the ActiveClass attribute

169. Decided it was time to decide on how categories would work, used guidance from https://lisuto.com/4-tips-for-the-winning-ecommerce-site-category-structure/ on how to structure e-commerce website categories. The recommended structure is to use meta category → branch category → leaf category, which allows for leaf categories to be listed in one other branch category. Using Boohoo & Amazon as examples, I decided upon three meta categories: Womens, Mens, Children & Baby. I have listed the branch category and leaf categories below (an x denotes a leaf category is listed in another branch category)

Womens
	Clothing
		Coats & Jackets
		Jumpers & Cardigans x
		Jeans
		Skirts
		Beachwear x
		Shorts x
		Hoodies & Sweatshirts x
		Joggers & Tracksuits
		Suits
		Blouses & Shirts x
		Lingerie
		Nightwear
		Trousers
		Leggings
	Tops
		T-Shirts
		Summer Tops
		Day Tops
		Blouses & Shirts x
		Bodysuits
		Crop Tops x
		Halter Neck Tops
		Hoodies & Sweatshirts x
		Vest Tops
		Jumpers & Cardigans x
		Off The Shoulder Tops
		Smock Tops
		Wrap Tops
		Plus Size Tops
		Maternity Tops
		Going Out Tops
	Dresses
		Summer Dresses x
		Midi Dresses
		Maxi Dresses x
		Mini Dresses
		Smock Dresses x
		Shirt Dresses
		Long Sleeve Dresses
		T-Shirt Dresses x
		Bodycon Dresses
		Skater Dresses
		Wrap Dresses
		Sweatshirt Dresses
		Black Dresses
		Blazer Dresses
		Pinafore Dresses
		Jumper Dresses
	Summer
		Summer Dresses x
		Maxi Dresses x
		Smock Dresses x
		T-Shirt Dresses x
		Summer Tops
		Crop Tops x
		Kimonos
		Shorts x
		Playsuits
		Jumpsuits
		Swimwear x
		Plus Size Swimwear
		Maternity Swimwear
		Swimsuits
		Bikinis
		Beachwear x
	Shoes & Accessories
		Boots
		Sandals
		Trainers
		Flats
		Slippers
		High Heels
		Wide Fit Shoes
		Sunglasses
		Bags
		Jewellery
		Necklaces
		Belts
		Hair Accessories
		Tights & Socks
		Scarves, Hats & Gloves
		Watches
Mens
	Clothing
		T-Shirts & Vests
		Tracksuits
		Hoodies & Sweatshirts
		Joggers x
		Jeans
		Coats & Jackets
		Shorts
		Shirts x
		Jumpers & Cardigans x
		Trousers
		Denim Shop
		Underwear & Socks
		Suits
		Swimwear
		Onesies & Loungewear
		Nightwear
	Tops
		T-Shirts
		Hoodies
		Sweatshirts
		Jumpers & Cardigans x
		Shirts x
		Polo Shirts
		Long Sleeve Shirts
		Short Sleeve Shirts
		Checked Shirts
		Printed Shirts
		Long Sleeve T-Shirts
		Striped T-Shirts
		Printed T-Shirts
		Tank Tops
	Sports
		Tops
		Tracksuits
		T-Shirts
		Shorts
		Joggers x
	Shoes & Accessories
		Trainers & Hi-Tops
		Sandals & Sliders
		Shoes & Loafers
		Boots
		Slippers
		Sunglasses
		Hats & Caps
		Jewellery & Watches
		Bags & Wallets
		Belts
Children & Baby
	Toys & Games
		Arts & Crafts
		Baby & Toddler Toys
		Building & Construction Toys
		Cosmetics & Jewellery
		Dolls & Accessories
		Electronic Toys
		Fancy Dress & Accessories
		Jigsaws & Puzzles
		Kids' Furniture, Décor & Storage
		Learning & Education
		Musical Toy Instruments
		Play Figures & Vehicles
		Puppets & Puppet Theatres
		Soft Toys
	Girls' Clothing
		Underwear & Socks
		T-Shirt
		School Uniform
		Trousers
		Blouses & Shirts
		Dresses
		Skirts
		Coats & Jackets
		Jumpers & Cardigans
		Jeans
		Swimwear
		Shorts
		Hoodies & Sweatshirts
		Joggers & Tracksuits
		Nightwear
		Leggings
	Boys' Clothing
		Underwear & Socks
		T-Shirt
		School Uniform
		Trousers
		Shirts
		Shorts
		T-Shirts & Vests
		Tracksuits
		Hoodies & Sweatshirts
		Jeans
		Coats & Jackets
		Jumpers & Cardigans
		Suits
		Swimwear
		Onesies
		Nightwear
	Baby Girls' Clothing
		Swaddle
		Babygrow & Onesies
		Jumpers & Cardigans
		Leggings
		T-Shirt & Vests
		Coats & Jackets
		Swimwear
		Nightwear
		Socks
		Shorts
		Trousers
	Baby Boys' Clothing
		Swaddle
		Babygrow & Onesies
		Jumpers & Cardigans
		T-Shirt & Vests
		Coats & Jackets
		Swimwear
		Nightwear
		Socks
		Shorts
		Trousers
	Shoes & Accessories
		Girls Boots
		Girls Sandals
		Girls Trainers
		Girls Slippers
		Girls Flat Shoes
		Girls Bags & Backpacks
		Girls Sunglasses
		Girls Hats & Caps
		Girls Belts
		Boys Boots
		Boys Sandals
		Boys Trainers
		Boys Slippers
		Boys Shoes & Loafers
		Boys Bags & Backpacks
		Boys Sunglasses
		Boys Hats & Caps
		Boys Belts

170. Analysing the existing pages the following Index and Category pages have the following categories in the following sections:

Index page

Main categories drop down:
New Arrivals >> Accessories, Sunglasses, Watches, Mens, Ladies
Best Selling >> Kids > Toys, Games, Back to School, Arts and crafts
                Mens > Watches, T-Shirts, Hoodies, Trousers
                Womens > Blouses, Dresses, Sunglasses, Watches
Accessories
Women's clothes
Sunglasses
Watches
Men's Clothes
Kid's Clothes
Seasonal
Shoes

Hero category:
mens-shirts

Single banner:
men's summer travel
bags
flash-sale

Trending Item:
Man
Woman
Kids
Accessories
Essential
Prices

Midium banner:
men's watches
women's shoes


Category page

Categories menu:
All categories in database

171. Changes to the Index page:
- Change "New Arrivals" from a pop-out list of categories to a link to a special page (that is similar to the Category page) that lists all the new products added to the database in the last 4 weeks
- Change the Best Selling pop-out to the three meta categories, and then the 4 leaf categories within those meta categories of top selling products
- Change the remaining 8 categories to be leaf categories that have the "Index Categories Menu" property set to true
- Change the Hero category to be 1 leaf category that has the "Hero" property set to true (NB: there can only ever be one Hero leaf category)
- Change the Single banner to be 3 leaf categories that have the "Single Banner" property set to true (NB: there can only ever be three Single banner leaf categories)
- Change the 6 Trending Item categories and 8 products to be the three meta categories and the top 4 products in each meta category that have been viewed recently
- Change the Midium banner to be 2 leaf categories that have the "Midium Banner" property set to true (NB: there can only ever be two Midium banner leaf categories)

172. Changes to the Category page:
- Change all categories listed in the Categories section to be sibling leaf categories

173. Now an analysis of the product data, take a look at https://wpthemesgrid.com/themes/eshop/shop-single.html :
	Product title
	Average product review rating, total number of reviews
	The price (including sales tax)
	a brief description
	Main product image 555 pixels wide x 510 pixels tall, up to 4 other product images of the same dimension and thumbnails (104 pixels wide x 95 pixels tall)
	Available options (colur and size and possibly others)
	Restating the main Category
	Availability (number in stock)
	Full description
	List of product features
	Reviews (score, name, short review)
Page features
	The breadcrumb has the category the product is in
	Alter quantity to add to basket
	Add to favourites
	Add a review (rating, name, email address, review)
	Related Products (popular sibling products - with product image 255 pixels wide, 348 pixels tall, product name, product price including sales tax)
174. The following are a list of tables to support the product page, shopping basket and orders
	ProductOptionsTypes table: Id, Name
	ProductOptions table: Id, Option, ProductOptionType Id
	SupplierManufacturers table: Id, Name
	Products table: Id, Title, FriendlyUrl, SKU, SupplierManufacturer Id, Main image url, Main image thumbnail url, 2nd image url, 2nd image thumbnail url, 3rd image url, 3rd image thumbnail url, 4th image url, 4th image thumbnail url, 5th image url, 5th image thumbnail url, Related Image url, brief description, full description, LeafCategory Id, number of times viewed
	ProductOptionsProducts table: Id, ProductOption Id, Product Id, Stock
	ProductOptionsProductInstances table: Id, ProductOptionProduct Id, Price, SalesTax Id, EffectiveDateFrom, EffectiveDateTo
	Customers table: Id, EmailAddress, FirstName, Surname, Password, CreatedDateTime, LastAccessedDateTime
	Addresses table: Id, Customer Id, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, Delivery Contact, Delivery Instructions
	SalesTaxTypes table: Id, Name
	SalesTaxes table: Id, SalesTaxType Id, Amount, EffectiveDateFrom, EffectiveDateTo
	Orders table: Id, Customer Id, Billing Address Id, Delivery Address Id, Product Total, Sales Tax Total, Delivery Charge, Total, Payment Status, CreatedDateTime
	OrderDetails table: Id, Order Id, ProductOptionProductInstance Id, Quantity, Product Total, Sales Tax Total

175. Let's start by updating the database for the new category structure and populating the new tables. Open the file Program.cs in BlazorCommerce.DbSetup project folder and change the entire contents of the file to be:
using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace BlazorCommerce.DbSetup
{
    class Program
    {
        static void Main(string[] args)
        {
            var connectionStringBuilder = new SqliteConnectionStringBuilder();
            //If DB does not exist, create it
            connectionStringBuilder.DataSource = "../BlazorCommerce.Data/BlazorCommerce.db";

            DropTables(connectionStringBuilder.ConnectionString);

            CreateMetaCategoriesTable(connectionStringBuilder.ConnectionString);
            PopulateMetaCategoriesTable(connectionStringBuilder.ConnectionString);

            CreateBranchCategoriesTable(connectionStringBuilder.ConnectionString);
            PopulateBranchCategoriesTable(connectionStringBuilder.ConnectionString);

            CreateLeafCategoriesTable(connectionStringBuilder.ConnectionString);
            PopulateLeafCategoriesTable(connectionStringBuilder.ConnectionString);

            CreateCustomersTable(connectionStringBuilder.ConnectionString);
            PopulateCustomersTable(connectionStringBuilder.ConnectionString);

            CreateAddressesTable(connectionStringBuilder.ConnectionString);
            PopulateAddressesTable(connectionStringBuilder.ConnectionString);

            CreateProductOptionTypesTable(connectionStringBuilder.ConnectionString);
            PopulateProductOptionTypesTable(connectionStringBuilder.ConnectionString);

            CreateSupplierManufacturersTable(connectionStringBuilder.ConnectionString);
            PopulateSupplierManufacturersTable(connectionStringBuilder.ConnectionString);

            CreateSalesTaxTypesTable(connectionStringBuilder.ConnectionString);
            PopulateSalesTaxTypesTable(connectionStringBuilder.ConnectionString);

            CreateSalesTaxesTable(connectionStringBuilder.ConnectionString);
            PopulateSalesTaxesTable(connectionStringBuilder.ConnectionString);

            CreateProductsTable(connectionStringBuilder.ConnectionString);
            PopulateProductsTable(connectionStringBuilder.ConnectionString);

            CreateProductFeaturesTable(connectionStringBuilder.ConnectionString);
            PopulateProductFeaturesTable(connectionStringBuilder.ConnectionString);

            CreateProductOptionsTable(connectionStringBuilder.ConnectionString);
            PopulateProductOptionsTable(connectionStringBuilder.ConnectionString);

            CreateProductOptionProductsTable(connectionStringBuilder.ConnectionString);
            PopulateProductOptionProductsTable(connectionStringBuilder.ConnectionString);

            CreateProductOptionProductInstancesTable(connectionStringBuilder.ConnectionString);
            PopulateProductOptionProductInstancesTable(connectionStringBuilder.ConnectionString);

            CreateOrdersTable(connectionStringBuilder.ConnectionString);

            CreateOrderDetailsTable(connectionStringBuilder.ConnectionString);
            
            PopulateOrdersAndOrderDetailsTable(connectionStringBuilder.ConnectionString);
            
            CreateCartsTable(connectionStringBuilder.ConnectionString);

            CreateCartItemsTable(connectionStringBuilder.ConnectionString);
        }

        private static void DropTables(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var delTableCmd = connection.CreateCommand();
                
                delTableCmd.CommandText = "DROP TABLE IF EXISTS Categories";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS CategoryTypes";
                delTableCmd.ExecuteNonQuery();

                delTableCmd.CommandText = "DROP TABLE IF EXISTS CartItems";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS Carts";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS OrderDetails";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS Orders";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS ProductOptionProductInstances";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS ProductOptionProducts";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS ProductOptions";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS SalesTaxes";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS SalesTaxTypes";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS ProductFeatures";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS Products";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS LeafCategories";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS BranchCategories";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS MetaCategories";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS SupplierManufacturers";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS ProductOptionTypes";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS Addresses";
                delTableCmd.ExecuteNonQuery();
                delTableCmd.CommandText = "DROP TABLE IF EXISTS Customers";
                delTableCmd.ExecuteNonQuery();
            }
        }

        private static void CreateMetaCategoriesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE MetaCategories(Id INTEGER PRIMARY KEY ASC, Name VARCHAR(20) NOT NULL, FriendlyName VARCHAR(20) NOT NULL, ImageUrl VARCHAR(100))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateMetaCategoriesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO MetaCategories VALUES(1, 'Women''s', 'womens', 'https://via.placeholder.com/225x155')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO MetaCategories VALUES(2, 'Men''s', 'mens', 'https://via.placeholder.com/225x155')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO MetaCategories VALUES(3, 'Children & Babies', 'children-babies', 'https://via.placeholder.com/225x155')";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateBranchCategoriesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE BranchCategories(Id INTEGER PRIMARY KEY ASC, Name VARCHAR(20) NOT NULL, MetaCategoryId INTEGER NOT NULL, FOREIGN KEY(MetaCategoryId) REFERENCES MetaCategories(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateBranchCategoriesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(1, 'Clothing', 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(2, 'Tops', 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(3, 'Dresses', 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(4, 'Summer', 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(5, 'Shoes & Accessories', 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(6, 'Clothing', 2)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(7, 'Tops', 2)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(8, 'Sports', 2)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(9, 'Shoes & Accessories', 2)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(10, 'Toys & Games', 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(11, 'Girls'' Clothing', 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(12, 'Boys'' Clothing', 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(13, 'Baby Girls'' Clothing', 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(14, 'Baby Boys'' Clothing', 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO BranchCategories VALUES(15, 'Shoes & Accessories', 3)";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateLeafCategoriesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE LeafCategories(Id INTEGER PRIMARY KEY ASC, Name VARCHAR(50) NOT NULL, LongName VARCHAR(100) NOT NULL, FriendlyUrl VARCHAR(100) NOT NULL, ImageUrl VARCHAR(100), OfferText VARCHAR(100), MarketingText VARCHAR(250), ActionButtonText VARCHAR(20), MenuCategory BOOLEAN NOT NULL, Hero BOOLEAN NOT NULL, SingleBanner BOOLEAN NOT NULL, MidiumBanner BOOLEAN NOT NULL, PrimaryBranchCategoryId INTEGER NOT NULL, SecondaryBranchCategoryId INTEGER, FOREIGN KEY(PrimaryBranchCategoryId) REFERENCES BranchCategories(Id), FOREIGN KEY(SecondaryBranchCategoryId) REFERENCES BranchCategories(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateLeafCategoriesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(1, 'Coats & Jackets', 'Women''s Coats & Jackets', 'womens-clothing-coats-and-jackets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(2, 'Jumpers & Cardigans', 'Women''s Jumpers & Cardigans', 'womens-clothing-jumpers-and-cardigans', 'https://via.placeholder.com/600x370', NULL, 'Lorem ipsum __ dolor', 'Discover Now', 0, 0, 1, 0, 1, 2)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(3, 'Jeans', 'Women''s Jeans', 'womens-clothing-jeans', 'https://via.placeholder.com/600x370', NULL, 'Lorem ipsum __ dolor', 'Shop Now', 0, 0, 1, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(4, 'Skirts', 'Women''s Skirts', 'womens-clothing-skirts', 'https://via.placeholder.com/600x370', NULL, 'Lorem ipsum __ Up to _-40%-_ Off', 'Discover Now', 0, 0, 1, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(5, 'Beachwear', 'Women''s Beachwear', 'womens-summer-beachwear', 'https://via.placeholder.com/600x370', NULL, 'Lorem ipsum __Up to_- 50%-_ off', 'Shop Now', 0, 0, 0, 1, 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(6, 'Shorts', 'Women''s Shorts', 'womens-clothing-shorts', 'https://via.placeholder.com/600x370', NULL, 'Lorem ipsum __ up to _-70%-_ off', 'Shop Now', 0, 0, 0, 1, 1, 4)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(7, 'Hoodies & Sweatshirts', 'Women''s Hoodies & Sweatshirts', 'womens-clothing-hoodies-and-sweatshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, 2)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(8, 'Joggers & Tracksuits', 'Women''s Joggers & Tracksuits', 'womens-clothing-joggers-and-tracksuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(9, 'Suits', 'Women''s Suits', 'womens-clothing-suits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(10, 'Lingerie', 'Women''s Lingerie', 'womens-clothing-lingerie', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(11, 'Nightwear', 'Women''s Nightwear', 'womens-clothing-nightwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(12, 'Trousers', 'Women''s Trousers', 'womens-clothing-trousers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(13, 'Leggings', 'Women''s Leggings', 'womens-clothing-leggings', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(14, 'T-Shirts', 'Women''s T-Shirts', 'womens-tops-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(15, 'Summer Tops', 'Women''s Summer Tops', 'womens-tops-summer-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(16, 'Day Tops', 'Women''s Day Tops', 'womens-tops-day-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(17, 'Blouses & Shirts', 'Women''s Blouses & Shirts', 'womens-tops-blouses-and-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(18, 'Bodysuits', 'Women''s Bodysuits', 'womens-tops-bodysuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(19, 'Crop Tops', 'Women''s Crop Tops', 'womens-tops-crop-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, 4)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(20, 'Halter Neck Tops', 'Women''s Halter Neck Tops', 'womens-tops-halter-neck-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(21, 'Vest Tops', 'Women''s Vest Tops', 'womens-tops-vest-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(22, 'Off The Shoulder Tops', 'Women''s Off The Shoulder Tops', 'womens-tops-off-the-shoulder-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(23, 'Smock Tops', 'Women''s Smock Tops', 'womens-tops-smock-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(24, 'Wrap Tops', 'Women''s Wrap Tops', 'womens-tops-wrap-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(25, 'Plus Size Tops', 'Women''s Plus Size Tops', 'womens-tops-plus-size-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(26, 'Maternity Tops', 'Women''s Maternity Tops', 'womens-tops-maternity-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(27, 'Going Out Tops', 'Women''s Going Out Tops', 'womens-tops-going-out-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 2, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(28, 'Midi Dresses', 'Women''s Midi Dresses', 'womens-dresses-midi-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(29, 'Maxi Dresses', 'Women''s Maxi Dresses', 'womens-dresses-maxi-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, 4)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(30, 'Mini Dresses', 'Women''s Mini Dresses', 'womens-dresses-mini-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(31, 'Smock Dresses', 'Women''s Smock Dresses', 'womens-dresses-smock-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, 4)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(32, 'Shirt Dresses', 'Women''s Shirt Dresses', 'womens-dresses-shirt-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(33, 'Long Sleeve Dresses', 'Women''s Long Sleeve Dresses', 'womens-dresses-long-sleeve-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(34, 'Bodycon Dresses', 'Women''s Bodycon Dresses', 'womens-dresses-bodycon-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(35, 'Skater Dresses', 'Women''s Skater Dresses', 'womens-dresses-skater-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(36, 'Wrap Dresses', 'Women''s Wrap Dresses', 'womens-dresses-wrap-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(37, 'Sweatshirt Dresses', 'Women''s Sweatshirt Dresses', 'womens-dresses-sweatshirt-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(38, 'Black Dresses', 'Women''s Black Dresses', 'womens-dresses-black-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(39, 'Blazer Dresses', 'Women''s Blazer Dresses', 'womens-dresses-blazer-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(40, 'Pinafore Dresses', 'Women''s Pinafore Dresses', 'womens-dresses-pinafore-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(41, 'Jumper Dresses', 'Women''s Jumper Dresses', 'womens-dresses-jumper-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 3, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(42, 'Summer Dresses', 'Women''s Summer Dresses', 'womens-summer-summer-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 4, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(43, 'T-Shirt Dresses', 'Women''s T-Shirt Dresses', 'womens-summer-tshirt-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(44, 'Summer Tops', 'Women''s Summer Tops', 'womens-summer-summer-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(45, 'Kimonos', 'Women''s Kimonos', 'womens-summer-kimonos', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(46, 'Jumpsuits & Playsuits', 'Women''s Jumpsuits & Playsuits', 'womens-summer-jumpsuits-and-playsuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(47, 'Swimwear', 'Women''s Swimwear', 'womens-summer-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(48, 'Plus Size Swimwear', 'Women''s Plus Size Swimwear', 'womens-summer-plus-size-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(49, 'Maternity Swimwear', 'Women''s Maternity Swimwear', 'womens-summer-maternity-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(50, 'Swimsuits', 'Women''s Swimsuits', 'womens-summer-swimsuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(51, 'Bikinis', 'Women''s Bikinis', 'womens-summer-bikinis', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 4, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(52, 'Boots', 'Women''s Boots', 'womens-shoes-and-accessories-boots', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(53, 'Sandals', 'Women''s Sandals', 'womens-shoes-and-accessories-sandals', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(54, 'Trainers', 'Women''s Trainers', 'womens-shoes-and-accessories-trainers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(55, 'Flats', 'Women''s Flats', 'womens-shoes-and-accessories-flats', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(56, 'Slippers', 'Women''s Slippers', 'womens-shoes-and-accessories-slippers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(57, 'High Heels', 'Women''s High Heels', 'womens-shoes-and-accessories-high-heels', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(58, 'Wide Fit Shoes', 'Women''s Wide Fit Shoes', 'womens-shoes-and-accessories-wide-fit-shoes', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(59, 'Sunglasses', 'Women''s Sunglasses', 'womens-shoes-and-accessories-sunglasses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(60, 'Bags', 'Women''s Bags', 'womens-shoes-and-accessories-bags', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(61, 'Jewellery', 'Women''s Jewellery', 'womens-shoes-and-accessories-jewellery', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(62, 'Necklaces', 'Women''s Necklaces', 'womens-shoes-and-accessories-necklaces', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(63, 'Belts', 'Women''s Belts', 'womens-shoes-and-accessories-belts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(64, 'Hair Accessories', 'Women''s Hair Accessories', 'womens-shoes-and-accessories-hair-accessories', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(65, 'Tights & Socks', 'Women''s Tights & Socks', 'womens-clothes-tights-and-socks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 1, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(66, 'Scarves, Hats & Gloves', 'Women''s Scarves, Hats & Gloves', 'womens-shoes-and-accessories-scarves-hats-and-gloves', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(67, 'Watches', 'Women''s Watches', 'womens-shoes-and-accessories-watches', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 5, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(68, 'T-Shirts & Vests', 'Men''s T-Shirts & Vests', 'mens-clothing-tshirts-and-vests', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(69, 'Tracksuits', 'Men''s Tracksuits', 'mens-sports-tracksuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 8, 6)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(70, 'Hoodies & Sweatshirts', 'Men''s Hoodies & Sweatshirts', 'mens-clothing-hoodies-and-sweatshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(71, 'Joggers', 'Men''s Joggers', 'mens-sports-joggers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 8, 6)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(72, 'Jeans', 'Men''s Jeans', 'mens-clothing-jeans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(73, 'Coats & Jackets', 'Men''s Coats & Jackets', 'mens-clothing-coats-and-jackets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(74, 'Shorts', 'Men''s Shorts', 'mens-clothing-shorts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, 8)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(75, 'Shirts', 'Men''s Shirts', 'mens-tops-shirts', 'https://via.placeholder.com/600x370', '_-UP TO 50% OFF -_Mens Shirts', 'Lorem ipsum dolor sit amet __ consectetur adipiscing elit, sed do eiusmod __ tempor incididunt.', 'Shop Now!', 0, 1, 0, 0, 7, 6)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(76, 'Jumpers & Cardigans', 'Men''s Jumpers & Cardigans', 'mens-clothing-jumpers-and-cardigans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 6, 7)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(77, 'Trousers', 'Men''s Trousers', 'mens-clothing-trousers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(78, 'Denim', 'Men''s Denim', 'mens-clothing-denim', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(79, 'Underwear & Socks', 'Men''s Underwear & Socks', 'mens-clothing-underwear-and-socks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(80, 'Suits', 'Men''s Suits', 'mens-clothing-suits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(81, 'Swimwear', 'Men''s Swimwear', 'mens-sports-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 8, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(82, 'Onesies & Loungewear', 'Men''s Onesies & Loungewear', 'mens-clothing-onesies-and-loungewear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(83, 'Nightwear', 'Men''s Nightwear', 'mens-clothing-nightwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 6, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(84, 'T-Shirts', 'Men''s T-Shirts', 'mens-tops-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, 8)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(85, 'Hoodies', 'Men''s Hoodies', 'mens-tops-hoodies', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(86, 'Sweatshirts', 'Men''s Sweatshirts', 'mens-tops-sweatshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(87, 'Polo Shirts', 'Men''s Polo Shirts', 'mens-tops-polo-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(88, 'Long Sleeve Shirts', 'Men''s Long Sleeve Shirts', 'mens-tops-long-sleeve-sShirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(89, 'Short Sleeve Shirts', 'Men''s Short Sleeve Shirts', 'mens-tops-short-sleeve-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(90, 'Checked Shirts', 'Men''s Checked Shirts', 'mens-tops-checked-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(91, 'Printed Shirts', 'Men''s Printed Shirts', 'mens-tops-printed-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(92, 'Long Sleeve T-Shirts', 'Men''s Long Sleeve T-Shirts', 'mens-tops-long-sleeve-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(93, 'Striped T-Shirts', 'Men''s Striped T-Shirts', 'mens-tops-striped-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(94, 'Printed T-Shirts', 'Men''s Printed T-Shirts', 'mens-tops-printed-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(95, 'Tank Tops', 'Men''s Tank Tops', 'mens-tops-tank-tops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 7, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(96, 'Trainers & Hi-Tops', 'Men''s Trainers & Hi-Tops', 'mens-shoes-and-accessories-trainers-and-hitops', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(97, 'Sandals & Sliders', 'Men''s Sandals & Sliders', 'mens-shoes-and-accessories-sandals-and-sliders', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(98, 'Shoes & Loafers', 'Men''s Shoes & Loafers', 'mens-shoes-and-accessories-shoes-and-loafers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(99, 'Boots', 'Men''s Boots', 'mens-shoes-and-accessories-boots', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(100, 'Slippers', 'Men''s Slippers', 'mens-shoes-and-accessories-slippers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(101, 'Sunglasses', 'Men''s Sunglasses', 'mens-shoes-and-accessories-sunglasses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(102, 'Hats & Caps', 'Men''s Hats & Caps', 'mens-shoes-and-accessories-hats-and-caps', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(103, 'Jewellery & Watches', 'Men''s Jewellery & Watches', 'mens-shoes-and-accessories-jewellery-and-watches', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(104, 'Bags & Wallets', 'Men''s Bags & Wallets', 'mens-shoes-and-accessories-bags-and-wallets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(105, 'Belts', 'Men''s Belts', 'mens-shoes-and-accessories-belts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 9, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(106, 'Arts & Crafts', 'Children & Baby Arts & Crafts', 'children-and-baby-toys-and-games-arts-and-crafts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(107, 'Baby & Toddler Toys', 'Children & Baby Baby & Toddler Toys', 'children-and-baby-toys-and-games-baby-and-toddler-toys', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(108, 'Building & Construction Toys', 'Children & Baby Building & Construction Toys', 'children-and-baby-toys-and-games-building-and-construction-toys', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(109, 'Dolls & Accessories', 'Children & Baby Dolls & Accessories', 'children-and-baby-toys-and-games-dolls-and-accessories', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(110, 'Electronic Toys', 'Children''s Electronic Toys', 'children-and-baby-toys-and-games-electronic-toys', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(111, 'Fancy Dress', 'Children & Baby Fancy Dress', 'children-and-baby-toys-and-games-fancy-dress', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(112, 'Jigsaws & Puzzles', 'Children & Baby Jigsaws & Puzzles', 'children-and-baby-toys-and-games-jigsaws-and-puzzles', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(113, 'Kids'' Furniture, Décor & Storage', 'Children & Baby Kids'' Furniture, Décor & Storage', 'children-and-baby-toys-and-games-kids-furniture-decor-and-storage', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(114, 'Learning & Education', 'Children & Baby Learning & Education', 'children-and-baby-toys-and-games-learning-and-education', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(115, 'Musical Toy Instruments', 'Children & Baby Musical Toy Instruments', 'children-and-baby-toys-and-games-musical-toy-instruments', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(116, 'Play Figures & Vehicles', 'Children & Baby Play Figures & Vehicles', 'children-and-baby-toys-and-games-play-figures-and-vehicles', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(117, 'Puppets & Puppet Theatres', 'Children & Baby Puppets & Puppet Theatres', 'children-and-baby-toys-and-games-puppets-and-puppet-theatres', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(118, 'Soft Toys', 'Children & Baby Soft Toys', 'children-and-baby-toys-and-games-soft-toys', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 10, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(119, 'Underwear & Socks', 'Children & Baby Underwear & Socks', 'children-and-baby-girls-clothing-underwear-and-socks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(120, 'T-Shirts', 'Children & Baby T-Shirts', 'children-and-baby-girls-clothing-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(121, 'School Uniform', 'Children & Baby School Uniform', 'children-and-baby-girls-clothing-school-uniform', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(122, 'Trousers', 'Children & Baby Trousers', 'children-and-baby-girls-clothing-trousers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(123, 'Blouses & Shirts', 'Children & Baby Blouses & Shirts', 'children-and-baby-girls-clothing-blouses-and-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(124, 'Dresses', 'Children & Baby Dresses', 'children-and-baby-girls-clothing-dresses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(125, 'Skirts', 'Children & Baby Skirts', 'children-and-baby-girls-clothing-skirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(126, 'Coats & Jackets', 'Children & Baby Coats & Jackets', 'children-and-baby-girls-clothing-coats-and-jackets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(127, 'Jumpers & Cardigans', 'Children & Baby Jumpers & Cardigans', 'children-and-baby-girls-clothing-jumpers-and-cardigans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(128, 'Jeans', 'Children & Baby Jeans', 'children-and-baby-girls-clothing-jeans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 1, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(129, 'Swimwear', 'Children & Baby Swimwear', 'children-and-baby-girls-clothing-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(130, 'Shorts', 'Children & Baby Shorts', 'children-and-baby-girls-clothing-shorts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(131, 'Hoodies & Sweatshirts', 'Children & Baby Hoodies & Sweatshirts', 'children-and-baby-girls-clothing-hoodies-and-sweatshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(132, 'Joggers & Tracksuits', 'Children & Baby Joggers & Tracksuits', 'children-and-baby-girls-clothing-joggers-and-tracksuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(133, 'Nightwear', 'Children & Baby Nightwear', 'children-and-baby-girls-clothing-nightwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(134, 'Leggings', 'Children & Baby Leggings', 'children-and-baby-girls-clothing-leggings', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 11, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(135, 'Underwear & Socks', 'Children & Baby Underwear & Socks', 'children-and-baby-boys-clothing-underwear-and-socks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(136, 'T-Shirts', 'Children & Baby T-Shirts', 'children-and-baby-boys-clothing-tshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(137, 'School Uniform', 'Children & Baby School Uniform', 'children-and-baby-boys-clothing-school-uniform', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(138, 'Trousers', 'Children & Baby Trousers', 'children-and-baby-boys-clothing-trousers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(139, 'Shirts', 'Children & Baby Shirts', 'children-and-baby-boys-clothing-shirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(140, 'Shorts', 'Children & Baby Shorts', 'children-and-baby-boys-clothing-shorts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(141, 'T-Shirts & Vests', 'Children & Baby T-Shirts & Vests', 'children-and-baby-boys-clothing-tshirts-and-vests', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(142, 'Tracksuits', 'Children & Baby Tracksuits', 'children-and-baby-boys-clothing-tracksuits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(143, 'Hoodies & Sweatshirts', 'Children & Baby Hoodies & Sweatshirts', 'children-and-baby-boys-clothing-hoodies-and-sweatshirts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(144, 'Jeans', 'Children & Baby Jeans', 'children-and-baby-boys-clothing-jeans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(145, 'Coats & Jackets', 'Children & Baby Coats & Jackets', 'children-and-baby-boys-clothing-coats-and-jackets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(146, 'Jumpers & Cardigans', 'Children & Baby Jumpers & Cardigans', 'children-and-baby-boys-clothing-jumpers-and-cardigans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(147, 'Suits', 'Children & Baby Suits', 'children-and-baby-boys-clothing-suits', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(148, 'Swimwear', 'Children & Baby Swimwear', 'children-and-baby-boys-clothing-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(149, 'Onesies', 'Children & Baby Onesies', 'children-and-baby-boys-clothing-onesies', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(150, 'Nightwear', 'Children & Baby Nightwear', 'children-and-baby-boys-clothing-nightwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 12, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(151, 'Swaddle', 'Children & Baby Swaddle', 'children-and-baby-baby-girls-clothing-swaddle', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(152, 'Babygrow & Onesies', 'Children & Baby Babygrow & Onesies', 'children-and-baby-baby-girls-clothing-babygrow-and-onesies', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(153, 'Jumpers & Cardigans', 'Children & Baby Jumpers & Cardigans', 'children-and-baby-baby-girls-clothing-jumpers-and-cardigans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(154, 'Leggings', 'Children & Baby Leggings', 'children-and-baby-baby-girls-clothing-leggings', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(155, 'T-Shirt & Vests', 'Children & Baby T-Shirt & Vests', 'children-and-baby-baby-girls-clothing-tshirt-and-vests', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(156, 'Coats & Jackets', 'Children & Baby Coats & Jackets', 'children-and-baby-baby-girls-clothing-coats-and-jackets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(157, 'Swimwear', 'Children & Baby Swimwear', 'children-and-baby-baby-girls-clothing-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(158, 'Nightwear', 'Children & Baby Nightwear', 'children-and-baby-baby-girls-clothing-nightwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(159, 'Socks', 'Children & Baby Socks', 'children-and-baby-baby-girls-clothing-socks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(160, 'Shorts', 'Children & Baby Shorts', 'children-and-baby-baby-girls-clothing-shorts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(161, 'Trousers', 'Children & Baby Trousers', 'children-and-baby-baby-girls-clothing-trousers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 13, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(162, 'Swaddle', 'Children & Baby Swaddle', 'children-and-baby-baby-boys-clothing-swaddle', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(163, 'Babygrow & Onesies', 'Children & Baby Babygrow & Onesies', 'children-and-baby-baby-boys-clothing-babygrow-and-onesies', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(164, 'Jumpers & Cardigans', 'Children & Baby Jumpers & Cardigans', 'children-and-baby-baby-boys-clothing-jumpers-and-cardigans', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(165, 'T-Shirt & Vests', 'Children & Baby T-Shirt & Vests', 'children-and-baby-baby-boys-clothing-tshirt-and-vests', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(166, 'Coats & Jackets', 'Children & Baby Coats & Jackets', 'children-and-baby-baby-boys-clothing-coats-and-jackets', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(167, 'Swimwear', 'Children & Baby Swimwear', 'children-and-baby-baby-boys-clothing-swimwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(168, 'Nightwear', 'Children & Baby Nightwear', 'children-and-baby-baby-boys-clothing-nightwear', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(169, 'Socks', 'Children & Baby Socks', 'children-and-baby-baby-boys-clothing-socks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(170, 'Shorts', 'Children & Baby Shorts', 'children-and-baby-baby-boys-clothing-shorts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(171, 'Trousers', 'Children & Baby Trousers', 'children-and-baby-baby-boys-clothing-trousers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 14, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(172, 'Girls Boots', 'Children & Baby Girls Boots', 'children-and-baby-shoes-and-accessories-girls-boots', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(173, 'Girls Sandals', 'Children & Baby Girls Sandals', 'children-and-baby-shoes-and-accessories-girls-sandals', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(174, 'Girls Trainers', 'Children & Baby Girls Trainers', 'children-and-baby-shoes-and-accessories-girls-trainers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(175, 'Girls Slippers', 'Children & Baby Girls Slippers', 'children-and-baby-shoes-and-accessories-girls-slippers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(176, 'Girls Flat Shoes', 'Children & Baby Girls Flat Shoes', 'children-and-baby-shoes-and-accessories-girls-flat-shoes', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(177, 'Girls Bags & Backpacks', 'Children & Baby Girls Bags & Backpacks', 'children-and-baby-shoes-and-accessories-girls-bags-and-backpacks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(178, 'Girls Sunglasses', 'Children & Baby Girls Sunglasses', 'children-and-baby-shoes-and-accessories-girls-sunglasses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(179, 'Girls Hats & Caps', 'Children & Baby Girls Hats & Caps', 'children-and-baby-shoes-and-accessories-girls-hats-and-caps', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(180, 'Girls Belts', 'Children & Baby Girls Belts', 'children-and-baby-shoes-and-accessories-girls-belts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(181, 'Boys Boots', 'Children & Baby Boys Boots', 'children-and-baby-shoes-and-accessories-boys-boots', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(182, 'Boys Sandals', 'Children & Baby Boys Sandals', 'children-and-baby-shoes-and-accessories-boys-sandals', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(183, 'Boys Trainers', 'Children & Baby Boys Trainers', 'children-and-baby-shoes-and-accessories-boys-trainers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(184, 'Boys Slippers', 'Children & Baby Boys Slippers', 'children-and-baby-shoes-and-accessories-boys-slippers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(185, 'Boys Shoes & Loafers', 'Children & Baby Boys Shoes & Loafers', 'children-and-baby-shoes-and-accessories-boys-shoes-and-loafers', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(186, 'Boys Bags & Backpacks', 'Children & Baby Boys Bags & Backpacks', 'children-and-baby-shoes-and-accessories-boys-bags-and-backpacks', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(187, 'Boys Sunglasses', 'Children & Baby Boys Sunglasses', 'children-and-baby-shoes-and-accessories-boys-sunglasses', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(188, 'Boys Hats & Caps', 'Children & Baby Boys Hats & Caps', 'children-and-baby-shoes-and-accessories-boys-hats-and-caps', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO LeafCategories VALUES(189, 'Boys Belts', 'Children & Baby Boys Belts', 'children-and-baby-shoes-and-accessories-boys-belts', 'https://via.placeholder.com/600x370', NULL, NULL, 'Shop Now', 0, 0, 0, 0, 15, NULL)";
                    insertCmd.ExecuteNonQuery();

                    transaction.Commit();
                }
            }
        }

        private static void CreateCustomersTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE Customers(Id INTEGER PRIMARY KEY AUTOINCREMENT, EmailAddress VARCHAR(320) NOT NULL, FirstName VARCHAR(100) NOT NULL, Surname VARCHAR(100) NOT NULL, IsRegistered BOOLEAN NOT NULL, Password VARCHAR(100) NOT NULL, CreatedDateTime INTEGER NOT NULL, LastAccessedDateTime INTEGER)";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateCustomersTable(string connectionString)
        {
            //this is temporary test data
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('mike1@test.com', 'Mike', 'One', 0, '', strftime ('%s', '2021-05-12 08:12:01'), NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('sheikh2@test.com', 'Sheikh', 'Two', 0, '', strftime ('%s', '2021-05-12 09:54:01'), NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('patricia3@test.com', 'Patricia', 'Three', 1, 'PW', strftime ('%s', '2021-05-11 10:23:01'), strftime ('%s', '2021-05-11 10:23:01'))";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('elizabeth4@test.com', 'Elizabeth', 'Four', 1, 'PW', strftime ('%s', '2021-05-11 11:06:01'), strftime ('%s', '2021-05-11 11:06:01'))";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('jyoti5@test.com', 'Jyoti', 'Five', 0, '', strftime ('%s', '2021-05-12 12:08:01'), NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('edward6@test.com', 'Edward', 'Six', 1, 'PW', strftime ('%s', '2021-05-11 13:17:01'), strftime ('%s', '2021-05-11 13:17:01'))";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('graham7@test.com', 'Graham', 'Seven', 1, 'PW', strftime ('%s', '2021-05-11 13:17:01'), strftime ('%s', '2021-05-11 13:17:01'))";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('abigail8@test.com', 'Abigail', 'Eight', 0, '', strftime ('%s', '2021-05-11 13:17:01'), strftime ('%s', '2021-05-11 13:17:01'))";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('abdul9@test.com', 'Abdul', 'Nine', 0, '', strftime ('%s', '2021-05-11 13:17:01'), strftime ('%s', '2021-05-11 13:17:01'))";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Customers (EmailAddress, FirstName, Surname, IsRegistered, Password, CreatedDateTime, LastAccessedDateTime) VALUES('ling10@test.com', 'Ling', 'Ten', 0, '', strftime ('%s', '2021-05-11 13:17:01'), strftime ('%s', '2021-05-11 13:17:01'))";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateAddressesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE Addresses(Id INTEGER PRIMARY KEY AUTOINCREMENT, CustomerId INTEGER NOT NULL, Premise VARCHAR(100) NOT NULL, Street VARCHAR(100), District VARCHAR(100), City VARCHAR(100) NOT NULL, County VARCHAR(100), Postcode VARCHAR(15) NOT NULL, Phone VARCHAR(15) NOT NULL, IsDeliveryDefault BOOLEAN NOT NULL, IsBillingDefault BOOLEAN NOT NULL, DeliveryContact VARCHAR(100), DeliveryInstructions VARCHAR(100), FOREIGN KEY(CustomerId) REFERENCES Customers(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateAddressesTable(string connectionString)
        {
            //this is temporary test data
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(1, '12', 'Station Road', 'Lorem', 'Ipsum', 'Kent', 'ME4 6RD', '07777777789', 1, 1, '', 'If out, leave next to back gate')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(2, '6', 'Field View', '', 'Ipsum', '', 'PR6 0AT', '07777777790', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(3, 'The Dell', 'Salisbury Avenue', '', 'Aberdeen', '', 'AB10 1HH', '07777777791', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(4, '68a', 'Church Street', '', 'Enniskillen', 'Fermanagh', 'BT74 6AF', '07777777792', 1, 1, '', 'If out, leave with neighbour at number 70')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(5, 'End House', 'Great Ouse Lane', 'Orton Southgate', 'Peterborough', '', 'PE2 6YS', '07777777793', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(6, '142', 'London Road', 'Kennford', 'Exeter', 'Devon', 'EX6 7TP', '07777777794', 1, 1, 'Bill Jessop', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(7, 'Flat 11', 'School Lane', 'Camberwell', 'London', '', 'SE5 0XS', '07777777795', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(8, '12', 'Salem Street', 'Rutherglen', 'Glasgow', '', 'G73 3LW', '07777777796', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(9, '9', 'Creswell Place', '', 'London', '', 'SW10 9RD', '07777777797', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO Addresses (CustomerId, Premise, Street, District, City, County, Postcode, Phone, IsDeliveryDefault, IsBillingDefault, DeliveryContact, DeliveryInstructions) VALUES(10, '40', 'St Leonard''s Avenue', 'Blandford Forum', '', 'Dorset', 'DT11 7NY', '07777777798', 1, 1, '', '')";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateProductOptionTypesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE ProductOptionTypes(Id INTEGER PRIMARY KEY ASC, Name VARCHAR(20) NOT NULL)";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateProductOptionTypesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(1, 'N/A')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(2, 'Size')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(3, 'Age Range')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(4, 'Dress Size')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(5, 'Waist')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(6, 'Collar')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(7, 'Chest Size')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptionTypes VALUES(8, 'Shoe Size')";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateSupplierManufacturersTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE SupplierManufacturers(Id INTEGER PRIMARY KEY AUTOINCREMENT, Name VARCHAR(100) NOT NULL)";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateSupplierManufacturersTable(string connectionString)
        {
            //this is temporary test data
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Own Brand')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Lorem')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Ipsum')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Lorem Ipsum')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Dolor')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Sit')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Dolor Sit')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Amet')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Consectetur')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Amet Consectetur')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Elit')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Sed')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Elit Sed')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Do')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Eiusmod')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Do Eiusmod')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Tempor')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Incididunt')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SupplierManufacturers (Name) VALUES('Tempor Incididunt')";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateProductsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE Products(Id INTEGER PRIMARY KEY AUTOINCREMENT, Title VARCHAR(50) NOT NULL, FriendlyUrl VARCHAR(100) NOT NULL, Sku VARCHAR(20) NOT NULL, SupplierManufacturerId INTEGER, MainImageUrl VARCHAR(100) NOT NULL, MainImageThumbnailUrl VARCHAR(100) NOT NULL, SecondImageUrl VARCHAR(100), SecondImageThumbnailUrl VARCHAR(100), ThirdImageUrl VARCHAR(100), ThirdImageThumbnailUrl VARCHAR(100), FourthImageUrl VARCHAR(100), FourthImageThumbnailUrl VARCHAR(100), TrendingItemImageUrl VARCHAR(100) NOT NULL, RelatedImageUrl VARCHAR(100) NOT NULL, CategoryImageUrl VARCHAR(100) NOT NULL, CategoryHoverImageUrl VARCHAR(100) NOT NULL, CartThumbnailImageUrl VARCHAR(100) NOT NULL, BriefDescription TEXT NOT NULL, FullDescription TEXT NOT NULL, LeafCategoryId INTEGER NOT NULL, NumberOfTimesViewed INTEGER NOT NULL, ProductOptionTypeId INTEGER NOT NULL, FOREIGN KEY(SupplierManufacturerId) REFERENCES SupplierManufacturers(Id), FOREIGN KEY(LeafCategoryId) REFERENCES LeafCategories(Id), FOREIGN KEY(ProductOptionTypeId) REFERENCES ProductOptionTypes(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static string GetRandomLetters(int numberOfLetters)
        {
            var rnd = new Random();
            var randomString = string.Empty;
            for (var i = 1; i < (numberOfLetters + 1); i++)
            {
                randomString = randomString + ((char)rnd.Next('a','z')).ToString();
            }
            return randomString;
        }

        private static string GetRandomDigits(int numberOfDigits)
        {
            var rnd = new Random();
            var randomDigits = string.Empty;
            for (var i = 1; i < (numberOfDigits + 1); i++)
            {
                randomDigits = randomDigits + ((char)rnd.Next('0','9')).ToString();
            }
            return randomDigits;
        }

        private static void PopulateProductsTable(string connectionString)
        {
            //this is temporary test data

            const string imageUrl = "https://via.placeholder.com/555x510";
            const string thumbnailImageUrl = "https://via.placeholder.com/104x95";
            const string relatedImageUrl = "https://via.placeholder.com/255x348";
            const string trendingItemImageUrl = "https://via.placeholder.com/550x750";
            const string categoryImageUrl = "https://via.placeholder.com/262x359";
            const string categoryHoverImageUrl = "https://via.placeholder.com/262x328";
            const string cartThumbnailImageUrl = "https://via.placeholder.com/70x70";
            const string briefDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin commodo enim eget cursus interdum. Aliquam pellentesque blandit nibh, non maximus sem venenatis nec. Aliquam venenatis quam at ipsum malesuada rhoncus.";
            const string fullDescription = "__p__Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin commodo enim eget cursus interdum. Aliquam pellentesque blandit nibh, non maximus sem venenatis nec. Aliquam venenatis quam at ipsum malesuada rhoncus. Donec et nunc at felis blandit pellentesque. Proin consequat nisl sed pulvinar ullamcorper. Donec euismod malesuada neque, id laoreet leo porta at. Proin elementum tortor sed mollis fermentum. Vestibulum tincidunt venenatis metus eget interdum. Nam cursus aliquet quam.__cp__ __p__Vestibulum suscipit tortor eget fringilla molestie. Donec lacinia libero risus, eu feugiat diam congue ac. Sed id dui eget quam feugiat feugiat. Quisque ac odio non arcu euismod facilisis. Nulla facilisi. Duis vel commodo velit. Nullam faucibus, risus non porttitor congue, purus eros faucibus libero, quis sagittis ipsum ligula id felis. Etiam fermentum, massa vestibulum tempus sollicitudin, dui erat viverra ipsum, vel aliquam eros lectus in odio. Aenean et erat vel odio feugiat rhoncus. Curabitur vitae est ipsum. Ut fringilla felis sodales sem aliquam fringilla. Nulla vitae velit at urna ultricies condimentum. Nunc malesuada, mi et tristique facilisis, risus elit venenatis ipsum, non consectetur diam lorem vel dolor.__cp__";
            var rnd = new Random();

            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                for (var i = 1; i < 401; i++)
                {
                    var numberOfWordsInTitle = (rnd.Next(1, 3) == 3 ? rnd.Next(3, 5) : 2);
                    var word1Length = rnd.Next(3, 9);
                    var word2Length = rnd.Next(3, 9);
                    var word3Length = rnd.Next(3, 9);
                    var word4Length = rnd.Next(3, 9);
                    var productTitle = GetRandomLetters(8).Substring(0, word1Length);
                    var word2 = GetRandomLetters(8).Substring(0, word2Length);
                    var word3 = GetRandomLetters(8).Substring(0, word3Length);
                    var word4 = GetRandomLetters(8).Substring(0, word4Length);
                    productTitle = productTitle + " " + word2;
                    if (numberOfWordsInTitle >= 3)
                    {
                        productTitle = productTitle + " " + word3;
                    }
                    if (numberOfWordsInTitle == 4)
                    {
                        productTitle = productTitle + " " + word4;
                    }
                    var textInfo = new CultureInfo("en-GB", false).TextInfo;
                    productTitle = textInfo.ToTitleCase(productTitle);
                    var friendlyUrl = productTitle.ToLower().Replace(' ', '-');
                    var sku = GetRandomLetters(4).ToUpper() + GetRandomDigits(2);
                    var supplierManufacturerId = (rnd.Next(1, 4) == 3 ? rnd.Next(2, 20) : 1);
                    var leafCategoryId = rnd.Next(1, 189);
                    var numberOfTimesViewed = (rnd.Next(1, 4) == 3 ? rnd.Next(2, 10) : 1);
                    var productOptionTypeId = (rnd.Next(1, 4) == 3 ? rnd.Next(2, 9) : 1);
                    using (var transaction = connection.BeginTransaction())
                    {
                        var insertCmd = connection.CreateCommand();
                        insertCmd.CommandText ="INSERT INTO Products (Title, FriendlyUrl, Sku, supplierManufacturerId, MainImageUrl, MainImageThumbnailUrl, SecondImageUrl, SecondImageThumbnailUrl, ThirdImageUrl, ThirdImageThumbnailUrl, FourthImageUrl, FourthImageThumbnailUrl, TrendingItemImageUrl, RelatedImageUrl, CategoryImageUrl, CategoryHoverImageUrl, CartThumbnailImageUrl, BriefDescription, FullDescription, LeafCategoryId, NumberOfTimesViewed, ProductOptionTypeId) VALUES ('" + productTitle + "','" + friendlyUrl + "','" + sku + "'," + supplierManufacturerId + ",'" + imageUrl + "','" + thumbnailImageUrl + "','" + imageUrl + "','" + thumbnailImageUrl + "','" + imageUrl + "','" + thumbnailImageUrl + "','" + imageUrl + "','" + thumbnailImageUrl + "','" + trendingItemImageUrl + "','" + relatedImageUrl + "', '" + categoryImageUrl + "', '" + categoryHoverImageUrl + "', '" + cartThumbnailImageUrl + "', '" + briefDescription + "','" + fullDescription + "'," + leafCategoryId + "," + numberOfTimesViewed + "," + productOptionTypeId + ")";
                        insertCmd.ExecuteNonQuery();
                        transaction.Commit();
                    }
                }
            }
        }

        private static void CreateProductFeaturesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE ProductFeatures(Id INTEGER PRIMARY KEY AUTOINCREMENT, Feature VARCHAR(200) NOT NULL, ProductId INTEGER NOT NULL, FOREIGN KEY(ProductId) REFERENCES Products(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateProductFeaturesTable(string connectionString)
        {
            //this is temporary test data

            const string feature1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
            const string feature2 = "Proin commodo enim eget cursus interdum";
            const string feature3 = "Aliquam pellentesque blandit nibh, non maximus sem venenatis nec";
            const string feature4 = "Aliquam venenatis quam at ipsum malesuada rhoncus";
            var rnd = new Random();

            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                for (var i = 1; i < 401; i++)
                {
                    var numberOfFeatures = rnd.Next(1, 5);
                    for (var j = 1; j < numberOfFeatures + 1; j++)
                    {
                        using (var transaction = connection.BeginTransaction())
                        {
                            var insertCmd = connection.CreateCommand();
                            var commandText = "INSERT INTO ProductFeatures (Feature, ProductId) VALUES ('";
                            switch (j)
                            {
                                case 1:
                                    commandText = commandText + feature1;
                                    break;
                                case 2:
                                    commandText = commandText + feature2;
                                    break;
                                case 3:
                                    commandText = commandText + feature3;
                                    break;
                                case 4:
                                    commandText = commandText + feature4;
                                    break;
                            }
                            commandText = commandText + "'," + i + ")";
                            insertCmd.CommandText = commandText;
                            insertCmd.ExecuteNonQuery();
                            transaction.Commit();
                        }
                    }
                }
            }
        }

        private static void CreateProductOptionsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE ProductOptions(Id INTEGER PRIMARY KEY ASC, Option VARCHAR(50) NOT NULL, ProductOptionTypeId INTEGER NOT NULL, SalesTaxTypeId INTEGER NOT NULL, FOREIGN KEY(ProductOptionTypeId) REFERENCES ProductOptionTypes(Id), FOREIGN KEY(SalesTaxTypeId) REFERENCES SalesTaxTypes(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateProductOptionsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(1, 'N/A', 1, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(2, 'XXS', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(3, 'XS', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(4, 'Small', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(5, 'Medium', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(6, 'Large', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(7, 'XL', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(8, 'XXL', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(9, 'XXXL', 2, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(10, 'Premature', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(11, 'Newborn', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(12, '0 - 3 months', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(13, '3 - 6 months', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(14, '6 - 9 months', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(15, '9 - 12 months', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(16, '12 - 18 months', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(17, '18 - 24 months', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(18, '2 - 3 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(19, '3 - 4 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(20, '4 - 5 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(21, '5 - 6 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(22, '6 - 7 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(23, '7 - 8 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(24, '8 - 9 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(25, '9 - 10 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(26, '10 - 11 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(27, '11 - 12 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(28, '12 - 13 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(29, '13 - 14 years', 3, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(30, '2', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(31, '4', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(32, '6', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(33, '8', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(34, '10', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(35, '12', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(36, '14', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(37, '16', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(38, '18', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(39, '20', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(40, '22', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(41, '24', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(42, '26', 4, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(43, '24', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(44, '26', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(45, '28', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(46, '30', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(47, '32', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(48, '34', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(49, '36', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(50, '38', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(51, '40', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(52, '42', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(53, '44', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(54, '46', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(55, '48', 5, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(56, '13″ - 14″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(57, '14″ - 15″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(58, '15″ - 16″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(59, '16″ - 17″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(60, '17″ - 18″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(61, '18″ - 19″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(62, '19″ - 20″', 6, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(63, '30″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(64, '32″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(65, '34″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(66, '36″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(67, '38″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(68, '40″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(69, '42″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(70, '44″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(71, '46″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(72, '48″', 7, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(73, 'UK 2 - EU 17½', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(74, 'UK 3 - EU 18½', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(75, 'UK 4 - EU 20', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(76, 'UK 5 - EU 21', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(77, 'UK 6 - EU 22½', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(78, 'UK 7 - EU 24', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(79, 'UK 8 - EU 25½', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(80, 'UK 9 - EU 27', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(81, 'UK 10 - EU 28', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(82, 'UK 11 - EU 29', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(83, 'UK 12 - EU 30', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(84, 'UK 13 - EU 32', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(85, 'UK 1 - EU 33', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(86, 'UK 2 - EU 34', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(87, 'UK 3 - EU 35½', 8, 3)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(88, 'UK 4 - EU 37', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(89, 'UK 5 - EU 38', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(90, 'UK 6 - EU 39½', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(91, 'UK 7 - EU 41', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(92, 'UK 8 - EU 42', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(93, 'UK 9 - EU 43', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(94, 'UK 10 - EU 44½', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(95, 'UK 11 - EU 46', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(96, 'UK 12 - EU 47', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO ProductOptions VALUES(97, 'UK 13 - EU 48', 8, 1)";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateProductOptionProductsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE ProductOptionProducts(Id INTEGER PRIMARY KEY AUTOINCREMENT, ProductOptionId INTEGER NOT NULL, ProductId INTEGER NOT NULL, Stock INTEGER NOT NULL, FOREIGN KEY(ProductOptionId) REFERENCES ProductOptions(Id), FOREIGN KEY(ProductId) REFERENCES Products(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateProductOptionProductsTable(string connectionString)
        {
            //this is temporary test data
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();

                for (var i = 1; i < 401; i++)
                {
                    string stm = "SELECT ProductOptionTypeId FROM Products WHERE Id = " + i + ";";
                    int productOptionTypeId = 1;

                    using (var cmd = new SqliteCommand(stm, connection))
                    {
                        using (var rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                productOptionTypeId = rdr.GetInt32(rdr.GetOrdinal("ProductOptionTypeId"));
                            }
                        }
                    }

                    stm = "SELECT Id FROM ProductOptions WHERE ProductOptionTypeId = " + productOptionTypeId + ";";

                    using (var cmd = new SqliteCommand(stm, connection))
                    {
                        using (var rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                var productOptionId = rdr.GetInt32(rdr.GetOrdinal("Id"));
                                using (var transaction = connection.BeginTransaction())
                                {
                                    var insertCmd = connection.CreateCommand();
                                    insertCmd.CommandText = "INSERT INTO ProductOptionProducts (ProductOptionId, ProductId, Stock) VALUES(" + productOptionId + ", " + i + ", 100)";
                                    insertCmd.ExecuteNonQuery();
                                    transaction.Commit();
                                }
                            }
                        }
                    }
                }
            }
        }

        private static void CreateSalesTaxTypesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE SalesTaxTypes(Id INTEGER PRIMARY KEY ASC, Name VARCHAR(20) NOT NULL)";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateSalesTaxTypesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO SalesTaxTypes VALUES(1, 'Standard rate')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SalesTaxTypes VALUES(2, 'Reduced rate')";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SalesTaxTypes VALUES(3, 'Zero rate')";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateSalesTaxesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE SalesTaxes(Id INTEGER PRIMARY KEY ASC, SalesTaxTypeId INTEGER NOT NULL, Amount REAL NOT NULL, EffectiveFromDate INTEGER NOT NULL, EffectiveToDate INTEGER)";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateSalesTaxesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    var insertCmd = connection.CreateCommand();
                    insertCmd.CommandText = "INSERT INTO SalesTaxes VALUES(1, 1, 20.0, strftime ('%s', '2011-01-04 00:00:01'), NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SalesTaxes VALUES(2, 2, 5.0, strftime ('%s', '1997-09-01 00:00:01'), NULL)";
                    insertCmd.ExecuteNonQuery();
                    insertCmd.CommandText = "INSERT INTO SalesTaxes VALUES(3, 3, 0.0, strftime ('%s', '1973-01-01 00:00:01'), NULL)";
                    insertCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
        }

        private static void CreateProductOptionProductInstancesTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE ProductOptionProductInstances(Id INTEGER PRIMARY KEY AUTOINCREMENT, ProductOptionProductId INTEGER NOT NULL, Price REAL NOT NULL, EffectiveFromDate INTEGER NOT NULL, EffectiveToDate INTEGER, FOREIGN KEY(ProductOptionProductId) REFERENCES ProductOptionProducts(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateProductOptionProductInstancesTable(string connectionString)
        {
            //this is temporary test data
            var rnd = new Random();
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();

                for (var i = 1; i < 401; i++)
                {
                    var stm = "SELECT Id FROM ProductOptionProducts WHERE ProductId = " + i + ";";
                    var pounds = rnd.Next(0, 26);
                    var pence = rnd.Next(0, 100);
                    if (pounds == 0 && pence == 0)
                    {
                        pence = 99;
                    }

                    var poundsAndPenceString = "" + pounds + ".";
                    if (pence < 10)
                    {
                        poundsAndPenceString = poundsAndPenceString + "0" + pence;
                    }
                    else {
                        poundsAndPenceString = poundsAndPenceString + pence;
                    }
                    var poundsAndPence = Decimal.Parse(poundsAndPenceString, NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);

                    using (var cmd = new SqliteCommand(stm, connection))
                    {
                        using (var rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                var productOptionProductId = rdr.GetInt32(rdr.GetOrdinal("Id"));
                                using (var transaction = connection.BeginTransaction())
                                {
                                    var insertCmd = connection.CreateCommand();
                                    insertCmd.CommandText = "INSERT INTO ProductOptionProductInstances (ProductOptionProductId, Price, EffectiveFromDate, EffectiveToDate) VALUES(" + productOptionProductId + ", " + poundsAndPence + ", strftime ('%s', '2021-04-28 00:00:01'), NULL)";
                                    insertCmd.ExecuteNonQuery();
                                    transaction.Commit();
                                }
                            }
                        }
                    }
                }
            }
        }

        private static void CreateOrdersTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE Orders(Id INTEGER PRIMARY KEY AUTOINCREMENT, CustomerId INTEGER NOT NULL, BillingAddressId INTEGER NOT NULL, DeliveryAddressId INTEGER NOT NULL, ProductTotal REAL NOT NULL, DeliveryCharge REAL NOT NULL, SalesTaxTotal REAL NOT NULL, Total REAL NOT NULL, PaymentStatus INTEGER NOT NULL, CreatedDateTime INTEGER NOT NULL, FOREIGN KEY(CustomerId) REFERENCES Customers(Id), FOREIGN KEY(BillingAddressId) REFERENCES Addresses(Id), FOREIGN KEY(DeliveryAddressId) REFERENCES Addresses(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void CreateOrderDetailsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE OrderDetails(Id INTEGER PRIMARY KEY AUTOINCREMENT, OrderId INTEGER NOT NULL, ProductOptionProductInstanceId INTEGER NOT NULL, Quantity INTEGER NOT NULL, ProductTotal REAL NOT NULL, SalesTaxTotal REAL NOT NULL, FOREIGN KEY(OrderId) REFERENCES Orders(Id), FOREIGN KEY(ProductOptionProductInstanceId) REFERENCES ProductOptionProductInstances(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void PopulateOrdersAndOrderDetailsTable(string connectionString)
        {
            //this is temporary test data
            var rnd = new Random();

            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();

                for (var customerId = 1; customerId < 11; customerId++)
                {
                    //3. Determine random number of orders per customer
                    var numberOfOrders = rnd.Next(1, 3) == 2 ? rnd.Next(2, 8) : 1;
                    
                    for (var orderNumber = 1; orderNumber < numberOfOrders + 1; orderNumber++)
                    {
                        //4. Determine random number of products ordered by customer
                        var numberOfProducts = rnd.Next(1, 3) == 2 ? rnd.Next(2, 6) : 1;
                        var orderDetails = new List<OrderDetail>();
                        var stm = string.Empty;

                        for (var product = 1; product < numberOfProducts + 1; product++)
                        {
                            var productId = rnd.Next(1, 401);
                            var orderDetail = new OrderDetail();
                            var minProductOptionId = 0;
                            var maxProductOptionId = 0;
                            var salesTaxAmount = 0.0m;
                            var productSalesTaxAmount = 0.0m;
                            var productPrice = 0.0m;
                            var productOptionProductInstanceId = 0;

                            stm = "SELECT MIN(pop.ProductOptionId) AS MinProductOptionId, MAX(pop.ProductOptionId) AS MaxProductOptionId FROM ProductOptionProducts pop WHERE pop.ProductId = " + productId + ";";
                            using (var cmd = new SqliteCommand(stm, connection))
                            {
                                using (var rdr = cmd.ExecuteReader())
                                {
                                    while (rdr.Read())
                                    {
                                        minProductOptionId = rdr.GetInt32(rdr.GetOrdinal("MinProductOptionId"));
                                        maxProductOptionId = rdr.GetInt32(rdr.GetOrdinal("MaxProductOptionId"));
                                    }
                                }
                            }

                            //5. Pick a random ProductOptionId
                            var productOptionId = rnd.Next(minProductOptionId, maxProductOptionId + 1);

                            //6. Get sales tax amount
                            stm = "SELECT st.Amount FROM SalesTaxes st INNER JOIN ProductOptions po ON st.SalesTaxTypeId = po.SalesTaxTypeId WHERE po.Id = " + productOptionId + " AND st.EffectiveFromDate <= strftime ('%s', 'now') AND (st.EffectiveToDate IS NULL OR st.EffectiveToDate > strftime ('%s', 'now'));";
                            using (var cmd = new SqliteCommand(stm, connection))
                            {
                                using (var rdr = cmd.ExecuteReader())
                                {
                                    while (rdr.Read())
                                    {
                                        salesTaxAmount = rdr.GetDecimal(rdr.GetOrdinal("Amount"));
                                    }
                                }
                            }

                            //7. Get ProductOptionProductInstanceId and ProductPrice
                            stm = "SELECT popi.Id, popi.Price FROM ProductOptionProducts pop INNER JOIN ProductOptionProductInstances popi ON pop.Id = popi.ProductOptionProductId WHERE pop.ProductId = " + productId + " AND pop.ProductOptionId = " + productOptionId + " AND popi.EffectiveFromDate <= strftime ('%s', 'now') AND (popi.EffectiveToDate IS NULL OR popi.EffectiveToDate > strftime ('%s', 'now'));";
                            using (var cmd = new SqliteCommand(stm, connection))
                            {
                                using (var rdr = cmd.ExecuteReader())
                                {
                                    while (rdr.Read())
                                    {
                                        productOptionProductInstanceId = rdr.GetInt32(rdr.GetOrdinal("Id"));
                                        productPrice = rdr.GetDecimal(rdr.GetOrdinal("Price"));
                                    }
                                }
                            }

                            //8. Determine random quantity of product ordered
                            var qty = (rnd.Next(1, 4) == 3 ? rnd.Next(2, 4) : 1);
                            
                            //9. Calculate sales tax
                            productSalesTaxAmount = salesTaxAmount * 0.01m;
                            
                            orderDetail.ProductOptionProductInstanceId = productOptionProductInstanceId;
                            orderDetail.Quantity = qty;
                            orderDetail.SalesTaxTotal = Math.Round(productPrice * productSalesTaxAmount, 2, MidpointRounding.AwayFromZero) * qty;
                            orderDetail.ProductTotal = productPrice * qty;
                            orderDetails.Add(orderDetail);
                        }

                        //10. calculate total cost of order and add delivery charge of £5 if order is below £100
                        var productTotal = orderDetails.Sum(od => od.ProductTotal);
                        var deliveryCharge = productTotal > 50.0m ? 5.0m : 0.0m;
                        var salesTaxTotal = (0.2m * deliveryCharge) + orderDetails.Sum(od => od.SalesTaxTotal);
                        var total = (deliveryCharge + (0.2m * deliveryCharge)) + productTotal + orderDetails.Sum(od => od.SalesTaxTotal);

                        //11. populate Orders table
                        var insertCmd = connection.CreateCommand();
                        insertCmd.CommandText = "INSERT INTO Orders (CustomerId, BillingAddressId, DeliveryAddressId, ProductTotal, DeliveryCharge, SalesTaxTotal, Total, PaymentStatus, CreatedDateTime) VALUES (" + customerId + ", " + customerId + ", " + customerId + ", " + productTotal + ", " + deliveryCharge + ", " + salesTaxTotal + ", " + total + ", 3, strftime ('%s', 'now'));";
                        insertCmd.ExecuteNonQuery();

                        //12. Retrieve the newly created orderid
                        var orderId = 0;
                        stm = "SELECT Id FROM Orders WHERE CustomerId = " + customerId + " AND ProductTotal = " + productTotal + " AND Total = " + total + ";";
                        using (var cmd = new SqliteCommand(stm, connection))
                        {
                            using (var rdr = cmd.ExecuteReader())
                            {
                                while (rdr.Read())
                                {
                                    orderId = rdr.GetInt32(rdr.GetOrdinal("Id"));
                                }
                            }
                        }

                        //13. populate OrderDetails table
                        foreach (var orderDetail in orderDetails)
                        {
                            insertCmd.CommandText = "INSERT INTO OrderDetails (OrderId, ProductOptionProductInstanceId, Quantity, ProductTotal, SalesTaxTotal) VALUES (" + orderId + ", " + orderDetail.ProductOptionProductInstanceId + ", " + orderDetail.Quantity + ", " + orderDetail.ProductTotal + ", " + orderDetail.SalesTaxTotal + ");";
                            insertCmd.ExecuteNonQuery();
                        }
                    }
                }
            }
        }

        private static void CreateCartsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE Carts(Id INTEGER PRIMARY KEY AUTOINCREMENT, Guid VARCHAR(36) NOT NULL, CreatedDateTime INTEGER NOT NULL)";
                createTableCmd.ExecuteNonQuery();
            }
        }

        private static void CreateCartItemsTable(string connectionString)
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                var createTableCmd = connection.CreateCommand();
                createTableCmd.CommandText = "CREATE TABLE CartItems(Id INTEGER PRIMARY KEY AUTOINCREMENT, CartId INTEGER NOT NULL, ProductOptionProductInstanceId INTEGER NOT NULL, Quantity INTEGER NOT NULL, FOREIGN KEY(CartId) REFERENCES Carts(Id), FOREIGN KEY(ProductOptionProductInstanceId) REFERENCES ProductOptionProductInstances(Id))";
                createTableCmd.ExecuteNonQuery();
            }
        }
    }

    public class OrderDetail
    {
        public int OrderId { get; set; }
        public int ProductOptionProductInstanceId { get; set; }
        public int Quantity { get; set; }
        public decimal ProductTotal { get; set; }
        public decimal SalesTaxTotal { get; set; }
    }
}

176. in the Terminal window, if you are not already in the BlazorCommerce.DbSetup folder cd in to the BlazorCommerce.DbSetup folder, then type "dotnet run". This will re-create the database in favour of the updated structure and populate all the sample data.
177. Now to update IRepository.cs in BlazorCommerce.Data rename the method GetAll and add a new method to get featured categories:
using System.Collections.Generic;

namespace BlazorCommerce.Data
{
    public interface IRepository<T>
    {
        IEnumerable<T> GetAllSiblingCategories(string friendlyUrl);
        
        IEnumerable<T> GetFeaturedCategories();

        T Get(string friendlyUrl);
    }
}

178. Now to update CategoryDto.cs in BlazorCommerce.Shared:
namespace BlazorCommerce.Shared
{
    public class CategoryDto : IDataModel
    {
        public int Id {get;set;}

        public string Name {get;set;}

        public bool IsHero {get;set;}

        public bool IsSingleBanner {get;set;}

        public bool IsMidiumBanner {get;set;}

        public string FriendlyUrl {get;set;}

        public string ImageUrl {get;set;}

        public string OfferText {get;set;}
        
        public string MarketingText {get;set;}
        
        public string ActionButtonText {get;set;}

        public byte CategoryType
        {
            get
            {
                if (IsHero)
                {
                    return 1;
                }
                if (IsSingleBanner)
                {
                    return 2;
                }
                if (IsMidiumBanner)
                {
                    return 3;
                }
                return 4;
            }
        }
    }
}
179. Now to update CategoryMinDto.cs in BlazorCommerce.Shared:
namespace BlazorCommerce.Shared
{
    public class CategoryMinDto : IDataModel
    {
        public int Id {get;set;}

        public string Name {get;set;}

        public string FriendlyUrl {get;set;}

        public byte CategoryType {get;set;}
    }
}
180. Now to update CategoryRepository.cs in BlazorCommerce.Data:
using System.Collections.Generic;
using BlazorCommerce.Shared;
using Microsoft.Extensions.Options;
using Microsoft.Data.Sqlite;

namespace BlazorCommerce.Data
{
    public class CategoryRepository : BaseRepository, IRepository<CategoryDto>
    {
        public CategoryRepository(IOptions<BlazorCommerce.Data.DatabaseOptions> databaseOptions) : base(databaseOptions) { }

        public IEnumerable<CategoryDto> GetAllSiblingCategories(string friendlyUrl)
        {
            var categories = new List<CategoryDto>();
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = "SELECT c.* FROM LeafCategories c INNER JOIN BranchCategories bc ON c.PrimaryBranchCategoryId = bc.Id INNER JOIN LeafCategories c1 ON bc.Id = c1.PrimaryBranchCategoryId WHERE c1.FriendlyUrl = '" + friendlyUrl + "';";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var category = new CategoryDto()    
                            {    
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                IsHero = rdr.GetBoolean(rdr.GetOrdinal("Hero")),
                                IsSingleBanner = rdr.GetBoolean(rdr.GetOrdinal("SingleBanner")),
                                IsMidiumBanner = rdr.GetBoolean(rdr.GetOrdinal("MidiumBanner")),
                                FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                ImageUrl = rdr.IsDBNull(rdr.GetOrdinal("ImageUrl")) ? null : rdr.GetString(rdr.GetOrdinal("ImageUrl")),
                                OfferText = rdr.IsDBNull(rdr.GetOrdinal("OfferText")) ? null : rdr.GetString(rdr.GetOrdinal("OfferText")),
                                MarketingText = rdr.IsDBNull(rdr.GetOrdinal("MarketingText")) ? null : rdr.GetString(rdr.GetOrdinal("MarketingText")),
                                ActionButtonText = rdr.IsDBNull(rdr.GetOrdinal("ActionButtonText")) ? null : rdr.GetString(rdr.GetOrdinal("ActionButtonText")),
                            };
                            categories.Add(category);
                        }
                    }
                }

                con.Close();
            }
            return categories;
        }

        public IEnumerable<CategoryDto> GetFeaturedCategories()
        {
            var categories = new List<CategoryDto>();
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = "SELECT c.* FROM LeafCategories c WHERE Hero = 1 OR SingleBanner = 1 OR MidiumBanner = 1;";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var category = new CategoryDto()    
                            {    
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                IsHero = rdr.GetBoolean(rdr.GetOrdinal("Hero")),
                                IsSingleBanner = rdr.GetBoolean(rdr.GetOrdinal("SingleBanner")),
                                IsMidiumBanner = rdr.GetBoolean(rdr.GetOrdinal("MidiumBanner")),
                                FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                ImageUrl = rdr.IsDBNull(rdr.GetOrdinal("ImageUrl")) ? null : rdr.GetString(rdr.GetOrdinal("ImageUrl")),
                                OfferText = rdr.IsDBNull(rdr.GetOrdinal("OfferText")) ? null : rdr.GetString(rdr.GetOrdinal("OfferText")),
                                MarketingText = rdr.IsDBNull(rdr.GetOrdinal("MarketingText")) ? null : rdr.GetString(rdr.GetOrdinal("MarketingText")),
                                ActionButtonText = rdr.IsDBNull(rdr.GetOrdinal("ActionButtonText")) ? null : rdr.GetString(rdr.GetOrdinal("ActionButtonText")),
                            };
                            categories.Add(category);
                        }
                    }
                }

                con.Close();
            }
            return categories;
        }

        public CategoryDto Get(string friendlyUrl)
        {
            CategoryDto category = null;
                            
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = "SELECT * FROM LeafCategories WHERE FriendlyUrl = '" + friendlyUrl + "';";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            category = new CategoryDto()    
                            {
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                IsHero = rdr.GetBoolean(rdr.GetOrdinal("Hero")),
                                IsSingleBanner = rdr.GetBoolean(rdr.GetOrdinal("SingleBanner")),
                                IsMidiumBanner = rdr.GetBoolean(rdr.GetOrdinal("MidiumBanner")),
                                FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                ImageUrl = rdr.IsDBNull(rdr.GetOrdinal("ImageUrl")) ? null : rdr.GetString(rdr.GetOrdinal("ImageUrl")),
                                OfferText = rdr.IsDBNull(rdr.GetOrdinal("OfferText")) ? null : rdr.GetString(rdr.GetOrdinal("OfferText")),
                                MarketingText = rdr.IsDBNull(rdr.GetOrdinal("MarketingText")) ? null : rdr.GetString(rdr.GetOrdinal("MarketingText")),
                                ActionButtonText = rdr.IsDBNull(rdr.GetOrdinal("ActionButtonText")) ? null : rdr.GetString(rdr.GetOrdinal("ActionButtonText")),
                            };
                        }
                    }
                }

                con.Close();
            }
            return category;
        }
    }
}

181. Now to update CategoryMinRepository.cs in BlazorCommerce.Data:
using System.Collections.Generic;
using BlazorCommerce.Shared;
using Microsoft.Extensions.Options;
using Microsoft.Data.Sqlite;

namespace BlazorCommerce.Data
{
    public class CategoryMinRepository : BaseRepository, IRepository<CategoryMinDto>
    {
        public CategoryMinRepository(IOptions<BlazorCommerce.Data.DatabaseOptions> databaseOptions) : base(databaseOptions) { }

        public IEnumerable<CategoryMinDto> GetAllSiblingCategories(string friendlyUrl)
        {
            var categories = new List<CategoryMinDto>();
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = "SELECT c.Id, c.Name, c.FriendlyUrl, c.Hero, c.SingleBanner, c.MidiumBanner FROM LeafCategories c INNER JOIN BranchCategories bc ON c.PrimaryBranchCategoryId = bc.Id INNER JOIN LeafCategories c1 ON bc.Id = c1.PrimaryBranchCategoryId WHERE c1.FriendlyUrl = '" + friendlyUrl + "';";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var category = new CategoryMinDto()    
                            {    
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                CategoryType = CalculateCategoryType(rdr)
                            };
                            categories.Add(category);
                        }
                    }
                }

                con.Close();
            }
            return categories;
        }

        public IEnumerable<CategoryMinDto> GetFeaturedCategories()
        {
            var categories = new List<CategoryMinDto>();
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = "SELECT c.Id, c.Name, c.FriendlyUrl, c.Hero, c.SingleBanner, c.MidiumBanner FROM LeafCategories c WHERE Hero = 1 OR SingleBanner = 1 OR MidiumBanner = 1;";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var category = new CategoryMinDto()    
                            {    
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                CategoryType = CalculateCategoryType(rdr)
                            };
                            categories.Add(category);
                        }
                    }
                }

                con.Close();
            }
            return categories;
        }

        public CategoryMinDto Get(string friendlyUrl)
        {
            CategoryMinDto category = null;
                            
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = "SELECT Id, Name, FriendlyUrl, c.Hero, c.SingleBanner, c.MidiumBanner FROM LeafCategories WHERE FriendlyUrl = '" + friendlyUrl + "';";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            category = new CategoryMinDto()    
                            {
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                CategoryType = CalculateCategoryType(rdr)
                            };
                        }
                    }
                }

                con.Close();
            }
            return category;
        }

        private byte CalculateCategoryType(SqliteDataReader rdr)
        {
            if (rdr.GetBoolean(rdr.GetOrdinal("Hero")))
            {
                return 1;
            }
            else if (rdr.GetBoolean(rdr.GetOrdinal("SingleBanner")))
            {
                return 2;
            }
            else if (rdr.GetBoolean(rdr.GetOrdinal("MidiumBanner")))
            {
                return 3;
            }
            return 4;
        }
    }
}

182. Now to update Controllers/CategoryController.cs in BlazorCommerce.Api:
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using BlazorCommerce.Data;
using BlazorCommerce.Shared;

namespace BlazorCommerce.Api.Controllers
{
    [ApiController]
    public class CategoryController : ControllerBase
    {
        private readonly ILogger<CategoryController> _logger;
        
        private readonly IRepository<CategoryDto> _categoryRepository;
        
        private readonly IRepository<CategoryMinDto> _categoryMinRepository;

        public CategoryController(ILogger<CategoryController> logger, IRepository<CategoryDto> categoryRepository, IRepository<CategoryMinDto> categoryMinRepository)
        {
            _logger = logger;
            _categoryRepository = categoryRepository;
            _categoryMinRepository = categoryMinRepository;
        }

        [HttpGet]
        [Route("~/category/siblingcategories/{friendlyUrl}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<IEnumerable<CategoryDto>> GetAllSiblingCategories(string friendlyUrl)
        {
            IEnumerable<CategoryDto> categories;
            try
            {
                categories = _categoryRepository.GetAllSiblingCategories(friendlyUrl);
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            return Ok(categories);
        }

        [HttpGet]
        [Route("~/categorymin/siblingcategories/{friendlyUrl}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<IEnumerable<CategoryMinDto>> GetMinAllSiblingCategories(string friendlyUrl)
        {
            IEnumerable<CategoryMinDto> categories;
            try
            {
                categories = _categoryMinRepository.GetAllSiblingCategories(friendlyUrl);
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            return Ok(categories);
        }

        [HttpGet]
        [Route("~/category/featuredcategories")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<IEnumerable<CategoryDto>> GetFeaturedCategories()
        {
            IEnumerable<CategoryDto> categories;
            try
            {
                categories = _categoryRepository.GetFeaturedCategories();
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            return Ok(categories);
        }

        [HttpGet]
        [Route("~/categorymin/featuredcategories")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<IEnumerable<CategoryMinDto>> GetMinFeaturedCategories()
        {
            IEnumerable<CategoryMinDto> categories;
            try
            {
                categories = _categoryMinRepository.GetFeaturedCategories();
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            return Ok(categories);
        }

        [HttpGet]
        [Route("~/category/{friendlyUrl}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<CategoryDto> Get(string friendlyUrl)
        {
            if (string.IsNullOrWhiteSpace(friendlyUrl))
            {
                return BadRequest();
            }
            CategoryDto category = null;
            try
            {
                category = _categoryRepository.Get(friendlyUrl);
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            if (category == null)
            {
                return NotFound();
            }
            return Ok(category);
        }

        [HttpGet]
        [Route("~/categorymin/{friendlyUrl}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<CategoryMinDto> GetMin(string friendlyUrl)
        {
            if (string.IsNullOrWhiteSpace(friendlyUrl))
            {
                return BadRequest();
            }
            CategoryMinDto category = null;
            try
            {
                category = _categoryMinRepository.Get(friendlyUrl);
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            if (category == null)
            {
                return NotFound();
            }
            return Ok(category);
        }
    }
}

183. Now to update the OnInitializedAsync method in Pages/Index.razor in BlazorCommerce to read:
protected override async Task OnInitializedAsync() {
    var categories = await Http.GetFromJsonAsync<BlazorCommerce.Shared.CategoryDto[]>("category/featuredcategories");
    _heroCategory = categories.SingleOrDefault(cat => cat.CategoryType == 1);
    _smallBannerCategories = categories.Where(cat => cat.CategoryType == 2);
    _midiumBannerCategories = categories.Where(cat => cat.CategoryType == 3);
}
184. Now to update the OnInitializedAsync method in Pages/Category.razor in BlazorCommerce to read:
protected override async Task OnInitializedAsync() {
    _minCategories = await Http.GetFromJsonAsync<IEnumerable<BlazorCommerce.Shared.CategoryMinDto>>($"categorymin/siblingcategories/{friendlyCategoryUrl}");
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate around the website and it should still function as it did, with Hero, Small Banner and Midium Banner categories linking through to the category page and sibling categories should now populate the left hand menu.

185. Next to implement the Best Selling section in the Categories menu on the home page, let's start by extracting the template html and creating a new razor component. In VSCode add a new file called MainCategoriesMenu.razor to the /Shared folder of the BlazorCommerce project
186. Into this file cut and paste the html immediately below @if (AppState.DisplayCategoryMenuInHeaderNav) { and above the closing curly brace from MainLayout.razor
187. In MainLayout.razor in place of the html add the following code:
<MainCategoriesMenu />
188. Next we need to add the data transfer object that will contain the structured data needed. Add a C# class file to BlazorCommerce.Shared called MetaCategoryDto with the following code:
using System.Collections.Generic;

namespace BlazorCommerce.Shared
{
    public class BestSellingMetaCategoryDto
    {
        public int Id {get;set;}
        
        public string Name {get;set;}

        public string FriendlyName {get;set;}

        public string ImageUrl {get;set;}

        public List<CategoryMinDto> BestSellingLeafCategories {get;set;}
    }
}
189. Add a C# class file to BlazorCommerce.Shared called BestSellingCategoriesDto with the following code:
namespace BlazorCommerce.Shared
{
    public class BestSellingCategoriesDto
    {
        public BestSellingMetaCategoryDto Mens {get;set;}
        
        public BestSellingMetaCategoryDto Womens {get;set;}
        
        public BestSellingMetaCategoryDto ChildrenAndBabies {get;set;}
    }
}
190. Add a C# class file to BlazorCommerce.Data called BestSellingCategoriesProductsDto with the following code:
namespace BlazorCommerce.Data
{
    public class BestSellingCategoriesProductsDto
    {
        public int LeafCategoryId {get;set;}
        
        public string LeafCategoryName {get;set;}
        
        public string LeafCategoryFriendlyUrl {get;set;}
        
        public int BranchCategoryId {get;set;}
        
        public string BranchCategoryName {get;set;}
        
        public int MetaCategoryId {get;set;}
        
        public int TotalQuantity {get;set;}
    }
}
191. In CategoryRepository.cs in BlazorCommerce.Data add the following method:
public BestSellingCategoriesDto GetBestSellingCategoriesProducts()
{
    var bestSellingCategoriesDto = new BestSellingCategoriesDto();
    var bestSellingCategoriesProductsDtos = new List<BestSellingCategoriesProductsDto>();

    using (var con = new SqliteConnection(base.ConnectionString))
    {
        con.Open();

        //1. Populate Meta Category data regardless
        string stm = "SELECT * FROM MetaCategories ORDER BY Id;";

        using (var cmd = new SqliteCommand(stm, con))
        {
            using (var rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    int id = rdr.GetInt32(rdr.GetOrdinal("Id"));
                    var metaCategory = new BestSellingMetaCategoryDto {
                        Id = id,
                        Name = rdr.GetString(rdr.GetOrdinal("Name")),
                        FriendlyName = rdr.GetString(rdr.GetOrdinal("FriendlyName")),
                        ImageUrl = rdr.GetString(rdr.GetOrdinal("ImageUrl")),
                        BestSellingLeafCategories = new List<CategoryMinDto>()
                    };

                    switch (id)
                    {
                        case 1:
                            bestSellingCategoriesDto.Womens = metaCategory;
                            break;
                        case 2:
                            bestSellingCategoriesDto.Mens = metaCategory;
                            break;
                        case 3:
                            bestSellingCategoriesDto.ChildrenAndBabies = metaCategory;
                            break;
                    }
                }
            }
        }

        //2. Retrieve best selling categories products
        stm = @"SELECT lc.Id As LeafCategoryId, lc.Name As LeafCategoryName, lc.FriendlyUrl As LeafCategoryFriendlyUrl, bc.Name As BranchCategoryName, mc.Id AS MetaCategoryId, SUM(od.Quantity) AS TotalQuantity
                FROM OrderDetails od
                    INNER JOIN ProductOptionProductInstances popi ON od.ProductOptionProductInstanceId = popi.Id
                    INNER JOIN ProductOptionProducts pop ON popi.ProductOptionProductId = pop.Id
                    INNER JOIN Products p ON pop.ProductId = p.Id
                    INNER JOIN LeafCategories lc ON p.LeafCategoryId = lc.Id
                    INNER JOIN BranchCategories bc ON lc.PrimaryBranchCategoryId = bc.Id
                    INNER JOIN MetaCategories mc ON bc.MetaCategoryId = mc.Id
                GROUP BY lc.Id
                ORDER BY TotalQuantity DESC
                LIMIT 12;";

        using (var cmd = new SqliteCommand(stm, con))
        {
            using (var rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    var bestSellingCategoriesProduct = new BestSellingCategoriesProductsDto();
                    
                    bestSellingCategoriesProduct.LeafCategoryId = rdr.GetInt32(rdr.GetOrdinal("LeafCategoryId"));
                    bestSellingCategoriesProduct.LeafCategoryName = rdr.GetString(rdr.GetOrdinal("LeafCategoryName"));
                    bestSellingCategoriesProduct.LeafCategoryFriendlyUrl = rdr.GetString(rdr.GetOrdinal("LeafCategoryFriendlyUrl"));
                    bestSellingCategoriesProduct.BranchCategoryName = rdr.GetString(rdr.GetOrdinal("BranchCategoryName"));
                    bestSellingCategoriesProduct.MetaCategoryId = rdr.GetInt32(rdr.GetOrdinal("MetaCategoryId"));
                    bestSellingCategoriesProduct.TotalQuantity = rdr.GetInt32(rdr.GetOrdinal("TotalQuantity"));

                    bestSellingCategoriesProductsDtos.Add(bestSellingCategoriesProduct);
                }
            }
        }

        con.Close();

        //3. Populate the Womens best selling categories
        var menscategories = bestSellingCategoriesProductsDtos.Where(bscpd => bscpd.MetaCategoryId == 1);
        if (menscategories.Any())
        {
            foreach (var menscategory in menscategories)
            {
                var bestSellingLeafCategory = new CategoryMinDto
                {
                    Id = menscategory.LeafCategoryId,
                    Name = menscategory.BranchCategoryName + " " + menscategory.LeafCategoryName,
                    FriendlyUrl = menscategory.LeafCategoryFriendlyUrl
                };
                bestSellingCategoriesDto.Womens.BestSellingLeafCategories.Add(bestSellingLeafCategory);
            }
        }

        //4. Populate the Mens best selling categories
        var wommenscategories = bestSellingCategoriesProductsDtos.Where(bscpd => bscpd.MetaCategoryId == 2);
        if (wommenscategories.Any())
        {
            foreach (var wommenscategory in wommenscategories)
            {
                var bestSellingLeafCategory = new CategoryMinDto
                {
                    Id = wommenscategory.LeafCategoryId,
                    Name = wommenscategory.BranchCategoryName + " " + wommenscategory.LeafCategoryName,
                    FriendlyUrl = wommenscategory.LeafCategoryFriendlyUrl
                };
                bestSellingCategoriesDto.Mens.BestSellingLeafCategories.Add(bestSellingLeafCategory);
            }
        }

        //5. Populate the Children and Baby best selling categories
        var childrenandbabycategories = bestSellingCategoriesProductsDtos.Where(bscpd => bscpd.MetaCategoryId == 3);
        if (childrenandbabycategories.Any())
        {
            foreach (var childrenandbabycategory in childrenandbabycategories)
            {
                var bestSellingLeafCategory = new CategoryMinDto
                {
                    Id = childrenandbabycategory.LeafCategoryId,
                    Name = childrenandbabycategory.BranchCategoryName + " " + childrenandbabycategory.LeafCategoryName,
                    FriendlyUrl = childrenandbabycategory.LeafCategoryFriendlyUrl
                };
                bestSellingCategoriesDto.ChildrenAndBabies.BestSellingLeafCategories.Add(bestSellingLeafCategory);
            }
        }
    }

    return bestSellingCategoriesDto;
}
192. In CategoryRepository.cs in BlazorCommerce.Data add the following method:
public BestSellingCategoriesDto GetBestSellingCategoriesProducts()
{
    throw new NotImplementedException();
}
193. Add a new method to IRepository.cs in BlazorCommerce.Data:
BestSellingCategoriesDto GetBestSellingCategoriesProducts();
194. In CategoryController.cs in BlazorCommerce.Data add the following method:
[HttpGet]
[Route("~/category/bestsellingcategories")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public ActionResult<BestSellingCategoriesDto> GetBestSellingCategoriesProducts()
{
    BestSellingCategoriesDto bestSellingCategories = null;
    try
    {
        bestSellingCategories = _categoryRepository.GetBestSellingCategoriesProducts();
    }
    catch
    {
        return new StatusCodeResult(StatusCodes.Status500InternalServerError);
    }
    if (bestSellingCategories == null)
    {
        return NotFound();
    }
    return Ok(bestSellingCategories);
}
195. Add any missing using statements
196. Add an additional style to the css styling block on line 863 of /wwwroot/css/styles.css that reads .header.shop .main-category li .mega-menu .single-menu {
vertical-align: top;
197. At the top of Shared/MainCategoriesMenu.razor in BlazorCommerce add the following code:
@using System.Net.Http
@inject HttpClient Http
198. At the bottom of Shared/MainCategoriesMenu.razor in BlazorCommerce add the following code:
@code {
    private BlazorCommerce.Shared.BestSellingCategoriesDto _bestSellingCategories;

	protected override async Task OnInitializedAsync() {
        _bestSellingCategories = await Http.GetFromJsonAsync<BlazorCommerce.Shared.BestSellingCategoriesDto>("category/bestsellingcategories");
	}
}
199. In Shared/MainCategoriesMenu.razor in BlazorCommerce below the line of html that reads: <li class="main-mega"><a href="#">best selling <i class="fa fa-angle-right" aria-hidden="true"></i></a> add the following code:
@if (_bestSellingCategories != null)
{
200. In Shared/MainCategoriesMenu.razor in BlazorCommerce above the line of html that reads:
</li>
<li><a href="/category/accessories">accessories</a></li>
add the following code:
}
201. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<a href="/category/kids" class="title-link">Shop Kid's</a>
<div class="image">
    <img src="https://via.placeholder.com/225x155" alt="#">
</div>
<div class="inner-link">
    <a href="#">Kids Toys</a>
    <a href="#">Kids Travel Car</a>
    <a href="#">Kids Color Shape</a>
    <a href="#">Kids Tent</a>
</div>
with:
<a href="/metacategory/@_bestSellingCategories.ChildrenAndBabies.FriendlyName" class="title-link">Shop @_bestSellingCategories.ChildrenAndBabies.Name</a>
<div class="image">
    <img src="@_bestSellingCategories.ChildrenAndBabies.ImageUrl" alt="#">
</div>
<div class="inner-link">
    @foreach (var bestSellingCategory in _bestSellingCategories.ChildrenAndBabies.BestSellingLeafCategories)
    {
    <a href="/category/@bestSellingCategory.FriendlyUrl">@bestSellingCategory.Name</a>
    }
</div>
202. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<a href="/category/mens" class="title-link">Shop Men's</a>
<div class="image">
    <img src="https://via.placeholder.com/225x155" alt="#">
</div>
<div class="inner-link">
    <a href="#">Watch</a>
    <a href="#">T-shirt</a>
    <a href="#">Hoodies</a>
    <a href="#">Formal Pant</a>
</div>
with:
<a href="/metacategory/@_bestSellingCategories.Mens.FriendlyName" class="title-link">Shop @_bestSellingCategories.Mens.Name</a>
<div class="image">
    <img src="@_bestSellingCategories.Mens.ImageUrl" alt="#">
</div>
<div class="inner-link">
    @foreach (var bestSellingCategory in _bestSellingCategories.Mens.BestSellingLeafCategories)
    {
    <a href="/category/@bestSellingCategory.FriendlyUrl">@bestSellingCategory.Name</a>
    }
</div>
203. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<a href="/category/womens" class="title-link">Shop Women's</a>
<div class="image">
    <img src="https://via.placeholder.com/225x155" alt="#">
</div>
<div class="inner-link">
    <a href="#">Ladies Shirt</a>
    <a href="#">Ladies Frog</a>
    <a href="#">Ladies Sun Glass</a>
    <a href="#">Ladies Watch</a>
</div>
with:
<a href="/metacategory/@_bestSellingCategories.Womens.FriendlyName" class="title-link">Shop @_bestSellingCategories.Womens.Name</a>
<div class="image">
    <img src="@_bestSellingCategories.Womens.ImageUrl" alt="#">
</div>
<div class="inner-link">
    @foreach (var bestSellingCategory in _bestSellingCategories.Womens.BestSellingLeafCategories)
    {
    <a href="/category/@bestSellingCategory.FriendlyUrl">@bestSellingCategory.Name</a>
    }
</div>
204. The New Arrivals main category menu will now be a link to a new arrivals page rather than have a pop-out. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<li><a href="/category/new-arrivals">New Arrivals <i class="fa fa-angle-right" aria-hidden="true"></i></a>
    <ul class="sub-category">
        <li><a href="/category/new-accessories">accessories</a></li>
        <li><a href="/category/new-sunglasses">sunglasses</a></li>
        <li><a href="/category/new-watches">watches</a></li>
        <li><a href="/category/new-mens">mens</a></li>
        <li><a href="/category/new-ladies">ladies</a></li>
    </ul>
</li>
with:
<li><a href="/new-arrivals">New Arrivals</a></li>
205. The remaining categories in the menu can now be dynamically populated. Add a C# class file to BlazorCommerce.Shared called MenuCategoryDto with the following code:
namespace BlazorCommerce.Shared
{
    public class MenuCategoryDto
    {
        public string Name {get;set;}

        public string FriendlyUrl {get;set;}
    }
}
206. In IRepository.cs in BlazorCommerce.Data add a new method:
List<MenuCategoryDto> GetMenuCategories();
207. In CategoryRepository.cs in BlazorCommerce.Data add a new method:
ublic List<MenuCategoryDto> GetMenuCategories()
{
    var menuCategories = new List<MenuCategoryDto>();

    using (var con = new SqliteConnection(base.ConnectionString))
    {
        con.Open();

        string stm = "SELECT LongName, FriendlyUrl FROM LeafCategories WHERE MenuCategory = 1 LIMIT 8;";

        using (var cmd = new SqliteCommand(stm, con))
        {
            using (var rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    var menuCategory = new MenuCategoryDto();
                    menuCategory.Name = rdr.GetString(rdr.GetOrdinal("LongName"));
                    menuCategory.FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl"));
                    menuCategories.Add(menuCategory);
                }
            }
        }

        con.Close();
    }

    return menuCategories;
}
208. In CategoryMinRepository.cs in BlazorCommerce.Data add a new method:
public List<MenuCategoryDto> GetMenuCategories()
{
    throw new NotImplementedException();
}
209. In Controllers/CategoryController.cs in BlazorCommerce.Api add a new method:
[HttpGet]
[Route("~/category/menucategories")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public ActionResult<List<MenuCategoryDto>> GetMenuCategories()
{
    List<MenuCategoryDto> GetMenuCategories = null;
    try
    {
        GetMenuCategories = _categoryRepository.GetMenuCategories();
    }
    catch
    {
        return new StatusCodeResult(StatusCodes.Status500InternalServerError);
    }
    if (GetMenuCategories == null)
    {
        return NotFound();
    }
    return Ok(GetMenuCategories);
}
210. In Shared/MainCategoriesMenu.razor in BlazorCommerce add a new private member:
private List<MenuCategoryDto> _menuCategories;
211. In Shared/MainCategoriesMenu.razor in BlazorCommerce in the OnInitializedAsync method add a new call to populate the _menuCategories:
_menuCategories = await Http.GetFromJsonAsync<List<MenuCategoryDto>>("category/menucategories");
212. In Shared/MainCategoriesMenu.razor in BlazorCommerce above the line of code that reads: <li><a href="/category/accessories">accessories</a></li> add:
@if (_menuCategories != null)
{
213. In Shared/MainCategoriesMenu.razor in BlazorCommerce change the lines of code that read:
            <li><a href="/categories/shoes">shoes</a></li>
        </ul>
    </div>
</div>
with:
            <li><a href="/categories/shoes">shoes</a></li>
            }
        </ul>
    </div>
</div>
214. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the lines of code that read:
<li><a href="/category/accessories">accessories</a></li>
<li><a href="/category/womens">women's clothes</a></li>
<li><a href="/category/sunglasses">sunglasses</a></li>
<li><a href="/category/watches">watches</a></li>
<li><a href="/category/mens">men's clothes</a></li>
<li><a href="/category/kids-clothes">kids clothes</a></li>
<li><a href="/categories/seasonal">seasonal</a></li>
<li><a href="/categories/shoes">shoes</a></li>
with:
@foreach (var menuCategory in _menuCategories)
{
<li><a href="/category/@menuCategory.FriendlyUrl">@menuCategory.Name</a></li>
}
215. Next is to sort out the Trending Items which will be limited to the three meta categories which will be products that are regularly viewed and limit to 4 rather than 8. To start we will need to add a new class file to BlazorCommerce.Shared called ProductMinDto with the following code:
namespace BlazorCommerce.Shared
{
    public class ProductMinDto : IDataModel
    {
        public int Id {get;set;}

        public string Name {get;set;}

        public string FriendlyUrl {get;set;}

        public decimal Price {get;set;}

        public string TrendingItemImageUrl {get;set;}
    }
}
216. In BlazorCommerce.Shared add a new class file called TrendingProducts with the following code:
using System.Collections.Generic;

namespace BlazorCommerce.Shared
{
    public class TrendingProductsDto
    {
        public List<ProductMinDto> ChildrenAndBabies {get;set;}

        public List<ProductMinDto> Womens {get;set;}

        public List<ProductMinDto> Mens {get;set;}
    }
}
217. In BlazorCommerce.Data add a new class file called ProductMinRepository with the following code:
using System.Collections.Generic;
using BlazorCommerce.Shared;
using Microsoft.Extensions.Options;
using Microsoft.Data.Sqlite;

namespace BlazorCommerce.Data
{
    public class ProductMinRepository : BaseRepository, IRepository<ProductMinDto>
    {
        public ProductMinRepository(IOptions<BlazorCommerce.Data.DatabaseOptions> databaseOptions) : base(databaseOptions) { }

        public ProductMinDto Get(string friendlyUrl)
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<ProductMinDto> GetAllSiblingCategories(string friendlyUrl)
        {
            throw new System.NotImplementedException();
        }

        public BestSellingCategoriesDto GetBestSellingCategoriesProducts()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<ProductMinDto> GetFeaturedCategories()
        {
            throw new System.NotImplementedException();
        }

        public List<MenuCategoryDto> GetMenuCategories()
        {
            throw new System.NotImplementedException();
        }

        public TrendingProductsDto GetTrendingProducts()
        {
            var trendingProducts = new TrendingProductsDto();
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                for (var metaCategoryId = 1; metaCategoryId < 4; metaCategoryId++)
                {
                    var products = new List<ProductMinDto>();
                    string stm = @"SELECT p.Id, p.Title AS Name, p.FriendlyUrl, bc.MetaCategoryId, (popi.Price + round(popi.Price * 0.01 * st.Amount, 2)) AS Price, p.TrendingItemImageUrl, p.NumberOfTimesViewed
                                    FROM ProductOptionProductInstances popi
                                        INNER JOIN ProductOptionProducts pop ON popi.ProductOptionProductId = pop.Id
                                        INNER JOIN ProductOptions po ON pop.ProductOptionId = po.Id
                                        INNER JOIN SalesTaxTypes stt ON po.SalesTaxTypeId = stt.Id
                                        INNER JOIN SalesTaxes st ON stt.Id = st.SalesTaxTypeId
                                        INNER JOIN Products p ON pop.ProductId = p.Id
                                        INNER JOIN LeafCategories lc ON p.LeafCategoryId = lc.Id
                                        INNER JOIN BranchCategories bc ON lc.PrimaryBranchCategoryId = bc.Id
                                    GROUP BY p.Id
                                    HAVING MetaCategoryId = " + metaCategoryId + @"
                                    ORDER BY p.NumberOfTimesViewed DESC
                                    LIMIT 4;";

                    using (var cmd = new SqliteCommand(stm, con))
                    {
                        using (var rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                var product = new ProductMinDto()    
                                {    
                                    Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                    Name = rdr.GetString(rdr.GetOrdinal("Name")),
                                    FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl")),
                                    Price = rdr.GetDecimal(rdr.GetOrdinal("Price")),
                                    TrendingItemImageUrl = rdr.GetString(rdr.GetOrdinal("TrendingItemImageUrl"))
                                };
                                products.Add(product);
                            }
                        }
                    }

                    switch (metaCategoryId)
                    {
                        case 1:
                            trendingProducts.Womens = products;
                            break;
                        case 2:
                            trendingProducts.Mens = products;
                            break;
                        case 3:
                            trendingProducts.ChildrenAndBabies = products;
                            break;
                    }
                }
                con.Close();
            }

            return trendingProducts;
        }
    }
}
218. In IRepository.cs in BlazorCommerce.Data add a new method:
TrendingProductsDto GetTrendingProducts();
219. In CategoryMinRepository.cs and CategoryRepository.cs in BlazorCommerce.Data add a new method:
public TrendingProductsDto GetTrendingProducts()
{
    throw new NotImplementedException();
}
220. In Startup.cs in BlazorCommerce.Api add a line of code to the ConfigureServices method:
services.AddScoped<BlazorCommerce.Data.IRepository<BlazorCommerce.Shared.ProductMinDto>, ProductMinRepository>();
221. In Controllers folder in BlazorCommerce.Api, add a new class file called ProductController and add the following code:
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using BlazorCommerce.Data;
using BlazorCommerce.Shared;

namespace BlazorCommerce.Api.Controllers
{
    [ApiController]
    public class ProductController : ControllerBase
    {
        private readonly ILogger<CategoryController> _logger;
        
        private readonly IRepository<ProductMinDto> _productMinRepository;

        public ProductController(ILogger<CategoryController> logger, IRepository<ProductMinDto> productMinRepository)
        {
            _logger = logger;
            _productMinRepository = productMinRepository;
        }

        [HttpGet]
        [Route("~/product/trendingproducts")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<TrendingProductsDto> GetTrendingProducts()
        {
            TrendingProductsDto trendingProducts;
            try
            {
                trendingProducts = _productMinRepository.GetTrendingProducts();
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            return Ok(trendingProducts);
        }
    }
}
222. In Pages/Index.razor in BlazorCommerce change the line that reads:
<h2>Trending Item</h2>
to:
<h2>Trending Items</h2>
223. In Pages/Index.razor in BlazorCommerce change the lines that read:
<li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#man" role="tab">Man</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#women" role="tab">Woman</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#kids" role="tab">Kids</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#accessories" role="tab">Accessories</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#essential" role="tab">Essential</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#prices" role="tab">Prices</a></li>
to:
<li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#childrenandbabies" role="tab">Children & Babies</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#women" role="tab">Women</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#men" role="tab">Men</a></li>
224. In Pages/Index.razor in BlazorCommerce delete the divs for accessories, essential and prices
225. In the code section of Pages/Index.razor in BlazorCommerce add the following line of code:
private TrendingProductsDto _trendingProducts;
226. In Pages/Index.razor in BlazorCommerce in the OnInitializedAsync method add a new call to populate the _trendingProducts:
_trendingProducts = await Http.GetFromJsonAsync<TrendingProductsDto>("product/trendingproducts");
227. In Pages/Index.razor in BlazorCommerce change the line of html that reads:
<div class="tab-pane fade show active" id="man" role="tabpanel">
to:
<div class="tab-pane fade show active" id="childrenandbabies" role="tabpanel">
228. In Pages/Index.razor in BlazorCommerce under the div for childrenandbabies, delete all the divs below the <div class="row"> and replace with:
@if (_trendingProducts != null)
{
	@foreach (var trendingProduct in _trendingProducts.ChildrenAndBabies)
	{
		<div class="col-xl-3 col-lg-4 col-md-4 col-12">
			<div class="single-product">
				<div class="product-img">
					<a href="/product/@trendingProduct.FriendlyUrl">
						<img class="default-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
						<img class="hover-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
					</a>
					<div class="button-head">
						<div class="product-action">
							<a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
							<a title="Wishlist" href="#"><i class=" ti-heart "></i><span>Add to Wishlist</span></a>
							<a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a>
						</div>
						<div class="product-action-2">
							<a title="Add to cart" href="#">Add to cart</a>
						</div>
					</div>
				</div>
				<div class="product-content">
					<h3><a href="/product/@trendingProduct.FriendlyUrl">@trendingProduct.Name</a></h3>
					<div class="product-price">
						<span>@string.Format("£{0:0.00}", trendingProduct.Price)</span>
					</div>
				</div>
			</div>
		</div>
	}
}
229. In Pages/Index.razor in BlazorCommerce under the div for women, delete all the divs below the <div class="row"> and replace with:
@if (_trendingProducts != null)
{
	@foreach (var trendingProduct in _trendingProducts.Womens)
	{
		<div class="col-xl-3 col-lg-4 col-md-4 col-12">
			<div class="single-product">
				<div class="product-img">
					<a href="/product/@trendingProduct.FriendlyUrl">
						<img class="default-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
						<img class="hover-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
					</a>
					<div class="button-head">
						<div class="product-action">
							<a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
							<a title="Wishlist" href="#"><i class=" ti-heart "></i><span>Add to Wishlist</span></a>
							<a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a>
						</div>
						<div class="product-action-2">
							<a title="Add to cart" href="#">Add to cart</a>
						</div>
					</div>
				</div>
				<div class="product-content">
					<h3><a href="/product/@trendingProduct.FriendlyUrl">@trendingProduct.Name</a></h3>
					<div class="product-price">
						<span>@string.Format("£{0:0.00}", trendingProduct.Price)</span>
					</div>
				</div>
			</div>
		</div>
	}
}
230. In Pages/Index.razor in BlazorCommerce change the line of html that reads:
<div class="tab-pane fade" id="kids" role="tabpanel">
to:
<div class="tab-pane fade" id="men" role="tabpanel">
231. In Pages/Index.razor in BlazorCommerce under the div for men, delete all the divs below the <div class="row"> and replace with:
@if (_trendingProducts != null)
{
	@foreach (var trendingProduct in _trendingProducts.Mens)
	{
		<div class="col-xl-3 col-lg-4 col-md-4 col-12">
			<div class="single-product">
				<div class="product-img">
					<a href="/product/@trendingProduct.FriendlyUrl">
						<img class="default-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
						<img class="hover-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
					</a>
					<div class="button-head">
						<div class="product-action">
							<a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
							<a title="Wishlist" href="#"><i class=" ti-heart "></i><span>Add to Wishlist</span></a>
							<a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a>
						</div>
						<div class="product-action-2">
							<a title="Add to cart" href="#">Add to cart</a>
						</div>
					</div>
				</div>
				<div class="product-content">
					<h3><a href="/product/@trendingProduct.FriendlyUrl">@trendingProduct.Name</a></h3>
					<div class="product-price">
						<span>@string.Format("£{0:0.00}", trendingProduct.Price)</span>
					</div>
				</div>
			</div>
		</div>
	}
}
232. Now we need to fix the breadcrumb on the category page, so that the meta category is shown. Create a new class file in BlazorCommerce.Shared called MetaCategoryMinDto and add the following code:
namespace BlazorCommerce.Shared
{
    public class MetaCategoryMinDto
    {
        public string Name {get;set;}

        public string FriendlyUrl {get;set;}
    }
}
233. Add a reference to MetaCategoryMinDto in CategoryDto in BlazorCommerce.Shared:
public MetaCategoryMinDto MetaCategory {get;set;}
234. This new property needs to be populated so it can be used in the breadcrumbs. In CategoryRepository in BlazorCommerce.Data alter the sql statement in the Get method to read:
string stm = "SELECT lc.*, mc.Name AS MetaCategoryName, mc.FriendlyName FROM LeafCategories lc INNER JOIN BranchCategories bc ON lc.PrimaryBranchCategoryId = bc.Id INNER JOIN MetaCategories mc ON bc.MetaCategoryId = mc.Id WHERE lc.FriendlyUrl = '" + friendlyUrl + "';";
235. In CategoryRepository in BlazorCommerce.Data add the following lines of code below the line of code that reads ActionButtonText = rdr.IsDBNull(rdr.GetOrdinal("ActionButtonText")) ? null : rdr.GetString(rdr.GetOrdinal("ActionButtonText")), :
MetaCategory = new MetaCategoryMinDto
{
    Name = rdr.GetString(rdr.GetOrdinal("MetaCategoryName")),
    FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyName"))
}
236. In Pages/Category.razor in BlazorCommerce we need to update the breadcrumb section. Add the following code above the line of code that reads <li class="active"><a href="category/@_category.FriendlyUrl">@_category.Name</a></li>
<li><a href="metacategory/@_category.MetaCategory.FriendlyUrl">@_category.MetaCategory.Name</a><i class="ti-arrow-right"></i></li>
237. Next we need to display the products associated with the leaf category. Create a new class file in BlazorCommerce.Shared called CategoryProductDto and add the following code:
namespace BlazorCommerce.Shared
{
    public class CategoryProductDto
    {
        public int ProductId {get;set;}

        public string Name {get;set;}
        
        public decimal Price {get;set;}

        public string CategoryImageUrl {get;set;}

        public string CategoryHoverImageUrl {get;set;}

        public string FriendlyUrl {get;set;}
    }
}
238. Create a new class file in BlazorCommerce.Data called SalesTax and add the following code:
namespace BlazorCommerce.Data
{
    public class SalesTax
    {
        public int SalesTaxTypeId {get;set;}

        public decimal Amount {get;set;}
    }
}
239. Add the following code to ProductMinRepository.cs in BlazorCommerce.Data:
public IEnumerable<CategoryProductDto> GetProductsByLeafCategoryId(int leafCategoryId)
{
    var categoryProducts = new List<CategoryProductDto>();
    using (var con = new SqliteConnection(base.ConnectionString))
    {
        con.Open();

        string stm = $"SELECT Id, Title, CategoryImageUrl, CategoryHoverImageUrl, FriendlyUrl FROM Products WHERE LeafCategoryId = {leafCategoryId};";
        using (var cmd = new SqliteCommand(stm, con))
        {
            using (var rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    var categoryProduct = new CategoryProductDto
                    {    
                        ProductId = rdr.GetInt32(rdr.GetOrdinal("Id")),
                        Name = rdr.GetString(rdr.GetOrdinal("Title")),
                        CategoryImageUrl = rdr.GetString(rdr.GetOrdinal("CategoryImageUrl")),
                        CategoryHoverImageUrl = rdr.GetString(rdr.GetOrdinal("CategoryHoverImageUrl")),
                        FriendlyUrl = rdr.GetString(rdr.GetOrdinal("FriendlyUrl"))
                    };
                    categoryProducts.Add(categoryProduct);
                }
            }
        }

        var salesTaxes = new List<SalesTax>();
        stm = "SELECT SalesTaxTypeId, Amount FROM SalesTaxes WHERE EffectiveFromDate <= strftime ('%s', 'now') AND (EffectiveToDate IS NULL OR EffectiveToDate > strftime ('%s', 'now'));";
        using (var cmd = new SqliteCommand(stm, con))
        {
            using (var rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    var salesTax = new SalesTax
                    {    
                        SalesTaxTypeId = rdr.GetInt32(rdr.GetOrdinal("SalesTaxTypeId")),
                        Amount = rdr.GetDecimal(rdr.GetOrdinal("Amount"))
                    };
                    salesTaxes.Add(salesTax);
                }
            }
        }

        foreach (var categoryProduct in categoryProducts)
        {
            stm = @"SELECT po.SalesTaxTypeId, Max(popi.Price) As MaxPrice
                    FROM Products p
                        INNER JOIN ProductOptionProducts pop ON p.Id = pop.ProductId
                        INNER JOIN ProductOptionProductInstances popi ON pop.Id = popi.ProductOptionProductId
                        INNER JOIN ProductOptions po ON pop.ProductOptionId = po.Id
                    WHERE p.Id = " + categoryProduct.ProductId;
            using (var cmd = new SqliteCommand(stm, con))
            {
                using (var rdr = cmd.ExecuteReader())
                {
                    while (rdr.Read())
                    {
                        var salesTaxTypeId = rdr.GetInt32(rdr.GetOrdinal("SalesTaxTypeId"));
                        var amount = rdr.GetDecimal(rdr.GetOrdinal("MaxPrice"));
                        var salesTaxAmount = salesTaxes.First(st => st.SalesTaxTypeId == salesTaxTypeId).Amount;
                        categoryProduct.Price = Math.Round(amount + (amount * 0.01m * salesTaxAmount), 2, MidpointRounding.AwayFromZero);
                    }
                }
            }
        }

        con.Close();
    }

    return categoryProducts;
}
240. Add the following method to IRepository.cs in BlazorCommerce.Data:
IEnumerable<CategoryProductDto> GetProductsByLeafCategoryId(int leafCategoryId);
241. In CategoryMinRepository.cs and CategoryRepository.cs in BlazorCommerce.Data add a new method:
public IEnumerable<CategoryProductDto> GetProductsByLeafCategoryId(int leafCategoryId)
{
    throw new NotImplementedException();
}
242. Add the following code to Controllers/ProductController.cs in BlazorCommerce.Api:
[HttpGet]
[Route("~/product/categoryproducts/{leafCategoryId}")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public ActionResult<IEnumerable<CategoryProductDto>> GetProductsByLeafCategoryId(int leafCategoryId)
{
    IEnumerable<CategoryProductDto> categoryProducts;
    try
    {
        categoryProducts = _productMinRepository.GetProductsByLeafCategoryId(leafCategoryId);
    }
    catch
    {
        return new StatusCodeResult(StatusCodes.Status500InternalServerError);
    }
    return Ok(categoryProducts);
}
243. In the code section of Pages/Category.razor in BlazorCommerce add the following line of code:
private IEnumerable<BlazorCommerce.Shared.CategoryProductDto> _categoryProducts;
244. In the OnParametersSetAsync method in Pages/Category.razor in BlazorCommerce add the following line of code:
_categoryProducts = await Http.GetFromJsonAsync<IEnumerable<BlazorCommerce.Shared.CategoryProductDto>>($"product/categoryproducts/{_category.Id}");
245. In Pages/Category.razor in BlazorCommerce replace the html that reads:
        <!--/ End Shop Top -->
    </div>
</div>
<div class="row">
    <div class="col-lg-4 col-md-6 col-12">
with:
        <!--/ End Shop Top -->
    </div>
</div>
<div class="row">
    @if (_categoryProducts != null)
    {
    <div class="col-lg-4 col-md-6 col-12">
246. In Pages/Category.razor in BlazorCommerce replace the html that reads:
                    </div>
                </div>
            </div>
        </div>
     </div>
</section>
<!--/ End Product Style 1  -->
with:
                    </div>
                    }
                </div>
            </div>
        </div>
     </div>
</section>
<!--/ End Product Style 1  -->
247. In Pages/Category.razor in BlazorCommerce delete all divs with <div class="col-lg-4 col-md-6 col-12">
248. In Pages/Category.razor in BlazorCommerce within @if (_categoryProducts != null) add the following code:
@foreach(var categoryProduct in _categoryProducts)
{
<div class="col-lg-4 col-md-6 col-12">
    <div class="single-product">
        <div class="product-img">
            <a href="/product/@categoryProduct.FriendlyUrl"><img class="default-img" src="@categoryProduct.CategoryImageUrl" alt="#"> <img class="hover-img" src="@categoryProduct.CategoryHoverImageUrl" alt="#"></a>
            <div class="button-head">
                <div class="product-action"><a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class="ti-eye"></i><span>Quick Shop</span></a> <a title="Wishlist" href="#"><i class="ti-heart"></i><span>Add to Wishlist</span></a> <a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a></div>
                <div class="product-action-2"><a title="Add to cart" href="#">Add to cart</a></div>
            </div>
        </div>
        <div class="product-content">
            <h3><a href="/product/@categoryProduct.FriendlyUrl">@categoryProduct.Name</a></h3>
            <div class="product-price"><span>@string.Format("£{0:0.00}", categoryProduct.Price)</span></div>
        </div>
    </div>
</div>
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, click on a category and the product associated with that category should now appear on the category page.

249. Now to make the details dynamic on the product page. Create a new class file in BlazorCommerce.Shared called ProductOptionDto and add the following code:
namespace BlazorCommerce.Shared
{
    public class ProductOptionDto
    {
        public int Id {get;set;}
        
        public int ProductOptionProductInstanceId {get;set;}
        
        public string Option {get;set;}
        
        public int Stock {get;set;}
        
        public decimal Price {get;set;}
    }
}
250. Create a new class file in BlazorCommerce.Shared called ProductDto and add the following code:
using System.Collections.Generic;

namespace BlazorCommerce.Shared
{
    public class ProductDto : IDataModel
    {
        public int Id {get;set;}

        public string Title {get;set;}

        public string Sku {get;set;}

        public int ProductOptionProductInstanceId {get;set;}
        
        public int ProductOptionId {get;set;}
        
        public string Option {get;set;}
        
        public string ProductOptionType {get;set;}

        public int Stock {get;set;}

        public decimal Price {get;set;}

        public string SupplierManufacturer {get;set;}

        public string MainImageUrl {get;set;}

        public string MainImageThumbnailUrl {get;set;}

        public string SecondImageUrl {get;set;}

        public string SecondImageThumbnailUrl {get;set;}

        public string ThirdImageUrl {get;set;}

        public string ThirdImageThumbnailUrl {get;set;}

        public string FourthImageUrl {get;set;}

        public string FourthImageThumbnailUrl {get;set;}

        public string BriefDescription {get;set;}

        public string FullDescription {get;set;}
        
        public string LeafCategory {get;set;}
        
        public string LeafCategoryFriendlyUrl {get;set;}
        
        public string MetaCategory {get;set;}
        
        public string MetaCategoryFriendlyUrl {get;set;}

        public List<ProductOptionDto> ProductOptions {get;set;}

        public List<string> Features {get;set;}
    }
}
251. Create a new class file in BlazorCommerce.Data called ProductRepository and add the following code:
using System;
using System.Collections.Generic;
using System.Linq;
using BlazorCommerce.Shared;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Options;

namespace BlazorCommerce.Data
{
    public class ProductRepository : BaseRepository, IRepository<ProductDto>
    {
        public ProductRepository(IOptions<BlazorCommerce.Data.DatabaseOptions> databaseOptions) : base(databaseOptions) { }

        public ProductDto Get(string friendlyUrl)
        {
            var product = new ProductDto();
            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                string stm = @"SELECT p.Id, p.Title, p.Sku, p.MainImageUrl, p.MainImageThumbnailUrl, p.SecondImageUrl, p.SecondImageThumbnailUrl, p.ThirdImageUrl,
                               p.ThirdImageThumbnailUrl, p.FourthImageUrl, p.FourthImageThumbnailUrl, p.BriefDescription, p.FullDescription,
                               sm.Name AS SupplierManufacturer, lc.Name AS LeafCategory, lc.FriendlyUrl AS LeafCategoryFriendlyUrl,
                               mc.Name AS MetaCategory, mc.FriendlyName AS MetaCategoryFriendlyUrl, pot.Name AS ProductOptionType
                               FROM Products p
                                   INNER JOIN SupplierManufacturers sm ON p.SupplierManufacturerId = sm.Id
                                   INNER JOIN LeafCategories lc ON p.LeafCategoryId = lc.Id
                                   INNER JOIN BranchCategories bc ON lc.PrimaryBranchCategoryId = bc.Id
                                   INNER JOIN MetaCategories mc ON bc.MetaCategoryId = mc.Id
                                   INNER JOIN ProductOptionTypes pot on p.ProductOptionTypeId = pot.Id
                               WHERE p.FriendlyUrl = '" + friendlyUrl + "';";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            product.Id = rdr.GetInt32(rdr.GetOrdinal("Id"));
                            product.Title = rdr.GetString(rdr.GetOrdinal("Title"));
                            product.Sku = rdr.GetString(rdr.GetOrdinal("Sku"));
                            product.MainImageUrl = rdr.GetString(rdr.GetOrdinal("MainImageUrl"));
                            product.MainImageThumbnailUrl = rdr.GetString(rdr.GetOrdinal("MainImageThumbnailUrl"));
                            product.SecondImageUrl = rdr.GetString(rdr.GetOrdinal("SecondImageUrl"));
                            product.SecondImageThumbnailUrl = rdr.GetString(rdr.GetOrdinal("SecondImageThumbnailUrl"));
                            product.ThirdImageUrl = rdr.GetString(rdr.GetOrdinal("ThirdImageUrl"));
                            product.ThirdImageThumbnailUrl = rdr.GetString(rdr.GetOrdinal("ThirdImageThumbnailUrl"));
                            product.FourthImageUrl = rdr.GetString(rdr.GetOrdinal("FourthImageUrl"));
                            product.FourthImageThumbnailUrl = rdr.GetString(rdr.GetOrdinal("FourthImageThumbnailUrl"));
                            product.BriefDescription = rdr.GetString(rdr.GetOrdinal("BriefDescription"));
                            product.FullDescription = rdr.GetString(rdr.GetOrdinal("FullDescription"));
                            product.SupplierManufacturer = rdr.GetString(rdr.GetOrdinal("SupplierManufacturer"));
                            product.LeafCategory = rdr.GetString(rdr.GetOrdinal("LeafCategory"));
                            product.LeafCategoryFriendlyUrl = rdr.GetString(rdr.GetOrdinal("LeafCategoryFriendlyUrl"));
                            product.MetaCategory = rdr.GetString(rdr.GetOrdinal("MetaCategory"));
                            product.MetaCategoryFriendlyUrl = rdr.GetString(rdr.GetOrdinal("MetaCategoryFriendlyUrl"));
                            product.ProductOptionType = rdr.GetString(rdr.GetOrdinal("ProductOptionType"));
                        }
                    }
                }

                var salesTaxes = new List<SalesTax>();
                stm = "SELECT SalesTaxTypeId, Amount FROM SalesTaxes WHERE EffectiveFromDate <= strftime ('%s', 'now') AND (EffectiveToDate IS NULL OR EffectiveToDate > strftime ('%s', 'now'));";
                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var salesTax = new SalesTax
                            {    
                                SalesTaxTypeId = rdr.GetInt32(rdr.GetOrdinal("SalesTaxTypeId")),
                                Amount = rdr.GetDecimal(rdr.GetOrdinal("Amount"))
                            };
                            salesTaxes.Add(salesTax);
                        }
                    }
                }
                
                var productOptions = new List<ProductOptionDto>();
                stm = @"SELECT po.Id, popi.Id AS ProductOptionProductInstanceId, po.Option, po.SalesTaxTypeId, pop.Stock, popi.Price
                        FROM Products p
                            INNER JOIN ProductOptionProducts pop ON p.Id = pop.ProductId
                            INNER JOIN ProductOptionProductInstances popi ON pop.Id = popi.ProductOptionProductId
                            INNER JOIN ProductOptions po ON pop.ProductOptionId = po.Id
                        WHERE p.Id = " + product.Id + @"
                            AND EffectiveFromDate <= strftime ('%s', 'now')
                            AND (EffectiveToDate IS NULL OR EffectiveToDate > strftime ('%s', 'now'))";
                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var amount = rdr.GetDecimal(rdr.GetOrdinal("Price"));
                            var salesTaxTypeId = rdr.GetInt32(rdr.GetOrdinal("SalesTaxTypeId"));
                            var salesTaxAmount = salesTaxes.First(st => st.SalesTaxTypeId == salesTaxTypeId).Amount;
                            var productOption = new ProductOptionDto
                            {    
                                Id = rdr.GetInt32(rdr.GetOrdinal("Id")),
                                ProductOptionProductInstanceId = rdr.GetInt32(rdr.GetOrdinal("ProductOptionProductInstanceId")),
                                Option = rdr.GetString(rdr.GetOrdinal("Option")),
                                Stock = rdr.GetInt32(rdr.GetOrdinal("Stock")),
                                Price = Math.Round(amount + (amount * 0.01m * salesTaxAmount), 2, MidpointRounding.AwayFromZero)
                            };
                            productOptions.Add(productOption);
                        }
                    }
                }
                product.ProductOptions = productOptions;
                var mostExpensiveProductOption = productOptions.OrderByDescending(po => po.Price).First();
                product.ProductOptionId = mostExpensiveProductOption.Id;
                product.ProductOptionProductInstanceId = mostExpensiveProductOption.ProductOptionProductInstanceId;
                product.Stock = mostExpensiveProductOption.Stock;
                product.Price = mostExpensiveProductOption.Price;
                product.Option = mostExpensiveProductOption.Option;

                var productFeatures = new List<string>();
                stm = "SELECT pf.Feature FROM ProductFeatures pf INNER JOIN Products p ON pf.ProductId = p.Id WHERE p.Id = " + product.Id + ";";
                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            productFeatures.Add(rdr.GetString(rdr.GetOrdinal("Feature")));
                        }
                    }
                }
                product.Features = productFeatures;
                
                con.Close();
            }
            
            return product;
        }

        public IEnumerable<ProductDto> GetAllSiblingCategories(string friendlyUrl)
        {
            throw new System.NotImplementedException();
        }

        public BestSellingCategoriesDto GetBestSellingCategoriesProducts()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<ProductDto> GetFeaturedCategories()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<MenuCategoryDto> GetMenuCategories()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<CategoryProductDto> GetProductsByLeafCategoryId(int leafCategoryId)
        {
            throw new System.NotImplementedException();
        }

        public TrendingProductsDto GetTrendingProducts()
        {
            throw new System.NotImplementedException();
        }
    }
}
252. In the ConfigureServices method in Startup.cs in BlazorCommerce.Api add the following line of code:
services.AddScoped<BlazorCommerce.Data.IRepository<BlazorCommerce.Shared.ProductDto>, ProductRepository>();
253. In Controllers/ProductController.cs in BlazorCommerce.Api add a member:
private readonly IRepository<ProductDto> _productRepository;
254. In Controllers/ProductController.cs in BlazorCommerce.Api update the constructor so that it reads:
public ProductController(ILogger<CategoryController> logger, IRepository<ProductMinDto> productMinRepository, IRepository<ProductDto> productRepository)
{
    _logger = logger;
    _productMinRepository = productMinRepository;
    _productRepository = productRepository;
}
255. In Controllers/ProductController.cs in BlazorCommerce.Api add a new method:
[HttpGet]
[Route("~/product/{friendlyUrl}")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public ActionResult<ProductDto> Get(string friendlyUrl)
{
    ProductDto product;
    try
    {
        product = _productRepository.Get(friendlyUrl);
    }
    catch
    {
        return new StatusCodeResult(StatusCodes.Status500InternalServerError);
    }
    return Ok(product);
}
256. In Pages/Product.razor in BlazorCommerce add the following code to the top of the file below the AppState:
@using System.Net.Http
@inject HttpClient Http
257. In Pages/Product.razor in BlazorCommerce add the following line of code to the @code section:
private BlazorCommerce.Shared.ProductDto _product;

protected override async Task OnParametersSetAsync()
{
    _product = await Http.GetFromJsonAsync<BlazorCommerce.Shared.ProductDto>($"product/{friendlyProductUrl}");
}
258. In Pages/Product.razor in BlazorCommerce change the line of html that reads:
<li class="active"><a href="blog-single.html">Shop Details</a></li>
to:
@if (_product != null)
{
<li><a href="metacategory/@_product.MetaCategoryFriendlyUrl">@_product.MetaCategory</a><i class="ti-arrow-right"></i></li>
<li><a href="category/@_product.LeafCategoryFriendlyUrl">@_product.LeafCategory</a><i class="ti-arrow-right"></i></li>
<li class="active"><a href="product/@friendlyProductUrl">@_product.Title</a></li>
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate to a product and the breadcrumb should be updated accordingly

259. In Pages/Product.razor in BlazorCommerce change the lines of html that read:
<!-- Product Slider -->
<div class="product-gallery">
    <!-- Images slider -->
    <div class="flexslider-thumbnails">
        <ul class="slides">
            <li data-thumb="https://via.placeholder.com/570x520" rel="adjustX:10, adjustY:">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
            <li data-thumb="https://via.placeholder.com/570x520">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
            <li data-thumb="https://via.placeholder.com/570x520">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
            <li data-thumb="https://via.placeholder.com/570x520">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
        </ul>
    </div>
    <!-- End Images slider -->
</div>
<!-- End Product slider -->
with:
<!-- Product Slider -->
<div class="product-gallery">
    <!-- Images slider -->
    <div class="flexslider-thumbnails">
        <ul class="slides">
            @if (_product != null)
            {
                <li data-thumb="@_product.MainImageThumbnailUrl" rel="adjustX:10, adjustY:">
                    <img src="@_product.MainImageUrl" alt="#">
                </li>
                @if (!string.IsNullOrEmpty(_product.SecondImageUrl))
                {
                <li data-thumb="@_product.SecondImageThumbnailUrl">
                    <img src="@_product.SecondImageUrl" alt="#">
                </li>
                }
                @if (!string.IsNullOrEmpty(_product.ThirdImageUrl))
                {
                <li data-thumb="@_product.ThirdImageThumbnailUrl">
                    <img src="@_product.ThirdImageUrl" alt="#">
                </li>
                }
                @if (!string.IsNullOrEmpty(_product.FourthImageUrl))
                {
                <li data-thumb="@_product.FourthImageThumbnailUrl">
                    <img src="@_product.FourthImageUrl" alt="#">
                </li>
                }
            }
        </ul>
    </div>
    <!-- End Images slider -->
</div>
<!-- End Product slider -->
260. To get the Javascript features (including the flex slider) it needs to be triggered manually because the html isn't rendered until after the jquery document.ready event. To do this requires using a feature of Blazor known as JSInterop.
Javascript methods can be called from C# code (and vice-versa). In wwwroot/index.html in BlazorCommerce add the following code to the bottom of the file just above the closing body tag:
<script>
function setLayoutFeatures() {
	$('.menu').slicknav({
		prependTo:".mobile-nav",
		duration:300,
		animateIn: 'fadeIn',
		animateOut: 'fadeOut',
		closeOnClick:true,
	});
	jQuery(window).on('scroll', function() {
		if ($(this).scrollTop() > 200) {
			$('.header').addClass("sticky");
		} else {
			$('.header').removeClass("sticky");
		}
	});
}
function setFlexSlider() {
	$('.flexslider-thumbnails').flexslider({
		animation: "slide",
		controlNav: "thumbnails",
	});
}
function setProductPageQuantityCounter() {
	$('.btn-number').click(function(e) {
		e.preventDefault();
		fieldName = $(this).attr('data-field');
		type = $(this).attr('data-type');
		var input = $("input[name='" + fieldName + "']");
		var currentVal = parseInt(input.val());
		if (!isNaN(currentVal)) {
			if (type == 'minus') {
				if (currentVal > input.attr('data-min')) {
					input.val(currentVal - 1).change();
					if (currentVal - 1 < input.attr('data-max')) {
						$(".btn-number[data-type='plus'][data-field='" + fieldName + "']").removeAttr('disabled');
					}
				}
				if (parseInt(input.val()) == input.attr('data-min')) {
					$(this).attr('disabled', true);
				}
			} else if (type == 'plus') {
				if (currentVal < input.attr('data-max')) {
					input.val(currentVal + 1).change();
					if (currentVal + 1 > input.attr('data-min')) {
						$(".btn-number[data-type='minus'][data-field='" + fieldName + "']").removeAttr('disabled');
					}
				}
				if (parseInt(input.val()) == input.attr('data-max')) {
					$(this).attr('disabled', true);
				}
			}
		} else {
			input.val(0);
		}
	});
	$('.input-number').focusin(function() {
		$(this).data('oldValue', $(this).val());
	});
	$('.input-number').change(function() {
		minValue = parseInt($(this).attr('data-min'));
		maxValue = parseInt($(this).attr('data-max'));
		valueCurrent = parseInt($(this).val());
		name = $(this).attr('name');
		if (valueCurrent >= minValue) {
			$(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
		} else {
			alert('Sorry, the minimum value was reached');
			$(this).val($(this).data('oldValue'));
		}
		if (valueCurrent <= maxValue) {
			$(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
		} else {
			alert('Sorry, the maximum value was reached');
			$(this).val($(this).data('oldValue'));
		}
	});
	$(".input-number").keydown(function(e) {
		// Allow: backspace, delete, tab, escape, enter and .
		if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 || // Allow: Ctrl+A
		(e.keyCode == 65 && e.ctrlKey === true) || // Allow: home, end, left, right
		(e.keyCode >= 35 && e.keyCode <= 39)) {
			// let it happen, don't do anything
			return;
		}
		// Ensure that it is a number and stop the keypress
		if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
			e.preventDefault();
		}
	});
}
</script>
261. In Pages/Product.razor in BlazorCommerce add the following below the line of code that reads @inject HttpClient Http :
@inject IJSRuntime JSRuntime
262. In Pages/Product.razor in BlazorCommerce add the following method to the @code:
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    await JSRuntime.InvokeVoidAsync("setFlexSlider");
    if (firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setProductPageQuantityCounter");
    }
}
263. In Shared/MainLayout.razor in BlazorCommerce add the following below the line of code that reads @inject HttpClient Http :
@inject IJSRuntime JSRuntime
264. In Shared/MainLayout.razor in BlazorCommerce add the following method to the @code:
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    await JSRuntime.InvokeVoidAsync("setLayoutFeatures");
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate to a product and the flex slider should now be working and rendered correctly

265. In Pages/Product.razor in BlazorCommerce replace the html:
<h4>Nonstick Dishwasher PFOA</h4>
with:
@if (_product != null)
{
<h4>@_product.Title</h4>
}
266. In Pages/Product.razor in BlazorCommerce replace the html:
<p class="price"><span class="discount">$70.00</span><s>$80.00</s></p>
<p class="description">eget velit. Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl, in</p>
with:
@if (_product != null)
{
<p class="price"><span class="discount">@string.Format("£{0:0.00}", _product.Price)</span></p>
<p class="description">@_product.BriefDescription</p>
}
267. In Pages/Product.razor in BlazorCommerce replace the html that reads:
<input type="text" name="quant[1]" class="input-number" data-min="1" data-max="1000" value="1">
with:
@if (_product != null)
{
<input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@_product.Stock" value="1">
}
268. In Pages/Product.razor in BlazorCommerce replace the html that reads:
<p class="cat">Category :<a href="#">Clothing</a></p>
<p class="availability">Availability : 180 Products In Stock</p>
with:
@if (_product != null)
{
<p class="cat">Category :<a href="category/@_product.LeafCategoryFriendlyUrl">@string.Concat(_product.MetaCategory, " ", _product.LeafCategory)</a></p>
<p class="availability">Availability : @_product.Stock Products In Stock</p>
}
269. In Pages/Product.razor in BlazorCommerce replace the html that reads:
<li>long established fact.</li>
<li>has a more-or-less normal distribution.</li>
<li>lmany variations of passages of.</li>
<li>generators on the Interne.</li>
with:
@if (_product != null)
{
    @foreach (var feature in _product.Features)
    {
    <li>@feature</li>
    }
}
270. In Pages/Product.razor in BlazorCommerce change the html that reads:
<!-- Color -->
<div class="color">
    <h4>Available Options <span>Color</span></h4>
    <ul>
        <li><a href="#" class="one"><i class="ti-check"></i></a></li>
        <li><a href="#" class="two"><i class="ti-check"></i></a></li>
        <li><a href="#" class="three"><i class="ti-check"></i></a></li>
        <li><a href="#" class="four"><i class="ti-check"></i></a></li>
    </ul>
</div>
<!--/ End Color -->
<!-- Size -->
<div class="size">
    <h4>Size</h4>
    <ul>
        <li><a href="#" class="one">S</a></li>
        <li><a href="#" class="two">M</a></li>
        <li><a href="#" class="three">L</a></li>
        <li><a href="#" class="four">XL</a></li>
        <li><a href="#" class="four">XXL</a></li>
    </ul>
</div>
<!--/ End Size -->
to:
<!--/ End Description -->
@if (_product != null && _product.ProductOptionType != "N/A")
{
<!-- Product Options -->
<div class="color"><h4>Available Options</h4></div>
<div class="size">
    <h4>@_product.ProductOptionType</h4>
    <ul>
        @{
            int counter = 1;
            string[] ones = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twentyone", "twentytwo", "twentythree", "twentyfour", "twentyfive"};
        
        foreach (var productOption in _product.ProductOptions)
        {
        <li><a href="#" class="@ones[counter - 1]">@productOption.Option</a></li>
            counter++;
        }
        }
    </ul>
</div>
<!--/ Product Options -->
}
271. In wwwroot/css/style.css, find the style definition for:
.shop.single .product-des .size ul li a
and delete the width setting and add
padding-left: 4px;
padding-right: 4px;
272. Add a new method in the @code section of BlazorCommerce/Pages/Product.razor to conduct the string replacements __p__ and __cp__ to opening and closing paragraph tags:
protected string DoPlaceholderReplacements(string source)
{
	return source.Replace("__p__", "<p>").Replace("__cp__", "</p><br>");
}
273. In Pages/Product.razor in BlazorCommerce change the html that reads:
<div class="tab-pane fade show active" id="description" role="tabpanel">
    <div class="tab-single">
        <div class="row">
            <div class="col-12">
                <div class="single-des">
                    <p>simply dummy text .....
                </div>
                <div class="single-des">
                    <p>Suspendisse consequatur .....
                </div>
to:
<div class="tab-pane fade show active" id="description" role="tabpanel">
    <div class="tab-single">
        <div class="row">
            <div class="col-12">
                @if (_product != null)
                {
                <div class="single-des">
                    @((MarkupString)DoPlaceholderReplacements(_product.FullDescription))
                </div>
                }
274. In wwwroot/css/style.css, find the style definition for:
.shop.single .product-des .color
and delete the display: inline-block setting
275. Every time someone visits a product page, the number of times view counter in the database needs to increase by 1. In ProductRepository in BlazorCommerce.Data add a new method:
public void IncrementNumberOfTimesViewed(string friendlyUrl)
{
    using (var con = new SqliteConnection(base.ConnectionString))
    {
        con.Open();

        string stm = "UPDATE Products SET NumberOfTimesViewed = NumberOfTimesViewed + 1 WHERE FriendlyUrl = '" + friendlyUrl + "';";

        using (var cmd = new SqliteCommand(stm, con))
        {
            cmd.ExecuteNonQuery();
        }
        
        con.Close();
    }
} 
276. Add the following method to IRepository.cs in BlazorCommerce.Data:
void IncrementNumberOfTimesViewed(string friendlyUrl);
277. In CategoryMinRepository.cs and CategoryRepository.cs and ProductMinRepository.cs in BlazorCommerce.Data add a new method:
public void IncrementNumberOfTimesViewed(string friendlyUrl)
{
    throw new NotImplementedException();
}
278. In Controllers/ProductController.cs in BlazorCommerce.Api add a new method:
[HttpPost]
[Route("~/product/incrementnumberoftimesviewed/{friendlyUrl}")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public ActionResult IncrementNumberOfTimesViewed(string friendlyUrl)
{
    try
    {
        _productRepository.IncrementNumberOfTimesViewed(friendlyUrl);
    }
    catch
    {
        return new StatusCodeResult(StatusCodes.Status500InternalServerError);
    }
    return Ok();
}
279. In Pages/Product.razor in BlazorCommerce add the following code to the OnParametersSetAsync method:
await Http.PostAsync($"product/incrementnumberoftimesviewed/{friendlyProductUrl}", null);
280. Before we can implement the Add to Cart functionality, we need to generate a cookie for the cart id, register it in the database and load any existing cart items from the database. Add the following JavaScript methods to the bottom of the page just before the closing </script> tag in wwwroot/index.html in BlazorCommerce:
function setCartCookie(cvalue) {
	const cname = "cartid";
	const exdays = 365;
	var d = new Date();
	d.setTime(d.getTime() + (exdays*24*60*60*1000));
	const expires = "expires="+ d.toUTCString();
	document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}
function getCartCookie() {
	const cname = "cartid";
	const name = cname + "=";
	var decodedCookie = decodeURIComponent(document.cookie);
	var ca = decodedCookie.split(';');
	for (var i = 0; i <ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
}
281. Add the following code to OnAfterRenderAsync of Shared/MainLayout.razor in BlazorCommerce to read or generate the cart id cookie:
protected override async Task OnAfterRenderAsync(bool firstRender)
{
	if (firstRender)
	{
		await JSRuntime.InvokeVoidAsync("setLayoutFeatures");
		var cartId = await JSRuntime.InvokeAsync<string>("getCartCookie");
		if (string.IsNullOrEmpty(cartId))
		{
			cartId = System.Guid.NewGuid().ToString();
			await JSRuntime.InvokeVoidAsync("setCartCookie", cartId);
		}
	}
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, open the developer tools and take a look at the cookies, the cartid cookie will be there

282. We need to add code to retrieve the cart and its contents from the database. Create a new class file in BlazorCommerce.Shared called CartItemMinDto and add the following code: 
namespace BlazorCommerce.Shared
{
    public class CartItemMinDto
    {
	public int ProductOptionProductInstanceId {get;set;}

        public int Quantity {get;set;}

        public decimal TotalAmount {get;set;}

        public string CartThumbnailImageUrl {get;set;}

        public string ProductName {get;set;}
    }
}
283. Create a new class file in BlazorCommerce.Shared called CartMinDto and add the following code: 
using System.Collections.Generic;

namespace BlazorCommerce.Shared
{
    public class CartMinDto : IDataModel
    {
        public int Id {get;set;}

        public string Guid {get;set;}

        public List<CartItemMinDto> CartItems {get;set;}
    }
}
284. Create a new class file in BlazorCommerce.Data called CartMinRepository and add the following code:
using System;
using System.Collections.Generic;
using System.Linq;
using BlazorCommerce.Shared;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Options;

namespace BlazorCommerce.Data
{
    public class CartMinRepository : BaseRepository, IRepository<CartMinDto>
    {
        public CartMinRepository(IOptions<BlazorCommerce.Data.DatabaseOptions> databaseOptions) : base(databaseOptions) { }

        public CartMinDto Get(string friendlyUrl)
        {
            var cart = new CartMinDto();

            using (var con = new SqliteConnection(base.ConnectionString))
            {
                con.Open();

                int? cartId = null;

                string stm = $"SELECT Id FROM Carts WHERE Guid = '{friendlyUrl}' LIMIT 1;";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    object cartIdObj = cmd.ExecuteScalar();
                    if (cartIdObj != null)
                    {
                        if (int.TryParse(cartIdObj.ToString(), out int result))
                        {
                            cartId = result;
                        }
                    }
                }

                if (cartId == null || cartId.Value == 0)
                {
                    stm = $"INSERT INTO Carts (Guid, CreatedDateTime) VALUES ('{friendlyUrl}', strftime ('%s', 'now'));";

                    using (var cmd = new SqliteCommand(stm, con))
                    {
                        cmd.ExecuteNonQuery();
                    }

                    stm = $"SELECT Id FROM Carts WHERE Guid = '{friendlyUrl}' LIMIT 1;";

                    using (var cmd = new SqliteCommand(stm, con))
                    {
                        object cartIdObj = cmd.ExecuteScalar();
                        if (cartIdObj != null)
                        {
                            if (int.TryParse(cartIdObj.ToString(), out int result))
                            {
                                cartId = result;
                            }
                        }
                    }
                }

                cart.Id = cartId.Value;
                cart.Guid = friendlyUrl;

                var cartItems = new List<CartItemMinDto>();

                stm = $"SELECT ProductOptionProductInstanceId, Quantity FROM CartItems WHERE CartId = {cartId.Value};";
                using (var cmd = new SqliteCommand(stm, con))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var cartItem = new CartItemMinDto();
                            cartItem.ProductOptionProductInstanceId = rdr.GetInt32(rdr.GetOrdinal("ProductOptionProductInstanceId"));
                            cartItem.Quantity = rdr.GetInt32(rdr.GetOrdinal("Quantity"));
                            cartItems.Add(cartItem);
                        }
                    }
                }

                if (cartItems.Any())
                {
                    var salesTaxes = new List<SalesTax>();
                    stm = "SELECT SalesTaxTypeId, Amount FROM SalesTaxes WHERE EffectiveFromDate <= strftime ('%s', 'now') AND (EffectiveToDate IS NULL OR EffectiveToDate > strftime ('%s', 'now'));";
                    using (var cmd = new SqliteCommand(stm, con))
                    {
                        using (var rdr = cmd.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                var salesTax = new SalesTax
                                {    
                                    SalesTaxTypeId = rdr.GetInt32(rdr.GetOrdinal("SalesTaxTypeId")),
                                    Amount = rdr.GetDecimal(rdr.GetOrdinal("Amount"))
                                };
                                salesTaxes.Add(salesTax);
                            }
                        }
                    }

                    foreach (var cartItem in cartItems)
                    {
                        stm = @"SELECT popi.Price, P.Title, p.CartThumbnailImageUrl, po.SalesTaxTypeId
                                FROM ProductOptionProductInstances popi
                                    INNER JOIN ProductOptionProducts pop ON popi.ProductOptionProductId = pop.Id
                                    INNER JOIN Products p ON pop.ProductId = p.Id
                                    INNER JOIN ProductOptions po ON pop.ProductOptionId = po.Id
                                WHERE popi.Id = " + cartItem.ProductOptionProductInstanceId + ";";
                        using (var cmd = new SqliteCommand(stm, con))
                        {
                            using (var rdr = cmd.ExecuteReader())
                            {
                                while (rdr.Read())
                                {
                                    cartItem.CartThumbnailImageUrl = rdr.GetString(rdr.GetOrdinal("CartThumbnailImageUrl"));
                                    cartItem.ProductName = rdr.GetString(rdr.GetOrdinal("Title"));
                                    var amount = rdr.GetDecimal(rdr.GetOrdinal("Price"));
                                    var salesTaxTypeId = rdr.GetInt32(rdr.GetOrdinal("SalesTaxTypeId"));
                                    var salesTaxAmount = salesTaxes.First(st => st.SalesTaxTypeId == salesTaxTypeId).Amount;
                                    cartItem.TotalAmount = Math.Round(amount + (amount * 0.01m * salesTaxAmount), 2, MidpointRounding.AwayFromZero) * cartItem.Quantity;
                                }
                            }
                        }
                    }
                }

                cart.CartItems = cartItems;

                con.Close();
            }

            return cart;
        }

        public IEnumerable<CartMinDto> GetAllSiblingCategories(string friendlyUrl)
        {
            throw new System.NotImplementedException();
        }

        public BestSellingCategoriesDto GetBestSellingCategoriesProducts()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<CartMinDto> GetFeaturedCategories()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<MenuCategoryDto> GetMenuCategories()
        {
            throw new System.NotImplementedException();
        }

        public IEnumerable<CategoryProductDto> GetProductsByLeafCategoryId(int leafCategoryId)
        {
            throw new System.NotImplementedException();
        }

        public TrendingProductsDto GetTrendingProducts()
        {
            throw new System.NotImplementedException();
        }

        public void IncrementNumberOfTimesViewed(string friendlyUrl)
        {
            throw new System.NotImplementedException();
        }
    }
}
285. In the ConfigureServices method in Startup.cs in BlazorCommerce.Api add the following line of code:
services.AddScoped<BlazorCommerce.Data.IRepository<BlazorCommerce.Shared.CartMinDto>, CartMinRepository>();
286. Create a new class file in the Controllers folder in BlazorCommerce.Data called CartController and add the following code:
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using BlazorCommerce.Data;
using BlazorCommerce.Shared;

namespace BlazorCommerce.Api.Controllers
{
    [ApiController]
    public class CartController : ControllerBase
    {
        private readonly ILogger<CategoryController> _logger;
        
        private readonly IRepository<CartMinDto> _cartMinRepository;

        public CartController(ILogger<CategoryController> logger, IRepository<CartMinDto> cartMinRepository)
        {
            _logger = logger;
            _cartMinRepository = cartMinRepository;
        }

        [HttpGet]
        [Route("~/cartmin/{cartid}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<CartMinDto> GetMin(string cartId)
        {
            CartMinDto cart;
            try
            {
                cart = _cartMinRepository.Get(cartId);
            }
            catch
            {
                return new StatusCodeResult(StatusCodes.Status500InternalServerError);
            }
            return Ok(cart);
        }
    }
}
287. In Shared/MainLayout.razor in BlazorCommerce, just below the line that reads @inject IJSRuntime JSRuntime
add:
@using System.Net.Http
@using System.Linq
@inject HttpClient Http
288. In the @code section of Shared/MainLayout.razor in BlazorCommerce add:
private CartMinDto _cart;
289. In Shared/MainLayout.razor in BlazorCommerce, in the OnAfterRenderAsync method at the end of the if (firstRender) clause add:
_cart = await Http.GetFromJsonAsync<CartMinDto>($"cartmin/{cartId}");
StateHasChanged();
290. In Shared/MainLayout.razor in BlazorCommerce, above the html that reads <div class="sinlge-bar shopping">
add:
@if (_cart != null)
{
291. In Shared/MainLayout.razor in BlazorCommerce, change the code that reads:
		<!--/ End Shopping Item -->
	</div>
</div>
to:
		<!--/ End Shopping Item -->
	</div>
	}
</div>
292. In Shared/MainLayout.razor in BlazorCommerce, replace from <div class="sinlge-bar shopping"> to its closing </div> with:
<div class="sinlge-bar shopping">
	<a href="/cart" class="single-icon"><i class="ti-bag"></i>
	@if (_cart.CartItems.Count() > 0)
	{
		<span class="total-count">@_cart.CartItems.Sum(ci => ci.Quantity)</span>
	}
	</a>
	<!-- Shopping Item -->
	<div class="shopping-item">
		<div class="dropdown-cart-header">
			@if (_cart.CartItems.Count() > 0)
			{
			<span>@_cart.CartItems.Sum(ci => ci.Quantity) @string.Format("Item{0}", _cart.CartItems.Sum(ci => ci.Quantity) != 1 ? "s" : string.Empty)</span>
			}
			<a href="/cart">View Cart</a>
		</div>
		<ul class="shopping-list">
			@foreach (var cartItem in _cart.CartItems)
			{
			<li>
				<a href="#" class="remove" title="Remove this item"><i class="fa fa-remove"></i></a>
				<a class="cart-img" href="#"><img src="@cartItem.CartThumbnailImageUrl" alt="#"></a>
				<h4><a href="#">@cartItem.ProductName</a></h4>
				<p class="quantity">@cartItem.Quantity x - <span class="amount">@string.Format("£{0:0.00}", cartItem.TotalAmount)</span></p>
			</li>
			}
		</ul>
		<div class="bottom">
			<div class="total">
				<span>Total</span>
				<span class="total-amount">@string.Format("£{0:0.00}", _cart.CartItems.Sum(c => c.TotalAmount))</span>
			</div>
			<a href="checkout.html" class="btn animate">Checkout</a>
		</div>
	</div>
	<!--/ End Shopping Item -->
</div>
293. In wwwroot/css/styles.css in BlazorCommerce, under the style: .shop.single .product-des .size ul li a:hover
add:
.shop.single .product-des .size ul li button {
	display: block;
	height: 30px;
	border: 1px solid #5C2D91;
	text-align: center;
	line-height: 30px;
	font-size: 14px;
	padding-left: 4px;
	padding-right: 4px;
	background-color: #eee;
	color: #000;
	margin-bottom: 4px;
}
.shop.single .product-des .size ul li button.selected{
	color: #eee;
	background-color: #5C2D91;
}
294. In the @code section of Pages/Product.razor in BlazorCommerce add the following:
[Parameter]
public int ProductOptionProductInstanceId { get; set; }

[Parameter]
public string ProductPrice { get; set; }

[Parameter]
public int ProductStock {get;set;}

[Parameter]
public int ProductQuantity {get;set;}
295. In the OnParametersSetAsync method of Pages/Product.razor in BlazorCommerce add the following:
ProductOptionProductInstanceId = _product.ProductOptionProductInstanceId;
ProductPrice = string.Format("£{0:0.00}", _product.Price);
ProductStock = _product.Stock;
ProductQuantity = 1;
296. In Pages/Product.razor in BlazorCommerce replace the line of code that reads <p class="price"><span class="discount">@string.Format("£{0:0.00}", _product.Price)</span></p> with:
<p class="price"><span class="discount">@ProductPrice</span></p>
297. In Pages/Product.razor in BlazorCommerce under the line of code that reads <p class="description">@_product.BriefDescription</p>
add:
<input id="selectedProductOptionProductInstanceId" type="hidden" @bind="ProductOptionProductInstanceId" />
298. In Pages/Product.razor in BlazorCommerce replace the line of code that reads <input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@_product.Stock" value="1"> with:
<input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@ProductStock" value="@ProductQuantity">
299. In Pages/Product.razor in BlazorCommerce replace the line of code that reads <p class="availability">Availability : @_product.Stock Products In Stock</p> with:
<p class="availability">Availability : @ProductStock Products In Stock</p>
300. In the @code section of Pages/Product.razor in BlazorCommerce add the following method:
private void UpdateSelectedProductOption(int productOptionProductInstanceId, decimal productPrice, int productStock)
{
    ProductOptionProductInstanceId = productOptionProductInstanceId;
    ProductPrice = string.Format("£{0:0.00}", productPrice);
    ProductStock = productStock;
    ProductQuantity = 1;
}
301. Now to be able to add products to the cart from the product page. In Pages/Product.razor in BlazorCommerce, change the line that reads:
<ul>
    @{
        int counter = 1;
        string[] ones = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twentyone", "twentytwo", "twentythree", "twentyfour", "twentyfive"};
    
    foreach (var productOption in _product.ProductOptions)
    {
    <li><a href="#" class="@ones[counter - 1]">@productOption.Option</a></li>
        counter++;
    }
    }
</ul>
to:
<ul>
    @foreach (var productOption in _product.ProductOptions)
    {
    <li><button @onclick="() => UpdateSelectedProductOption(productOption.ProductOptionProductInstanceId, productOption.Price, productOption.Stock)" class='@string.Format("{0}", productOption.ProductOptionProductInstanceId == _product.ProductOptionProductInstanceId ? "selected" : string.Empty)'>@productOption.Option</button></li>
    }
</ul>
302. In the @code section of Pages/Product.razor in BlazorCommerce add the following methods:
private void DecrementQuantity()
{
    if (ProductQuantity <= 1)
    {
        ProductQuantity = 1;
    }
    else
    {
        ProductQuantity--;
    }
}

private void IncrementQuantity()
{
    if (ProductQuantity >= ProductStock)
    {
        ProductQuantity = ProductStock;
    }
    else
    {
        ProductQuantity++;
    }
}
303. In Pages/Product.razor in BlazorCommerce replace the code that reads:
<!-- Input Order -->
<div class="input-group">
    <div class="button minus">
        <button type="button" class="btn btn-primary btn-number" disabled="disabled" data-type="minus" data-field="quant[1]">
            <i class="ti-minus"></i>
        </button>
    </div>
    @if (_product != null)
    {
    <input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@ProductStock" value="@ProductQuantity">
    }
    <div class="button plus">
        <button type="button" class="btn btn-primary btn-number" data-type="plus" data-field="quant[1]">
            <i class="ti-plus"></i>
        </button>
    </div>
</div>
<!--/ End Input Order -->
with:
<!-- Input Order -->
<div class="input-group">
    <div class="button minus">
        <button type="button" class="btn btn-primary btn-number" @onclick="() => DecrementQuantity()">
            <i class="ti-minus"></i>
        </button>
    </div>
    @if (_product != null)
    {
    <input type="text" class="input-number" readonly value="@ProductQuantity">
    }
    <div class="button plus">
        <button type="button" class="btn btn-primary btn-number" @onclick="() => IncrementQuantity()">
            <i class="ti-plus"></i>
        </button>
    </div>
</div>
<!--/ End Input Order -->
304. In the OnAfterRenderAsync method in Pages/Product.razor in BlazorCommerce, delete the code that reads:
if (firstRender)
{
    await JSRuntime.InvokeVoidAsync("setProductPageQuantityCounter");
}
305. In wwwroot/index.html in BlazorCommerce delete the setProductPageQuantityCounter JavaScript method as this is no longer required
306. In CartMinRepository.cs in BlazorCommerce.Data add the following method:
public void AddItemToCart(string cartGuid, int productOptionProductInstanceId, int quantity)
{
    using (var con = new SqliteConnection(base.ConnectionString))
    {
        con.Open();

        int cartId = 0;

        string stm = $"SELECT Id FROM Carts WHERE Guid = '{cartGuid}' LIMIT 1;";

        using (var cmd = new SqliteCommand(stm, con))
        {
            object cartIdObj = cmd.ExecuteScalar();
            if (cartIdObj != null)
            {
                if (int.TryParse(cartIdObj.ToString(), out int result))
                {
                    cartId = result;
                }
            }
        }

        if (cartId != 0)
        {
            stm = $"SELECT Quantity FROM CartItems WHERE cartId = {cartId} AND ProductOptionProductInstanceId = {productOptionProductInstanceId};";
            int existingQuantity = 0;

            using (var cmd = new SqliteCommand(stm, con))
            {
                object quantityObj = cmd.ExecuteScalar();
                if (quantityObj != null)
                {
                    if (int.TryParse(quantityObj.ToString(), out int result))
                    {
                        existingQuantity = result;
                    }
                }
            }

            if (existingQuantity == 0)
            {
                stm = $"INSERT INTO CartItems (CartId, ProductOptionProductInstanceId, Quantity) VALUES ({cartId}, {productOptionProductInstanceId}, {quantity});";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    cmd.ExecuteNonQuery();
                }
            }
            else
            {
                stm = $"UPDATE CartItems SET Quantity = {quantity + existingQuantity} WHERE CartId = {cartId} AND ProductOptionProductInstanceId = {productOptionProductInstanceId};";

                using (var cmd = new SqliteCommand(stm, con))
                {
                    cmd.ExecuteNonQuery();
                }
            }
        }

        con.Close();
    }
}
307. Add the following method to IRepository.cs in BlazorCommerce.Data:
void AddItemToCart(string cartGuid, int productOptionProductInstanceId, int quantity);
308. In CategoryMinRepository.cs, CategoryRepository.cs, ProductMinRepository.cs and ProductRepository.cs in BlazorCommerce.Data add a new method:
public void AddItemToCart(string cartGuid, int productOptionProductInstanceId, int quantity)
{
    throw new NotImplementedException();
}
309. Create a new class file in BlazorCommerce.Shared called AddItemToCartDto and add the following code:
namespace BlazorCommerce.Shared
{
    public class AddItemToCartDto
    {
        public string CartGuid {get;set;}

        public int ProductOptionProductInstanceId {get;set;}
        
        public int Quantity {get;set;}
    }
}
310. In Controllers/CartController.cs in BlazorCommerce.Api add a new method:
[HttpPost]
[Route("~/cart/additemtocart")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public ActionResult AddItemToCart(AddItemToCartDto cartItem)
{
    try
    {
        _cartMinRepository.AddItemToCart(cartItem.CartGuid, cartItem.ProductOptionProductInstanceId, cartItem.Quantity);
    }
    catch
    {
        return new StatusCodeResult(StatusCodes.Status500InternalServerError);
    }
    return Ok();
}
311. In the @code section of Pages/Product.razor in BlazorCommerce add the following methods:
private async Task AddItemToCart()
{
    var cartItem = new AddItemToCartDto{
        CartGuid = await JSRuntime.InvokeAsync<string>("getCartCookie"),
        ProductOptionProductInstanceId = ProductOptionProductInstanceId,
        Quantity = ProductQuantity
    };
    await Http.PostAsJsonAsync("cart/additemtocart", cartItem);
}
312. In Pages/Product.razor in BlazorCommerce replace the code that reads:
<a href="#" class="btn">Add to cart</a>
with:
<button class="btn" @onclick="AddItemToCart">Add to cart</button>
313. Now we need to notify MainLayout.razor to re-render so that the cart is updated. Change the AddItemToCart() method in Pages/Product.razor to public.
314. Add an additional line of code at the bottom of the AddItemToCart() method in Pages/Product.razor:
await JSRuntime.InvokeVoidAsync("notifyUpdateToCart");
315. In wwwroot/index.html add a new JavaScript method:
var GLOBAL = {};
GLOBAL.DotNetReference = null;
GLOBAL.SetDotnetReference = function (pDotNetReference) {
	GLOBAL.DotNetReference = pDotNetReference;
};

function notifyUpdateToCart() {
	GLOBAL.DotNetReference.invokeMethodAsync('TriggerUpdateToCart');
}
316. In Shared/MainLayout.razor in BlazorCommerce add the following methods:
protected override async Task OnInitializedAsync()
{
	var lDotNetReference = DotNetObjectReference.Create(this);
	await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
}

[JSInvokable("TriggerUpdateToCart")]
public async Task TriggerUpdateToCart()
{
	var cartId = await JSRuntime.InvokeAsync<string>("getCartCookie");
	_cart = await Http.GetFromJsonAsync<CartMinDto>($"cartmin/{cartId}");
	StateHasChanged();
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate to a product page and add a product to the cart, take a look at the top of the page and the number of items in the cart has increased



https://www.freelogodesign.org
https://webassembly.org/
https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-5.0
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly
https://blazor-university.com/components/render-trees/
https://stackoverflow.com/questions/62954461/the-assembly-does-not-contain-a-public-invokable-method-with-jsinvokableattribu
https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-5.0
https://www.syncfusion.com/faq/how-do-you-create-a-cookie-in-the-client-side-of-blazor
https://auth0.com/blog/securing-blazor-webassembly-apps/
https://lisuto.com/4-tips-for-the-winning-ecommerce-site-category-structure/
https://www.c-sharpcorner.com/article/repository-pattern-with-ado-net-in-mvc/
https://zetcode.com/csharp/sqlite/
https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-sln
https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new
https://docs.microsoft.com/en-us/dotnet/standard/data/sqlite/?tabs=netcore-cli
https://stackoverflow.com/questions/15292880/create-sqlite-database-and-table
https://www.c-sharpcorner.com/UploadFile/ranjancse/net-co-introduction-to-microsoft-data-sqlite/
https://www.developersoapbox.com/connecting-to-a-sqlite-database-using-net-core/
https://code-maze.com/blazor-webassembly-httpclient/
