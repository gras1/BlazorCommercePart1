https://github.com/gras1/BlazorCommercePart1
Build simple e-commerce website using Blazor

1. This project will be called Blazor Commerce

2. Created a website logo using https://www.freelogodesign.org and save it to your computer, be sure to name it logo.png

3. Open Visual Studio Code

4. Open a Terminal Window

5. type cd\ to go back to root and then cd in to the projects folder

6. type "md BlazorCommerce" and hit return to create the project folder, then cd in to this folder

7. type "dotnet new blazorwasm -f net5.0 -o BlazorCommerce"

8. We will explore the contents of this by opening the folder in VSCode, say 'yes' if you get a prompt to add missing required assets to build
 and debug in VSCode which will create a .vscode folder

9. We can see what this Blazor template looks like by typing dotnet run in the Terminal Window
[when finished press Ctrl+C to stop the website running]
 , we will be using an e-commerce website template

10. The final version will be based on an e-commerce template which I purchased from wpthemesgrid.com
https://wpthemesgrid.com/downloads/eshop-ecommerce-html5-template/
[demonstrate home, Shop Grid, Shop Single, update shopping cart]

11. Create an images folder under wwwroot and move the Blazor Commerce logo in to it

12. Now we start butchering the website in favour of the template. Start by removing the contents of the wwwroot/css folder and put the
 contents from the template css folder in it

13. Delete the sample-data folder

14. Add a js folder to wwwroot and copy all the template javascript files in to it
[mention that ultimately we will reference CDN versions of the JavaScript files]

15. Replace the <head> section in wwwroot/index.html - with the <head> section from the template/index.html leaving the <div id="app"> ,
 <div id="blazor-error-ui"> and <script src="_framework/blazor.webassembly.js"></script>
[from the DOCTYPE declaration down to and including the <link rel="stylesheet" href="css/responsive.css">]

16. Add a class of "js" to the body tag

17. Be sure to add <base href="/" /> in the <head> section in wwwroot/index.html otherwise site navigation doesn't work
[replace the duplicated meta http-equiv tag]

18. under the <script src="_framework/blazor.webassembly.js"></script> add the javascript references from the template/index.html

19. Replace the Loading... in wwwroot/index.html with the preloader div and its contents from template/index.html

20. Remove the contents of Shared/MainLayout.razor leaving the @inherits and @Body

21. Copy the rest of the content out of template/index.html in to Shared/MainLayout.razor, delete the free-version-banner section
[from <!-- Header --> to <!-- /End Footer Area -->]

22. In the shared folder delete MainLayout.razor.css, NavMenu.razor, NavMenu.razor.css and SurveyPrompt.razor

23. Delete the content of pages/index.razor except for the @page directive

24. In Shared/MainLayout.razor "cut" the content of Slider Area to End Shop Blog and "paste" it into pages/index.razor below the @page directive

25. Move the @body directive in Shared/MainLayout.razor to between the <!--/ End Header --> and <!-- Start Shop Services Area --> html comments

26. In the pages folder delete Counter.razor and FetchData.razor

27. Copy style.css from the root of the template folder to wwwroot/css

28. Update wwwroot/index.html of the line that reads:
<link rel="stylesheet" href="style.css">
to: <link rel="stylesheet" href="css/style.css">

29. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
Structurally the website is coming along and requires a few tweaks to the styling. Namely replacing the orange colour with the purple colour of the logo.

30. We need to replace the dominant orange colour with the purple colour of the logo, in wwwroot/style.css replace all instances of the color: #f7941d and #f6931d with #5C2D91

31. Create a fonts folder in wwwroot and then copy the contents of the template/fonts folder in to it

32. In the Pages folder create a new file called Category.razor

33. At the top of Pages/Category.razor put the code from "1. Category.razor snippet.txt"
[The friendlyCategoryUrl passed in on the url is stored in the parameter. Note that values passed in this way must be set as public Parameters]

34. From the shop-grid.html page in the template copy the content between the lines that read:
<!-- Breadcrumbs -->
and:
<!--/ End Product Style 1  -->
then paste it after the @page directive and before the @code section

35. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
Flick between the index page and the /category/test, the Category drop down menu is obscuring the breadcrumb and the categories menu

36. To manage the different header navigation layouts, after extensive research and lots of trial and error we need to use state by means
 of NotifyStateChanged. In the BlazorCommerce root folder, create a new file called AppState.cs with the contents from the file "2. AppState snippet.txt"

37. This will need to be injected in to the application in Program.cs add:
builder.Services.AddScoped<AppState>();
above the line that reads:
await builder.Build().RunAsync();

38. In Shared/MainLayout.razor add the following immediately below @inherits LayoutComponentBase
@inject AppState AppState
@implements IDisposable

39. In Shared/MainLayout.razor change the code that reads:
<div class="cat-nav-head">
	<div class="row">
		<div class="col-lg-3">
			<div class="all-category">
to:
<div class="cat-nav-head">
	<div class="row">
		@if (AppState.DisplayCategoryMenuInHeaderNav)
		{
		<div class="col-lg-3">
			<div class="all-category">

40. In Shared/MainLayout.razor change the code that reads:
                    </div>
                </div>
                <div class="col-lg-9 col-12">
                    <div class="menu-area">
to:
                    </div>
                </div>
		}
                <div class="col-lg-9 col-12">
                    <div class="menu-area">

41. At the bottom of Shared/MainLayout.razor add the code from "3. MainLayout.razor StateHasChanged snippet.txt"

42. In Shared/MainLayout.razor change the code that reads:
                    </div>
                </div>
		}
                <div class="col-lg-9 col-12">
                    <div class="menu-area">
to: 
                    </div>
                </div>
                }
                <div class='@GetMenuAreaContainerClass() col-12'>
                    <div class="menu-area">

43. At the top of Pages/Category.razor just under the line that reads: @inherits LayoutComponentBase
add:
@inject AppState AppState

44. At the bottom of Pages/Category.razor in the @code section add the code from "4. Category.razor SetParametersAsync snippet.txt"

45. In all razor files, replace <a href="index1.html"> and <a href="index.html"> with <a href="/">

46. In Shared/MainLayout.razor change the line of code that reads:
<li class="active"><a href="#">Home<i class="ti-angle-down"></i></a>
with:
<li class="active"><a href="/">Home<i class="ti-angle-down"></i></a>

47. Delete from wwwroot/index.html the line that reads:
<script src="js/jquery-migrate-3.0.0.js"></script>
and delete jquery-migrate-3.0.0.js from the wwwroot/js folder

48. In wwwroot/index.html replace all the JavaScript "js" folder references just above the closing body tag with CDN references,
 copy and paste from "5. JavaScript CDN References snippet.txt"

49. Delete the following files from the wwwroot/js folder leaving only active.js:
jquery.min.js
jquery-ui.min.js
popper.min.js
bootstrap.min.js
flex-slider.js
nicesellect.js
waypoints.min.js
slicknav.min.js
easing.js
finalcountdown.js
scrollup.js
owl-carousel.js
magnific-popup.js
onepage-nav.min.js
facnybox.min.js
gmap.min.js
map-script.js
ytplayer.min.js
colors.js

50. At the top of Pages/Index.razor just under the line that reads: @page "/"
add:
@inject AppState AppState

51. At the bottom of Pages/Index.razor add the code from "6. Index.razor SetParametersAsync snippet.txt"

52. In wwwroot/index.html replace all the Stylesheet "css" folder references within the head tag with CDN references,
 copy and paste from "7. StyleSheet CDN References snippet.txt"

53. Delete the following files from the wwwroot/css folder:
color folder
bootstrap.css
magnific-popup.css
magnific-popup.min.css
jquery.ui.css
jquery.fancybox.min.css
nice-select.css
niceselect.css
font-awesome.css
animate.css
flex-slider.min.css
owl-carousel.css
slicknav.min.css

54. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000 or https://localhost:5001
If you go to the home page the category menu is visible but isn't if you go to /category/test. Notice as you scroll down the page the header
 is no longer fixed at the web page - don't worry this will be fixed later.

55. Create a new file in the Pages folder called Product.razor

56. The category menu shouldn't be displayed on this page, go ahead and copy the code from "8. Initial code for Product.razor snippet.txt"

57. From the shop-single.html page in the template, copy the content between the lines that read:
<!-- Breadcrumbs -->
and:
<!-- End Most Popular Area -->
then paste it after @inject AppState AppState and before the @code section in Pages/Product.razor

58. In Pages/Product.razor replace the lines that read:
<li><a href="index1.html">Home<i class="ti-arrow-right"></i></a></li>
with:
<li><a href="/">Home<i class="ti-arrow-right"></i></a></li>

59. To view the changes, in the Terminal Window type
dotnet run
In a browser go to http://localhost:5000/product/test or https://localhost:5001/product/test
to see what this page looks like, you will notice that the image slider isn't working correctly, we'll fix this later

60. Now we will populate these pages dynamically, in the Terminal window go up one level to the BlazorCommerce root folder, then type:
dotnet new classlib -f net5.0 -n BlazorCommerce.Data

61. Now we will populate these pages dynamically, in the Terminal window go up one level to the BlazorCommerce root folder, then type:
dotnet new classlib -f net5.0 -n BlazorCommerce.Shared

62. For now, we will use a SQLite database for rapid prototyping, cd in to the BlazorCommerce.Data folder, then type:
dotnet add package Microsoft.Data.Sqlite
dotnet add package Microsoft.Extensions.Options

63. in the Terminal window go up one level to the Blazor Commerce root folder, then type:
dotnet new console -f net5.0 -n BlazorCommerce.DbSetup

64. in the Terminal window cd in to the BlazorCommerce.DbSetup folder, then type:
dotnet add package Microsoft.Data.Sqlite

65. in the Terminal window go up one level to the Blazor Commerce root folder, then type:
dotnet new webapi -f net5.0 -n BlazorCommerce.Api

66. now we are going to create a solution file, in the Terminal window type:
dotnet new sln --name BlazorCommerce.sln

67. using "9. Solution File Project References snippet.txt" we are going to add project references to the solution file,
 in the Terminal window type:
dotnet sln add ./BlazorCommerce/BlazorCommerce.csproj
dotnet sln add ./BlazorCommerce.Api/BlazorCommerce.Api.csproj
dotnet sln add ./BlazorCommerce.Data/BlazorCommerce.Data.csproj
dotnet sln add ./BlazorCommerce.DbSetup/BlazorCommerce.DbSetup.csproj
dotnet sln add ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj

68. using "10. Inter Project References snippet.txt" we are going to add the inter project references, in the Terminal window type:
dotnet add ./BlazorCommerce/BlazorCommerce.csproj reference ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj
dotnet add ./BlazorCommerce.Data/BlazorCommerce.Data.csproj reference ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj
dotnet add ./BlazorCommerce.Api/BlazorCommerce.Api.csproj reference ./BlazorCommerce.Data/BlazorCommerce.Data.csproj ./BlazorCommerce.Shared/BlazorCommerce.Shared.csproj

69. Open the file Program.cs in BlazorCommerce.DbSetup project folder and overwrite the contents with the code from "11. Program.cs snippet.txt"
 This code generates the final version of the database, I did debate whether to build the database up bit-by-bit. It can be run and re-run at any time

70. To create the database, in the Terminal window in to the BlazorCommerce.DbSetup folder, then type:
dotnet run
This will create/overwrite the database in the BlazorCommerce.Data folder
[Take people through how the database is constructed and how it is populated]

71. I decided that the data layer implement the Repository pattern, but in the end it wasn't the right decision mainly because 
 the resulting code ended up failing the "I" of SOLID principals (interface segregation), but time was against me and I didn't want to
 re-write the implementation steps at this stage - for Part 2. Also whilst I was rehearsing it became apparent that I wouldn't have the time
 to go through every step of getting the database and API and SQLite setup whilst the focus should be on Blazor. So for now delete the
 class1.cs files in BlazorCommerce.Shared and BlazorCommerce.Data, delete the WeatherForecast.cs file in BlazorCommerce.Api and
 delete the WeatherForecastController.cs file in BlazorCommerce.Api/Controllers folder

72. From the Code Snippets folder copy the BlazorCommerce.Shared folder and overwrite the BlazorCommerce.Shared folder and its contents

73. From the Code Snippets folder copy the BlazorCommerce.Data folder and overwrite the BlazorCommerce.Data folder and its contents

74. From the Code Snippets folder copy the BlazorCommerce.Api folder and overwrite the BlazorCommerce.Api folder and its contents
[Take folks through the code, point out the CORs settings in Startup.cs]

75. We need to check that the Api runs correctly, can connect to the database and returns results. In the Terminal window go to
 the BlazorCommerce.Api folder and type:
dotnet run
Open a browser and go to https://localhost:5005/category/featuredcategories

75. We are going to make the Hero category on the Home page of the website dynamic. In BlazorCommerce/Program.cs the HttpClient
 registration needs to be altered so that it reads:
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri("https://localhost:5005/")});

76. In BlazorCommerce/Pages/Index.razor, just below the line that reads @inject AppState AppState
add:
@using System.Net.Http
@inject HttpClient Http

77. In the @code section of BlazorCommerce/Pages/Index.razor add a new private member, this will be used to populate the "hero" category:
private BlazorCommerce.Shared.CategoryDto _heroCategory;

78. In the @code section of BlazorCommerce/Pages/Index.razor add a call to the BlazorCommerce API in the OnInitializedAsync method
 to retrieve the categories and then filter to the hero category from "12. Index.razor OnInitializedAsync snippet.txt"

79. Now we will populate the hero category section in the html. In BlazorCommerce/Pages/Index.razor above the line that reads
 <!-- Slider Area --> add:
@if (_heroCategory != null)
{
and after the line that reads <!--/ End Slider Area --> add:
}

80. Add a new method in the @code section of BlazorCommerce/Pages/Index.razor to conduct the string replacements
 __ to <br> _- to <span> and -_ to </span> "13. Index.razor DoPlaceholderReplacements snippet.txt"

81. In BlazorCommerce/Pages/Index.razor change the lines that read:
<h1><span>UP TO 50% OFF </span>Shirts For Men</h1>
<p>Maboriosam in a nesciung eget magnae <br> dapibus disting tloctio in the find it pereri <br> odiy maboriosm.</p>
<div class="button">
	<a href="/category/mens-shirts" class="btn">Shop Now!</a>
</div>
to what is in "14. Index.razor Hero Category snippet.txt"

82. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear and the Hero category should be dynamic and when you click
 it should go to the category page - although that isn't dynamic yet.

83. Now we will populate the small banner category section in the html. In the @code section of BlazorCommerce/Pages/Index.razor add
 a new private member, this will be used to populate the small banner categories:
private IEnumerable<BlazorCommerce.Shared.CategoryDto> _smallBannerCategories;

84. In BlazorCommerce/Pages/Index.razor under the line of code that populates _heroCategory add:
_smallBannerCategories = categories.Where(cat => cat.CategoryTypeId == 2);

85. In BlazorCommerce/Pages/Index.razor under the <!-- Start Small Banner --> replace the first instance of the lines that read:
<div class="row">
	<!-- Single Banner  -->
	<div class="col-lg-4 col-md-6 col-12">
change this with "15. Index.razor Single Banner Category snippet.txt"

86. In BlazorCommerce/Pages/Index.razor replace the first instance of the lines that read:
	</div>
	<!-- /End Single Banner  -->
</div>
change this to read:
			</div>
			<!-- /End Single Banner  -->
		}
	}
</div>

87. Delete the repeated small banner <!-- Single Banner  --> sections in BlazorCommerce/Pages/Index.razor

88. In BlazorCommerce/Pages/Index.razor replace the lines that read:
<img src="https://via.placeholder.com/600x370" alt="#">
<div class="content">
	<p>Men's Collectons</p>
	<h3>Summer travel <br> collection</h3>
	<a href="#">Discover Now</a>
</div>
with "16. Index.razor Single Banner Categories snippet.txt"

89. Now we will populate the midium banner category section in the html. In the @code section of BlazorCommerce/Pages/Index.razor add
 a new private member, this will be used to populate the small banner categories:
private IEnumerable<BlazorCommerce.Shared.CategoryDto> _midiumBannerCategories;

90. In BlazorCommerce/Pages/Index.razor under the line of code that populates _smallBannerCategories add:
_midiumBannerCategories = categories.Where(cat => cat.CategoryType == 3);

91. In BlazorCommerce/Pages/Index.razor under the <!-- Start Midium Banner --> replace the first instance of the lines that read:
<div class="row">
	<!-- Single Banner  -->
	<div class="col-lg-6 col-md-6 col-12">
change this to "17. Index.razor Midium Banner Category snippet.txt"

92. In BlazorCommerce/Pages/Index.razor replace the first instance of the lines that read:
	</div>
	<!-- /End Single Banner  -->
</div>
change this to read:
			</div>
			<!-- /End Single Banner  -->
		}
	}
</div>

93. Delete the repeated midium banner <!-- Single Banner  --> sections in BlazorCommerce/Pages/Index.razor

94. In BlazorCommerce/Pages/Index.razor replace the lines that read:
<img src="https://via.placeholder.com/600x370" alt="#">
<div class="content">
	<p>Men's Watches</p>
	<h3>Watches <br>Up to<span> 50%</span> off</h3>
	<a href="#">Shop Now</a>
</div>
with "18. Index.razor Midium Banner Categories snippet.txt"

95. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear and the various sections that have been made dynamic should
 all appear fine.

96. Now to return specific category information on the category page. In BlazorCommerce/Pages/Category.razor, just below the line that
 reads @inject AppState AppState
add:
@using System.Net.Http
@inject HttpClient Http

97. In the @code section of BlazorCommerce/Pages/Category.razor add a new private member, this will be used to populate the category
 details on the page:
private BlazorCommerce.Shared.CategoryDto _category;

98. In the @code section of BlazorCommerce/Pages/Category.razor add a call to the BlazorCommerce API in the OnParametersSetAsync method
 to retrieve the category "19. Category.razor OnParametersSetAsync snippet.txt"

99. Now that the category information has been retrieved, update the breadcrumb in BlazorCommerce/Pages/Category.razor by replacing
 the following code:
<ul class="bread-list">
	<li><a href="index1.html">Home<i class="ti-arrow-right"></i></a></li>
	<li class="active"><a href="blog-single.html">Shop List</a></li>
</ul>
with "20. Category.razor Breadcrumb snippet.txt"

100. Next to retrieve the sibling categories list with cut down details to populate the categories menu. In the @code section of
 BlazorCommerce/Pages/Category.razor add a new private member, this will be used to populate the category menu:
private IEnumerable<BlazorCommerce.Shared.CategoryMinDto> _minCategories;

101. In the @code section of BlazorCommerce/Pages/Category.razor add a call to the BlazorCommerce API in the OnInitializedAsync method
 to retrieve the _minCategories sibling list "21. Category.razor OnInitializedAsync snippet.txt"

102. Next we will use a new feature introduced in .NET 5 called CSS Isolation, first in BlazorCommerce/Pages/Category.razor replace
 the categories list with built-in Blazor NavLink components:
<!-- Single Widget -->
<div class="single-widget category">
	<h3 class="title">Categories</h3>
	<ul class="categor-list">
		<li><a href="#">T-shirts</a></li>
		<li><a href="#">jacket</a></li>
		<li><a href="#">jeans</a></li>
		<li><a href="#">sweatshirts</a></li>
		<li><a href="#">trousers</a></li>
		<li><a href="#">kitwears</a></li>
		<li><a href="#">accessories</a></li>
	</ul>
</div>
<!--/ End Single Widget -->
with "22. Category.razor Sibling minCategories snippet.txt"

103. Create a css file in the /Pages folder called Category.razor.css The content of this file will be
 "23. Category.razor Category.razor.css snippet.txt"

104. In the /wwwroot/index.html file, just above the closing <head> tag add the following:
<link href="BlazorCommerce.styles.css" rel="stylesheet">

105. In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate around the various categories and the mini category
 list on the left hand-side will be highlighted. Inspect the html of the left hand-side category menu, notice the additional seemingly
 random html attributes added to the various html elements - this is for css isolation, inspect the html and you will see the
 currentcategory class being set. Navigate around the various categories and the mini category list on the left hand-side will be highlighted,
 inspect the html and you will see the currentcategory class still being set. The value of "NavLinkMatch.All" on the Match property
 essentially sets the class of the anchor tag to be "active" if the url in the browser matches the value in the href attribute. The "active"
 class name can be overridden by setting the value of the ActiveClass attribute

106. Next to implement the Best Selling section in the Categories menu on the home page, let's start by extracting the template html and
 creating a new razor component. In VSCode add a new file called MainCategoriesMenu.razor to the /Shared folder of the BlazorCommerce project.

107. from Shared/MainLayout.razor cut and paste the html immediately below @if (AppState.DisplayCategoryMenuInHeaderNav) { and above the
 closing curly brace in to Shared/MainCategoriesMenu.razor

108. In MainLayout.razor in place of the html add the following code:
<MainCategoriesMenu />



196. Add an additional style to the css styling block on line 863 of /wwwroot/css/styles.css that reads .header.shop .main-category li .mega-menu .single-menu {
vertical-align: top;
197. At the top of Shared/MainCategoriesMenu.razor in BlazorCommerce add the following code:
@using System.Net.Http
@inject HttpClient Http
198. At the bottom of Shared/MainCategoriesMenu.razor in BlazorCommerce add the following code:
@code {
    private BlazorCommerce.Shared.BestSellingCategoriesDto _bestSellingCategories;

	protected override async Task OnInitializedAsync() {
        _bestSellingCategories = await Http.GetFromJsonAsync<BlazorCommerce.Shared.BestSellingCategoriesDto>("category/bestsellingcategories");
	}
}
199. In Shared/MainCategoriesMenu.razor in BlazorCommerce below the line of html that reads: <li class="main-mega"><a href="#">best selling <i class="fa fa-angle-right" aria-hidden="true"></i></a> add the following code:
@if (_bestSellingCategories != null)
{
200. In Shared/MainCategoriesMenu.razor in BlazorCommerce above the line of html that reads:
</li>
<li><a href="/category/accessories">accessories</a></li>
add the following code:
}
201. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<a href="/category/kids" class="title-link">Shop Kid's</a>
<div class="image">
    <img src="https://via.placeholder.com/225x155" alt="#">
</div>
<div class="inner-link">
    <a href="#">Kids Toys</a>
    <a href="#">Kids Travel Car</a>
    <a href="#">Kids Color Shape</a>
    <a href="#">Kids Tent</a>
</div>
with:
<a href="/metacategory/@_bestSellingCategories.ChildrenAndBabies.FriendlyName" class="title-link">Shop @_bestSellingCategories.ChildrenAndBabies.Name</a>
<div class="image">
    <img src="@_bestSellingCategories.ChildrenAndBabies.ImageUrl" alt="#">
</div>
<div class="inner-link">
    @foreach (var bestSellingCategory in _bestSellingCategories.ChildrenAndBabies.BestSellingLeafCategories)
    {
    <a href="/category/@bestSellingCategory.FriendlyUrl">@bestSellingCategory.Name</a>
    }
</div>
202. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<a href="/category/mens" class="title-link">Shop Men's</a>
<div class="image">
    <img src="https://via.placeholder.com/225x155" alt="#">
</div>
<div class="inner-link">
    <a href="#">Watch</a>
    <a href="#">T-shirt</a>
    <a href="#">Hoodies</a>
    <a href="#">Formal Pant</a>
</div>
with:
<a href="/metacategory/@_bestSellingCategories.Mens.FriendlyName" class="title-link">Shop @_bestSellingCategories.Mens.Name</a>
<div class="image">
    <img src="@_bestSellingCategories.Mens.ImageUrl" alt="#">
</div>
<div class="inner-link">
    @foreach (var bestSellingCategory in _bestSellingCategories.Mens.BestSellingLeafCategories)
    {
    <a href="/category/@bestSellingCategory.FriendlyUrl">@bestSellingCategory.Name</a>
    }
</div>
203. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<a href="/category/womens" class="title-link">Shop Women's</a>
<div class="image">
    <img src="https://via.placeholder.com/225x155" alt="#">
</div>
<div class="inner-link">
    <a href="#">Ladies Shirt</a>
    <a href="#">Ladies Frog</a>
    <a href="#">Ladies Sun Glass</a>
    <a href="#">Ladies Watch</a>
</div>
with:
<a href="/metacategory/@_bestSellingCategories.Womens.FriendlyName" class="title-link">Shop @_bestSellingCategories.Womens.Name</a>
<div class="image">
    <img src="@_bestSellingCategories.Womens.ImageUrl" alt="#">
</div>
<div class="inner-link">
    @foreach (var bestSellingCategory in _bestSellingCategories.Womens.BestSellingLeafCategories)
    {
    <a href="/category/@bestSellingCategory.FriendlyUrl">@bestSellingCategory.Name</a>
    }
</div>
204. The New Arrivals main category menu will now be a link to a new arrivals page rather than have a pop-out. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the code that reads:
<li><a href="/category/new-arrivals">New Arrivals <i class="fa fa-angle-right" aria-hidden="true"></i></a>
    <ul class="sub-category">
        <li><a href="/category/new-accessories">accessories</a></li>
        <li><a href="/category/new-sunglasses">sunglasses</a></li>
        <li><a href="/category/new-watches">watches</a></li>
        <li><a href="/category/new-mens">mens</a></li>
        <li><a href="/category/new-ladies">ladies</a></li>
    </ul>
</li>
with:
<li><a href="/new-arrivals">New Arrivals</a></li>


210. In Shared/MainCategoriesMenu.razor in BlazorCommerce add a new private member:
private List<MenuCategoryDto> _menuCategories;
211. In Shared/MainCategoriesMenu.razor in BlazorCommerce in the OnInitializedAsync method add a new call to populate the _menuCategories:
_menuCategories = await Http.GetFromJsonAsync<List<MenuCategoryDto>>("category/menucategories");
212. In Shared/MainCategoriesMenu.razor in BlazorCommerce above the line of code that reads: <li><a href="/category/accessories">accessories</a></li> add:
@if (_menuCategories != null)
{
213. In Shared/MainCategoriesMenu.razor in BlazorCommerce change the lines of code that read:
            <li><a href="/categories/shoes">shoes</a></li>
        </ul>
    </div>
</div>
with:
            <li><a href="/categories/shoes">shoes</a></li>
            }
        </ul>
    </div>
</div>
214. In Shared/MainCategoriesMenu.razor in BlazorCommerce replace the lines of code that read:
<li><a href="/category/accessories">accessories</a></li>
<li><a href="/category/womens">women's clothes</a></li>
<li><a href="/category/sunglasses">sunglasses</a></li>
<li><a href="/category/watches">watches</a></li>
<li><a href="/category/mens">men's clothes</a></li>
<li><a href="/category/kids-clothes">kids clothes</a></li>
<li><a href="/categories/seasonal">seasonal</a></li>
<li><a href="/categories/shoes">shoes</a></li>
with:
@foreach (var menuCategory in _menuCategories)
{
<li><a href="/category/@menuCategory.FriendlyUrl">@menuCategory.Name</a></li>
}
215. Next is to sort out the Trending Items which will be limited to the three meta categories which will be products that are regularly viewed and limit to 4 rather than 8. To start we will need to add a new class file to BlazorCommerce.Shared called ProductMinDto with the following code:


222. In Pages/Index.razor in BlazorCommerce change the line that reads:
<h2>Trending Item</h2>
to:
<h2>Trending Items</h2>
223. In Pages/Index.razor in BlazorCommerce change the lines that read:
<li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#man" role="tab">Man</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#women" role="tab">Woman</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#kids" role="tab">Kids</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#accessories" role="tab">Accessories</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#essential" role="tab">Essential</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#prices" role="tab">Prices</a></li>
to:
<li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#childrenandbabies" role="tab">Children & Babies</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#women" role="tab">Women</a></li>
<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#men" role="tab">Men</a></li>
224. In Pages/Index.razor in BlazorCommerce delete the divs for accessories, essential and prices
225. In the code section of Pages/Index.razor in BlazorCommerce add the following line of code:
private TrendingProductsDto _trendingProducts;
226. In Pages/Index.razor in BlazorCommerce in the OnInitializedAsync method add a new call to populate the _trendingProducts:
_trendingProducts = await Http.GetFromJsonAsync<TrendingProductsDto>("product/trendingproducts");
227. In Pages/Index.razor in BlazorCommerce change the line of html that reads:
<div class="tab-pane fade show active" id="man" role="tabpanel">
to:
<div class="tab-pane fade show active" id="childrenandbabies" role="tabpanel">
228. In Pages/Index.razor in BlazorCommerce under the div for childrenandbabies, delete all the divs below the <div class="row"> and replace with:
@if (_trendingProducts != null)
{
	@foreach (var trendingProduct in _trendingProducts.ChildrenAndBabies)
	{
		<div class="col-xl-3 col-lg-4 col-md-4 col-12">
			<div class="single-product">
				<div class="product-img">
					<a href="/product/@trendingProduct.FriendlyUrl">
						<img class="default-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
						<img class="hover-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
					</a>
					<div class="button-head">
						<div class="product-action">
							<a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
							<a title="Wishlist" href="#"><i class=" ti-heart "></i><span>Add to Wishlist</span></a>
							<a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a>
						</div>
						<div class="product-action-2">
							<a title="Add to cart" href="#">Add to cart</a>
						</div>
					</div>
				</div>
				<div class="product-content">
					<h3><a href="/product/@trendingProduct.FriendlyUrl">@trendingProduct.Name</a></h3>
					<div class="product-price">
						<span>@string.Format("£{0:0.00}", trendingProduct.Price)</span>
					</div>
				</div>
			</div>
		</div>
	}
}
229. In Pages/Index.razor in BlazorCommerce under the div for women, delete all the divs below the <div class="row"> and replace with:
@if (_trendingProducts != null)
{
	@foreach (var trendingProduct in _trendingProducts.Womens)
	{
		<div class="col-xl-3 col-lg-4 col-md-4 col-12">
			<div class="single-product">
				<div class="product-img">
					<a href="/product/@trendingProduct.FriendlyUrl">
						<img class="default-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
						<img class="hover-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
					</a>
					<div class="button-head">
						<div class="product-action">
							<a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
							<a title="Wishlist" href="#"><i class=" ti-heart "></i><span>Add to Wishlist</span></a>
							<a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a>
						</div>
						<div class="product-action-2">
							<a title="Add to cart" href="#">Add to cart</a>
						</div>
					</div>
				</div>
				<div class="product-content">
					<h3><a href="/product/@trendingProduct.FriendlyUrl">@trendingProduct.Name</a></h3>
					<div class="product-price">
						<span>@string.Format("£{0:0.00}", trendingProduct.Price)</span>
					</div>
				</div>
			</div>
		</div>
	}
}
230. In Pages/Index.razor in BlazorCommerce change the line of html that reads:
<div class="tab-pane fade" id="kids" role="tabpanel">
to:
<div class="tab-pane fade" id="men" role="tabpanel">
231. In Pages/Index.razor in BlazorCommerce under the div for men, delete all the divs below the <div class="row"> and replace with:
@if (_trendingProducts != null)
{
	@foreach (var trendingProduct in _trendingProducts.Mens)
	{
		<div class="col-xl-3 col-lg-4 col-md-4 col-12">
			<div class="single-product">
				<div class="product-img">
					<a href="/product/@trendingProduct.FriendlyUrl">
						<img class="default-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
						<img class="hover-img" src="@trendingProduct.TrendingItemImageUrl" alt="#">
					</a>
					<div class="button-head">
						<div class="product-action">
							<a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class=" ti-eye"></i><span>Quick Shop</span></a>
							<a title="Wishlist" href="#"><i class=" ti-heart "></i><span>Add to Wishlist</span></a>
							<a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a>
						</div>
						<div class="product-action-2">
							<a title="Add to cart" href="#">Add to cart</a>
						</div>
					</div>
				</div>
				<div class="product-content">
					<h3><a href="/product/@trendingProduct.FriendlyUrl">@trendingProduct.Name</a></h3>
					<div class="product-price">
						<span>@string.Format("£{0:0.00}", trendingProduct.Price)</span>
					</div>
				</div>
			</div>
		</div>
	}
}
232. Now we need to fix the breadcrumb on the category page, so that the meta category is shown. Create a new class file in BlazorCommerce.Shared called MetaCategoryMinDto and add the following code:

234. This new property needs to be populated so it can be used in the breadcrumbs. In CategoryRepository in BlazorCommerce.Data alter the sql statement in the Get method to read:

236. In Pages/Category.razor in BlazorCommerce we need to update the breadcrumb section. Add the following code above the line of code that reads <li class="active"><a href="category/@_category.FriendlyUrl">@_category.Name</a></li>
<li><a href="metacategory/@_category.MetaCategory.FriendlyUrl">@_category.MetaCategory.Name</a><i class="ti-arrow-right"></i></li>
237. Next we need to display the products associated with the leaf category.


243. In the code section of Pages/Category.razor in BlazorCommerce add the following line of code:
private IEnumerable<BlazorCommerce.Shared.CategoryProductDto> _categoryProducts;
244. In the OnParametersSetAsync method in Pages/Category.razor in BlazorCommerce add the following line of code:
_categoryProducts = await Http.GetFromJsonAsync<IEnumerable<BlazorCommerce.Shared.CategoryProductDto>>($"product/categoryproducts/{_category.Id}");
245. In Pages/Category.razor in BlazorCommerce replace the html that reads:
        <!--/ End Shop Top -->
    </div>
</div>
<div class="row">
    <div class="col-lg-4 col-md-6 col-12">
with:
        <!--/ End Shop Top -->
    </div>
</div>
<div class="row">
    @if (_categoryProducts != null)
    {
    <div class="col-lg-4 col-md-6 col-12">
246. In Pages/Category.razor in BlazorCommerce replace the html that reads:
                    </div>
                </div>
            </div>
        </div>
     </div>
</section>
<!--/ End Product Style 1  -->
with:
                    </div>
                    }
                </div>
            </div>
        </div>
     </div>
</section>
<!--/ End Product Style 1  -->
247. In Pages/Category.razor in BlazorCommerce delete all divs with <div class="col-lg-4 col-md-6 col-12">
248. In Pages/Category.razor in BlazorCommerce within @if (_categoryProducts != null) add the following code:
@foreach(var categoryProduct in _categoryProducts)
{
<div class="col-lg-4 col-md-6 col-12">
    <div class="single-product">
        <div class="product-img">
            <a href="/product/@categoryProduct.FriendlyUrl"><img class="default-img" src="@categoryProduct.CategoryImageUrl" alt="#"> <img class="hover-img" src="@categoryProduct.CategoryHoverImageUrl" alt="#"></a>
            <div class="button-head">
                <div class="product-action"><a data-toggle="modal" data-target="#exampleModal" title="Quick View" href="#"><i class="ti-eye"></i><span>Quick Shop</span></a> <a title="Wishlist" href="#"><i class="ti-heart"></i><span>Add to Wishlist</span></a> <a title="Compare" href="#"><i class="ti-bar-chart-alt"></i><span>Add to Compare</span></a></div>
                <div class="product-action-2"><a title="Add to cart" href="#">Add to cart</a></div>
            </div>
        </div>
        <div class="product-content">
            <h3><a href="/product/@categoryProduct.FriendlyUrl">@categoryProduct.Name</a></h3>
            <div class="product-price"><span>@string.Format("£{0:0.00}", categoryProduct.Price)</span></div>
        </div>
    </div>
</div>
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, click on a category and the product associated with that category should now appear on the category page.

249. Now to make the details dynamic on the product page.

256. In Pages/Product.razor in BlazorCommerce add the following code to the top of the file below the AppState:
@using System.Net.Http
@inject HttpClient Http

257. In Pages/Product.razor in BlazorCommerce add the following line of code to the @code section:
private BlazorCommerce.Shared.ProductDto _product;

protected override async Task OnParametersSetAsync()
{
    _product = await Http.GetFromJsonAsync<BlazorCommerce.Shared.ProductDto>($"product/{friendlyProductUrl}");
}
258. In Pages/Product.razor in BlazorCommerce change the line of html that reads:
<li class="active"><a href="blog-single.html">Shop Details</a></li>
to:
@if (_product != null)
{
<li><a href="metacategory/@_product.MetaCategoryFriendlyUrl">@_product.MetaCategory</a><i class="ti-arrow-right"></i></li>
<li><a href="category/@_product.LeafCategoryFriendlyUrl">@_product.LeafCategory</a><i class="ti-arrow-right"></i></li>
<li class="active"><a href="product/@friendlyProductUrl">@_product.Title</a></li>
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate to a product and the breadcrumb should be updated accordingly

259. In Pages/Product.razor in BlazorCommerce change the lines of html that read:
<!-- Product Slider -->
<div class="product-gallery">
    <!-- Images slider -->
    <div class="flexslider-thumbnails">
        <ul class="slides">
            <li data-thumb="https://via.placeholder.com/570x520" rel="adjustX:10, adjustY:">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
            <li data-thumb="https://via.placeholder.com/570x520">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
            <li data-thumb="https://via.placeholder.com/570x520">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
            <li data-thumb="https://via.placeholder.com/570x520">
                <img src="https://via.placeholder.com/570x520" alt="#">
            </li>
        </ul>
    </div>
    <!-- End Images slider -->
</div>
<!-- End Product slider -->
with:
<!-- Product Slider -->
<div class="product-gallery">
    <!-- Images slider -->
    <div class="flexslider-thumbnails">
        <ul class="slides">
            @if (_product != null)
            {
                <li data-thumb="@_product.MainImageThumbnailUrl" rel="adjustX:10, adjustY:">
                    <img src="@_product.MainImageUrl" alt="#">
                </li>
                @if (!string.IsNullOrEmpty(_product.SecondImageUrl))
                {
                <li data-thumb="@_product.SecondImageThumbnailUrl">
                    <img src="@_product.SecondImageUrl" alt="#">
                </li>
                }
                @if (!string.IsNullOrEmpty(_product.ThirdImageUrl))
                {
                <li data-thumb="@_product.ThirdImageThumbnailUrl">
                    <img src="@_product.ThirdImageUrl" alt="#">
                </li>
                }
                @if (!string.IsNullOrEmpty(_product.FourthImageUrl))
                {
                <li data-thumb="@_product.FourthImageThumbnailUrl">
                    <img src="@_product.FourthImageUrl" alt="#">
                </li>
                }
            }
        </ul>
    </div>
    <!-- End Images slider -->
</div>
<!-- End Product slider -->
260. To get the Javascript features (including the flex slider) it needs to be triggered manually because the html isn't rendered until after the jquery document.ready event. To do this requires using a feature of Blazor known as JSInterop.
Javascript methods can be called from C# code (and vice-versa). In wwwroot/index.html in BlazorCommerce add the following code to the bottom of the file just above the closing body tag:
<script>
function setLayoutFeatures() {
	$('.menu').slicknav({
		prependTo:".mobile-nav",
		duration:300,
		animateIn: 'fadeIn',
		animateOut: 'fadeOut',
		closeOnClick:true,
	});
	jQuery(window).on('scroll', function() {
		if ($(this).scrollTop() > 200) {
			$('.header').addClass("sticky");
		} else {
			$('.header').removeClass("sticky");
		}
	});
}
function setFlexSlider() {
	$('.flexslider-thumbnails').flexslider({
		animation: "slide",
		controlNav: "thumbnails",
	});
}
function setProductPageQuantityCounter() {
	$('.btn-number').click(function(e) {
		e.preventDefault();
		fieldName = $(this).attr('data-field');
		type = $(this).attr('data-type');
		var input = $("input[name='" + fieldName + "']");
		var currentVal = parseInt(input.val());
		if (!isNaN(currentVal)) {
			if (type == 'minus') {
				if (currentVal > input.attr('data-min')) {
					input.val(currentVal - 1).change();
					if (currentVal - 1 < input.attr('data-max')) {
						$(".btn-number[data-type='plus'][data-field='" + fieldName + "']").removeAttr('disabled');
					}
				}
				if (parseInt(input.val()) == input.attr('data-min')) {
					$(this).attr('disabled', true);
				}
			} else if (type == 'plus') {
				if (currentVal < input.attr('data-max')) {
					input.val(currentVal + 1).change();
					if (currentVal + 1 > input.attr('data-min')) {
						$(".btn-number[data-type='minus'][data-field='" + fieldName + "']").removeAttr('disabled');
					}
				}
				if (parseInt(input.val()) == input.attr('data-max')) {
					$(this).attr('disabled', true);
				}
			}
		} else {
			input.val(0);
		}
	});
	$('.input-number').focusin(function() {
		$(this).data('oldValue', $(this).val());
	});
	$('.input-number').change(function() {
		minValue = parseInt($(this).attr('data-min'));
		maxValue = parseInt($(this).attr('data-max'));
		valueCurrent = parseInt($(this).val());
		name = $(this).attr('name');
		if (valueCurrent >= minValue) {
			$(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
		} else {
			alert('Sorry, the minimum value was reached');
			$(this).val($(this).data('oldValue'));
		}
		if (valueCurrent <= maxValue) {
			$(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
		} else {
			alert('Sorry, the maximum value was reached');
			$(this).val($(this).data('oldValue'));
		}
	});
	$(".input-number").keydown(function(e) {
		// Allow: backspace, delete, tab, escape, enter and .
		if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 || // Allow: Ctrl+A
		(e.keyCode == 65 && e.ctrlKey === true) || // Allow: home, end, left, right
		(e.keyCode >= 35 && e.keyCode <= 39)) {
			// let it happen, don't do anything
			return;
		}
		// Ensure that it is a number and stop the keypress
		if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
			e.preventDefault();
		}
	});
}
</script>
261. In Pages/Product.razor in BlazorCommerce add the following below the line of code that reads @inject HttpClient Http :
@inject IJSRuntime JSRuntime
262. In Pages/Product.razor in BlazorCommerce add the following method to the @code:
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    await JSRuntime.InvokeVoidAsync("setFlexSlider");
    if (firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setProductPageQuantityCounter");
    }
}
263. In Shared/MainLayout.razor in BlazorCommerce add the following below the line of code that reads @inject HttpClient Http :
@inject IJSRuntime JSRuntime
264. In Shared/MainLayout.razor in BlazorCommerce add the following method to the @code:
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    await JSRuntime.InvokeVoidAsync("setLayoutFeatures");
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate to a product and the flex slider should now be working and rendered correctly

265. In Pages/Product.razor in BlazorCommerce replace the html:
<h4>Nonstick Dishwasher PFOA</h4>
with:
@if (_product != null)
{
<h4>@_product.Title</h4>
}
266. In Pages/Product.razor in BlazorCommerce replace the html:
<p class="price"><span class="discount">$70.00</span><s>$80.00</s></p>
<p class="description">eget velit. Donec ac tempus ante. Fusce ultricies massa massa. Fusce aliquam, purus eget sagittis vulputate, sapien libero hendrerit est, sed commodo augue nisi non neque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempor, lorem et placerat vestibulum, metus nisi posuere nisl, in</p>
with:
@if (_product != null)
{
<p class="price"><span class="discount">@string.Format("£{0:0.00}", _product.Price)</span></p>
<p class="description">@_product.BriefDescription</p>
}
267. In Pages/Product.razor in BlazorCommerce replace the html that reads:
<input type="text" name="quant[1]" class="input-number" data-min="1" data-max="1000" value="1">
with:
@if (_product != null)
{
<input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@_product.Stock" value="1">
}
268. In Pages/Product.razor in BlazorCommerce replace the html that reads:
<p class="cat">Category :<a href="#">Clothing</a></p>
<p class="availability">Availability : 180 Products In Stock</p>
with:
@if (_product != null)
{
<p class="cat">Category :<a href="category/@_product.LeafCategoryFriendlyUrl">@string.Concat(_product.MetaCategory, " ", _product.LeafCategory)</a></p>
<p class="availability">Availability : @_product.Stock Products In Stock</p>
}
269. In Pages/Product.razor in BlazorCommerce replace the html that reads:
<li>long established fact.</li>
<li>has a more-or-less normal distribution.</li>
<li>lmany variations of passages of.</li>
<li>generators on the Interne.</li>
with:
@if (_product != null)
{
    @foreach (var feature in _product.Features)
    {
    <li>@feature</li>
    }
}
270. In Pages/Product.razor in BlazorCommerce change the html that reads:
<!-- Color -->
<div class="color">
    <h4>Available Options <span>Color</span></h4>
    <ul>
        <li><a href="#" class="one"><i class="ti-check"></i></a></li>
        <li><a href="#" class="two"><i class="ti-check"></i></a></li>
        <li><a href="#" class="three"><i class="ti-check"></i></a></li>
        <li><a href="#" class="four"><i class="ti-check"></i></a></li>
    </ul>
</div>
<!--/ End Color -->
<!-- Size -->
<div class="size">
    <h4>Size</h4>
    <ul>
        <li><a href="#" class="one">S</a></li>
        <li><a href="#" class="two">M</a></li>
        <li><a href="#" class="three">L</a></li>
        <li><a href="#" class="four">XL</a></li>
        <li><a href="#" class="four">XXL</a></li>
    </ul>
</div>
<!--/ End Size -->
to:
<!--/ End Description -->
@if (_product != null && _product.ProductOptionType != "N/A")
{
<!-- Product Options -->
<div class="color"><h4>Available Options</h4></div>
<div class="size">
    <h4>@_product.ProductOptionType</h4>
    <ul>
        @{
            int counter = 1;
            string[] ones = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twentyone", "twentytwo", "twentythree", "twentyfour", "twentyfive"};
        
        foreach (var productOption in _product.ProductOptions)
        {
        <li><a href="#" class="@ones[counter - 1]">@productOption.Option</a></li>
            counter++;
        }
        }
    </ul>
</div>
<!--/ Product Options -->
}
271. In wwwroot/css/style.css, find the style definition for:
.shop.single .product-des .size ul li a
and delete the width setting and add
padding-left: 4px;
padding-right: 4px;
272. Add a new method in the @code section of BlazorCommerce/Pages/Product.razor to conduct the string replacements __p__ and __cp__ to opening and closing paragraph tags:
protected string DoPlaceholderReplacements(string source)
{
	return source.Replace("__p__", "<p>").Replace("__cp__", "</p><br>");
}
273. In Pages/Product.razor in BlazorCommerce change the html that reads:
<div class="tab-pane fade show active" id="description" role="tabpanel">
    <div class="tab-single">
        <div class="row">
            <div class="col-12">
                <div class="single-des">
                    <p>simply dummy text .....
                </div>
                <div class="single-des">
                    <p>Suspendisse consequatur .....
                </div>
to:
<div class="tab-pane fade show active" id="description" role="tabpanel">
    <div class="tab-single">
        <div class="row">
            <div class="col-12">
                @if (_product != null)
                {
                <div class="single-des">
                    @((MarkupString)DoPlaceholderReplacements(_product.FullDescription))
                </div>
                }
274. In wwwroot/css/style.css, find the style definition for:
.shop.single .product-des .color
and delete the display: inline-block setting
275. Every time someone visits a product page, the number of times view counter in the database needs to increase by 1.

279. In Pages/Product.razor in BlazorCommerce add the following code to the OnParametersSetAsync method:
await Http.PostAsync($"product/incrementnumberoftimesviewed/{friendlyProductUrl}", null);
280. Before we can implement the Add to Cart functionality, we need to generate a cookie for the cart id, register it in the database and load any existing cart items from the database. Add the following JavaScript methods to the bottom of the page just before the closing </script> tag in wwwroot/index.html in BlazorCommerce:
function setCartCookie(cvalue) {
	const cname = "cartid";
	const exdays = 365;
	var d = new Date();
	d.setTime(d.getTime() + (exdays*24*60*60*1000));
	const expires = "expires="+ d.toUTCString();
	document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}
function getCartCookie() {
	const cname = "cartid";
	const name = cname + "=";
	var decodedCookie = decodeURIComponent(document.cookie);
	var ca = decodedCookie.split(';');
	for (var i = 0; i <ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
}
281. Add the following code to OnAfterRenderAsync of Shared/MainLayout.razor in BlazorCommerce to read or generate the cart id cookie:
protected override async Task OnAfterRenderAsync(bool firstRender)
{
	if (firstRender)
	{
		await JSRuntime.InvokeVoidAsync("setLayoutFeatures");
		var cartId = await JSRuntime.InvokeAsync<string>("getCartCookie");
		if (string.IsNullOrEmpty(cartId))
		{
			cartId = System.Guid.NewGuid().ToString();
			await JSRuntime.InvokeVoidAsync("setCartCookie", cartId);
		}
	}
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, open the developer tools and take a look at the cookies, the cartid cookie will be there

282. We need to add code to retrieve the cart and its contents from the database.

287. In Shared/MainLayout.razor in BlazorCommerce, just below the line that reads @inject IJSRuntime JSRuntime
add:
@using System.Net.Http
@using System.Linq
@inject HttpClient Http
288. In the @code section of Shared/MainLayout.razor in BlazorCommerce add:
private CartMinDto _cart;
289. In Shared/MainLayout.razor in BlazorCommerce, in the OnAfterRenderAsync method at the end of the if (firstRender) clause add:
_cart = await Http.GetFromJsonAsync<CartMinDto>($"cartmin/{cartId}");
StateHasChanged();
290. In Shared/MainLayout.razor in BlazorCommerce, above the html that reads <div class="sinlge-bar shopping">
add:
@if (_cart != null)
{
291. In Shared/MainLayout.razor in BlazorCommerce, change the code that reads:
		<!--/ End Shopping Item -->
	</div>
</div>
to:
		<!--/ End Shopping Item -->
	</div>
	}
</div>
292. In Shared/MainLayout.razor in BlazorCommerce, replace from <div class="sinlge-bar shopping"> to its closing </div> with:
<div class="sinlge-bar shopping">
	<a href="/cart" class="single-icon"><i class="ti-bag"></i>
	@if (_cart.CartItems.Count() > 0)
	{
		<span class="total-count">@_cart.CartItems.Sum(ci => ci.Quantity)</span>
	}
	</a>
	<!-- Shopping Item -->
	<div class="shopping-item">
		<div class="dropdown-cart-header">
			@if (_cart.CartItems.Count() > 0)
			{
			<span>@_cart.CartItems.Sum(ci => ci.Quantity) @string.Format("Item{0}", _cart.CartItems.Sum(ci => ci.Quantity) != 1 ? "s" : string.Empty)</span>
			}
			<a href="/cart">View Cart</a>
		</div>
		<ul class="shopping-list">
			@foreach (var cartItem in _cart.CartItems)
			{
			<li>
				<a href="#" class="remove" title="Remove this item"><i class="fa fa-remove"></i></a>
				<a class="cart-img" href="#"><img src="@cartItem.CartThumbnailImageUrl" alt="#"></a>
				<h4><a href="#">@cartItem.ProductName</a></h4>
				<p class="quantity">@cartItem.Quantity x - <span class="amount">@string.Format("£{0:0.00}", cartItem.TotalAmount)</span></p>
			</li>
			}
		</ul>
		<div class="bottom">
			<div class="total">
				<span>Total</span>
				<span class="total-amount">@string.Format("£{0:0.00}", _cart.CartItems.Sum(c => c.TotalAmount))</span>
			</div>
			<a href="checkout.html" class="btn animate">Checkout</a>
		</div>
	</div>
	<!--/ End Shopping Item -->
</div>
293. In wwwroot/css/styles.css in BlazorCommerce, under the style: .shop.single .product-des .size ul li a:hover
add:
.shop.single .product-des .size ul li button {
	display: block;
	height: 30px;
	border: 1px solid #5C2D91;
	text-align: center;
	line-height: 30px;
	font-size: 14px;
	padding-left: 4px;
	padding-right: 4px;
	background-color: #eee;
	color: #000;
	margin-bottom: 4px;
}
.shop.single .product-des .size ul li button.selected{
	color: #eee;
	background-color: #5C2D91;
}
294. In the @code section of Pages/Product.razor in BlazorCommerce add the following:
[Parameter]
public int ProductOptionProductInstanceId { get; set; }

[Parameter]
public string ProductPrice { get; set; }

[Parameter]
public int ProductStock {get;set;}

[Parameter]
public int ProductQuantity {get;set;}
295. In the OnParametersSetAsync method of Pages/Product.razor in BlazorCommerce add the following:
ProductOptionProductInstanceId = _product.ProductOptionProductInstanceId;
ProductPrice = string.Format("£{0:0.00}", _product.Price);
ProductStock = _product.Stock;
ProductQuantity = 1;
296. In Pages/Product.razor in BlazorCommerce replace the line of code that reads <p class="price"><span class="discount">@string.Format("£{0:0.00}", _product.Price)</span></p> with:
<p class="price"><span class="discount">@ProductPrice</span></p>
297. In Pages/Product.razor in BlazorCommerce under the line of code that reads <p class="description">@_product.BriefDescription</p>
add:
<input id="selectedProductOptionProductInstanceId" type="hidden" @bind="ProductOptionProductInstanceId" />
298. In Pages/Product.razor in BlazorCommerce replace the line of code that reads <input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@_product.Stock" value="1"> with:
<input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@ProductStock" value="@ProductQuantity">
299. In Pages/Product.razor in BlazorCommerce replace the line of code that reads <p class="availability">Availability : @_product.Stock Products In Stock</p> with:
<p class="availability">Availability : @ProductStock Products In Stock</p>
300. In the @code section of Pages/Product.razor in BlazorCommerce add the following method:
private void UpdateSelectedProductOption(int productOptionProductInstanceId, decimal productPrice, int productStock)
{
    ProductOptionProductInstanceId = productOptionProductInstanceId;
    ProductPrice = string.Format("£{0:0.00}", productPrice);
    ProductStock = productStock;
    ProductQuantity = 1;
}
301. Now to be able to add products to the cart from the product page. In Pages/Product.razor in BlazorCommerce, change the line that reads:
<ul>
    @{
        int counter = 1;
        string[] ones = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twentyone", "twentytwo", "twentythree", "twentyfour", "twentyfive"};
    
    foreach (var productOption in _product.ProductOptions)
    {
    <li><a href="#" class="@ones[counter - 1]">@productOption.Option</a></li>
        counter++;
    }
    }
</ul>
to:
<ul>
    @foreach (var productOption in _product.ProductOptions)
    {
    <li><button @onclick="() => UpdateSelectedProductOption(productOption.ProductOptionProductInstanceId, productOption.Price, productOption.Stock)" class='@string.Format("{0}", productOption.ProductOptionProductInstanceId == _product.ProductOptionProductInstanceId ? "selected" : string.Empty)'>@productOption.Option</button></li>
    }
</ul>
302. In the @code section of Pages/Product.razor in BlazorCommerce add the following methods:
private void DecrementQuantity()
{
    if (ProductQuantity <= 1)
    {
        ProductQuantity = 1;
    }
    else
    {
        ProductQuantity--;
    }
}

private void IncrementQuantity()
{
    if (ProductQuantity >= ProductStock)
    {
        ProductQuantity = ProductStock;
    }
    else
    {
        ProductQuantity++;
    }
}
303. In Pages/Product.razor in BlazorCommerce replace the code that reads:
<!-- Input Order -->
<div class="input-group">
    <div class="button minus">
        <button type="button" class="btn btn-primary btn-number" disabled="disabled" data-type="minus" data-field="quant[1]">
            <i class="ti-minus"></i>
        </button>
    </div>
    @if (_product != null)
    {
    <input type="text" name="quant[1]" class="input-number" data-min="1" data-max="@ProductStock" value="@ProductQuantity">
    }
    <div class="button plus">
        <button type="button" class="btn btn-primary btn-number" data-type="plus" data-field="quant[1]">
            <i class="ti-plus"></i>
        </button>
    </div>
</div>
<!--/ End Input Order -->
with:
<!-- Input Order -->
<div class="input-group">
    <div class="button minus">
        <button type="button" class="btn btn-primary btn-number" @onclick="() => DecrementQuantity()">
            <i class="ti-minus"></i>
        </button>
    </div>
    @if (_product != null)
    {
    <input type="text" class="input-number" readonly value="@ProductQuantity">
    }
    <div class="button plus">
        <button type="button" class="btn btn-primary btn-number" @onclick="() => IncrementQuantity()">
            <i class="ti-plus"></i>
        </button>
    </div>
</div>
<!--/ End Input Order -->
304. In the OnAfterRenderAsync method in Pages/Product.razor in BlazorCommerce, delete the code that reads:
if (firstRender)
{
    await JSRuntime.InvokeVoidAsync("setProductPageQuantityCounter");
}
305. In wwwroot/index.html in BlazorCommerce delete the setProductPageQuantityCounter JavaScript method as this is no longer required

311. In the @code section of Pages/Product.razor in BlazorCommerce add the following methods:
private async Task AddItemToCart()
{
    var cartItem = new AddItemToCartDto{
        CartGuid = await JSRuntime.InvokeAsync<string>("getCartCookie"),
        ProductOptionProductInstanceId = ProductOptionProductInstanceId,
        Quantity = ProductQuantity
    };
    await Http.PostAsJsonAsync("cart/additemtocart", cartItem);
}
312. In Pages/Product.razor in BlazorCommerce replace the code that reads:
<a href="#" class="btn">Add to cart</a>
with:
<button class="btn" @onclick="AddItemToCart">Add to cart</button>
313. Now we need to notify MainLayout.razor to re-render so that the cart is updated. Change the AddItemToCart() method in Pages/Product.razor to public.
314. Add an additional line of code at the bottom of the AddItemToCart() method in Pages/Product.razor:
await JSRuntime.InvokeVoidAsync("notifyUpdateToCart");
315. In wwwroot/index.html add a new JavaScript method:
var GLOBAL = {};
GLOBAL.DotNetReference = null;
GLOBAL.SetDotnetReference = function (pDotNetReference) {
	GLOBAL.DotNetReference = pDotNetReference;
};

function notifyUpdateToCart() {
	GLOBAL.DotNetReference.invokeMethodAsync('TriggerUpdateToCart');
}
316. In Shared/MainLayout.razor in BlazorCommerce add the following methods:
protected override async Task OnInitializedAsync()
{
	var lDotNetReference = DotNetObjectReference.Create(this);
	await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
}

[JSInvokable("TriggerUpdateToCart")]
public async Task TriggerUpdateToCart()
{
	var cartId = await JSRuntime.InvokeAsync<string>("getCartCookie");
	_cart = await Http.GetFromJsonAsync<CartMinDto>($"cartmin/{cartId}");
	StateHasChanged();
}

In the Terminal window cd in to BlazorCommerce and type dotnet run
In another Terminal window cd in to BlazorCommerce.Api and type dotnet run
In a browser go to https://localhost:5001 and the index page should appear, navigate to a product page and add a product to the cart, take a look at the top of the page and the number of items in the cart has increased



https://www.freelogodesign.org
https://webassembly.org/
https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-5.0
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly
https://blazor-university.com/components/render-trees/
https://stackoverflow.com/questions/62954461/the-assembly-does-not-contain-a-public-invokable-method-with-jsinvokableattribu
https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-5.0
https://www.syncfusion.com/faq/how-do-you-create-a-cookie-in-the-client-side-of-blazor
https://auth0.com/blog/securing-blazor-webassembly-apps/
https://lisuto.com/4-tips-for-the-winning-ecommerce-site-category-structure/
https://www.c-sharpcorner.com/article/repository-pattern-with-ado-net-in-mvc/
https://zetcode.com/csharp/sqlite/
https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-sln
https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new
https://docs.microsoft.com/en-us/dotnet/standard/data/sqlite/?tabs=netcore-cli
https://stackoverflow.com/questions/15292880/create-sqlite-database-and-table
https://www.c-sharpcorner.com/UploadFile/ranjancse/net-co-introduction-to-microsoft-data-sqlite/
https://www.developersoapbox.com/connecting-to-a-sqlite-database-using-net-core/
https://code-maze.com/blazor-webassembly-httpclient/
